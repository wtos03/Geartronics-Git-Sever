   1               		.file	"test_uart.c"
   2               		.arch atmega32
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  63               	.global	__vector_13
  65               	__vector_13:
   1:test_uart.c   **** /*
   2:test_uart.c   ****  Module 				:   UART
   3:test_uart.c   ****  Description 			:   Universal Async Transmitter
   4:test_uart.c   ****  Original written for 	:   ATMEGA32
   5:test_uart.c   ****  CPU port/tested		:   ATMEGA32
   6:test_uart.c   ****  Hardware use			:   RS-232
   7:test_uart.c   ****  Port use				:   UART Port Tx/Rx PD0, PD1
   8:test_uart.c   ****  Memory	FLASH			:   XXX
   9:test_uart.c   **** 		RAM				:   XXX
  10:test_uart.c   **** 		EEPROM			:   XXX
  11:test_uart.c   ****  Document				:   Document describe algorithm
  12:test_uart.c   ****  Written by 			:   Wichai / wichai@geartronics.net
  13:test_uart.c   ****  Date					:   1/06/2006
  14:test_uart.c   ****   
  15:test_uart.c   ****  Update History
  16:test_uart.c   ****  
  17:test_uart.c   ****  Date			By 					Comments
  18:test_uart.c   ****  ----			--					---------
  19:test_uart.c   ****  
  20:test_uart.c   ****  
  21:test_uart.c   **** */
  22:test_uart.c   **** 
  23:test_uart.c   **** 
  24:test_uart.c   **** #include <stdlib.h>
  25:test_uart.c   **** #include <avr/io.h>
  26:test_uart.c   **** #include <avr/interrupt.h>
  27:test_uart.c   **** #include <avr/signal.h>
  28:test_uart.c   **** 
  29:test_uart.c   **** #include "E_uart.h"
  30:test_uart.c   **** 
  31:test_uart.c   **** 
  32:test_uart.c   **** //  Global Data for Rx/Tx
  33:test_uart.c   **** //uint8_t g_rcv_buff[MAX_BUFF];  // Circular buffer
  34:test_uart.c   **** //uint8_t g_tra_buff[MAX_BUFF];
  35:test_uart.c   **** //uint8_t g_rcv_ptr = 0;		  // Pointer for Rx buffer
  36:test_uart.c   **** //uint8_t g_tra_ptr = 0;        // Pointer for Tx buffer    
  37:test_uart.c   **** //uint8_t g_getc_ptr = 0;       //  Pointer for getc fn 
  38:test_uart.c   **** //uint8_t g_putc_ptr = 0;       //  Pointer for putc fn
  39:test_uart.c   **** //uint8_t g_ch;
  40:test_uart.c   **** 
  41:test_uart.c   **** /* UART receiver ready
  42:test_uart.c   **** */
  43:test_uart.c   **** 
  44:test_uart.c   **** SIGNAL(SIG_UART_RECV)
  45:test_uart.c   **** {  
  67               	.LM1:
  68               	/* prologue: frame size=0 */
  69 0000 1F92      		push __zero_reg__
  70 0002 0F92      		push __tmp_reg__
  71 0004 0FB6      		in __tmp_reg__,__SREG__
  72 0006 0F92      		push __tmp_reg__
  73 0008 1124      		clr __zero_reg__
  74 000a 2F93      		push r18
  75 000c 3F93      		push r19
  76 000e 4F93      		push r20
  77 0010 5F93      		push r21
  78 0012 6F93      		push r22
  79 0014 7F93      		push r23
  80 0016 8F93      		push r24
  81 0018 9F93      		push r25
  82 001a AF93      		push r26
  83 001c BF93      		push r27
  84 001e EF93      		push r30
  85 0020 FF93      		push r31
  86               	/* prologue end (size=17) */
  46:test_uart.c   ****    uint8_t ch;
  47:test_uart.c   ****    ch =  UDR;
  88               	.LM2:
  89 0022 8CB1      		in r24,44-0x20
  48:test_uart.c   ****    uart_put_RX (ch);    // Should not use UDR here to avoid characters missing
  91               	.LM3:
  92 0024 0E94 0000 		call uart_put_RX
  93               	/* epilogue: frame size=0 */
  94 0028 FF91      		pop r31
  95 002a EF91      		pop r30
  96 002c BF91      		pop r27
  97 002e AF91      		pop r26
  98 0030 9F91      		pop r25
  99 0032 8F91      		pop r24
 100 0034 7F91      		pop r23
 101 0036 6F91      		pop r22
 102 0038 5F91      		pop r21
 103 003a 4F91      		pop r20
 104 003c 3F91      		pop r19
 105 003e 2F91      		pop r18
 106 0040 0F90      		pop __tmp_reg__
 107 0042 0FBE      		out __SREG__,__tmp_reg__
 108 0044 0F90      		pop __tmp_reg__
 109 0046 1F90      		pop __zero_reg__
 110 0048 1895      		reti
 111               	/* epilogue end (size=17) */
 112               	/* function __vector_13 size 37 (3) */
 117               	.Lscope0:
 119               	.global	__vector_14
 121               	__vector_14:
  49:test_uart.c   **** }
  50:test_uart.c   ****  
  51:test_uart.c   ****  
  52:test_uart.c   **** 
  53:test_uart.c   **** /*************************************************************************
  54:test_uart.c   **** Function: UART Data Register Empty interrupt
  55:test_uart.c   **** Purpose:  called when the UART is ready to transmit the next byte
  56:test_uart.c   **** **************************************************************************/
  57:test_uart.c   **** 
  58:test_uart.c   **** SIGNAL(SIG_UART_DATA)
  59:test_uart.c   **** { 
 123               	.LM4:
 124               	/* prologue: frame size=0 */
 125 004a 1F92      		push __zero_reg__
 126 004c 0F92      		push __tmp_reg__
 127 004e 0FB6      		in __tmp_reg__,__SREG__
 128 0050 0F92      		push __tmp_reg__
 129 0052 1124      		clr __zero_reg__
 130 0054 2F93      		push r18
 131 0056 3F93      		push r19
 132 0058 4F93      		push r20
 133 005a 5F93      		push r21
 134 005c 6F93      		push r22
 135 005e 7F93      		push r23
 136 0060 8F93      		push r24
 137 0062 9F93      		push r25
 138 0064 AF93      		push r26
 139 0066 BF93      		push r27
 140 0068 EF93      		push r30
 141 006a FF93      		push r31
 142               	/* prologue end (size=17) */
  60:test_uart.c   ****     uint8_t  ch;
  61:test_uart.c   **** 	if ((ch = uart_get_TX()))
 144               	.LM5:
 145 006c 0E94 0000 		call uart_get_TX
 146 0070 8823      		tst r24
 147 0072 11F0      		breq .L3
  62:test_uart.c   **** 	{
  63:test_uart.c   ****  		UDR = ch;
 149               	.LM6:
 150 0074 8CB9      		out 44-0x20,r24
 151 0076 01C0      		rjmp .L2
 152               	.L3:
  64:test_uart.c   **** 	}	
  65:test_uart.c   **** 	else 
  66:test_uart.c   **** // No character disable  interrupt to avoid repetable call Enable again when
  67:test_uart.c   **** //	send character in putc procedure
  68:test_uart.c   **** 	{
  69:test_uart.c   **** 	    UCSRB &=  ~(1<<UDRIE);
 154               	.LM7:
 155 0078 5598      		cbi 42-0x20,5
 156               	.L2:
 157               	/* epilogue: frame size=0 */
 158 007a FF91      		pop r31
 159 007c EF91      		pop r30
 160 007e BF91      		pop r27
 161 0080 AF91      		pop r26
 162 0082 9F91      		pop r25
 163 0084 8F91      		pop r24
 164 0086 7F91      		pop r23
 165 0088 6F91      		pop r22
 166 008a 5F91      		pop r21
 167 008c 4F91      		pop r20
 168 008e 3F91      		pop r19
 169 0090 2F91      		pop r18
 170 0092 0F90      		pop __tmp_reg__
 171 0094 0FBE      		out __SREG__,__tmp_reg__
 172 0096 0F90      		pop __tmp_reg__
 173 0098 1F90      		pop __zero_reg__
 174 009a 1895      		reti
 175               	/* epilogue end (size=17) */
 176               	/* function __vector_14 size 41 (7) */
 181               	.Lscope1:
 182               		.data
 183               	.LC0:
 184 0000 5374 7269 		.string	"String stored in SRAM\n"
 184      6E67 2073 
 184      746F 7265 
 184      6420 696E 
 184      2053 5241 
 185               		.text
 187               	.global	main
 189               	main:
  70:test_uart.c   **** 	}
  71:test_uart.c   **** 	
  72:test_uart.c   **** }
  73:test_uart.c   **** 
  74:test_uart.c   **** 
  75:test_uart.c   **** int main(void)
  76:test_uart.c   **** {
 191               	.LM8:
 192               	/* prologue: frame size=7 */
 193 009c C0E0      		ldi r28,lo8(__stack - 7)
 194 009e D0E0      		ldi r29,hi8(__stack - 7)
 195 00a0 DEBF      		out __SP_H__,r29
 196 00a2 CDBF      		out __SP_L__,r28
 197               	/* prologue end (size=4) */
  77:test_uart.c   ****     uint8_t c;
  78:test_uart.c   ****     uint8_t buffer[7];
  79:test_uart.c   ****     uint8_t  num=134;
  80:test_uart.c   **** 
  81:test_uart.c   ****     
  82:test_uart.c   ****     /*
  83:test_uart.c   ****      *  Initialize UART library, pass baudrate and AVR cpu clock
  84:test_uart.c   ****      *  with the macro 
  85:test_uart.c   ****      *  UART_BAUD_SELECT() (normal speed mode )
  86:test_uart.c   ****      *  or 
  87:test_uart.c   ****      *  UART_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
  88:test_uart.c   ****      */
  89:test_uart.c   ****     uart_init(); 
 199               	.LM9:
 200 00a4 0E94 0000 		call uart_init
  90:test_uart.c   ****      
  91:test_uart.c   **** 
  92:test_uart.c   ****  
  93:test_uart.c   ****     /*
  94:test_uart.c   ****      * now enable interrupt, since UART library is interrupt controlled
  95:test_uart.c   ****      */
  96:test_uart.c   ****     sei();
 202               	.LM10:
 203               	/* #APP */
 204 00a8 7894      		sei
  97:test_uart.c   ****     
  98:test_uart.c   ****     /*
  99:test_uart.c   ****      *  Transmit string to UART
 100:test_uart.c   ****      *  The string is buffered by the uart library in a circular buffer
 101:test_uart.c   ****      *  and one character at a time is transmitted to the UART using interrupts.
 102:test_uart.c   ****      *  uart_puts() blocks if it can not write the whole string to the circular 
 103:test_uart.c   ****      *  buffer
 104:test_uart.c   ****      */
 105:test_uart.c   ****     uart_puts("String stored in SRAM\n");
 206               	.LM11:
 207               	/* #NOAPP */
 208 00aa 80E0      		ldi r24,lo8(.LC0)
 209 00ac 90E0      		ldi r25,hi8(.LC0)
 210 00ae 0E94 0000 		call uart_puts
 106:test_uart.c   ****     
 107:test_uart.c   ****     
 108:test_uart.c   ****         
 109:test_uart.c   ****     /* 
 110:test_uart.c   ****      * Use standard avr-libc functions to convert numbers into string
 111:test_uart.c   ****      * before transmitting via UART
 112:test_uart.c   ****      */     
 113:test_uart.c   ****     itoa( num, buffer, 10);   // convert interger into string (decimal format)         
 212               	.LM12:
 213 00b2 4AE0      		ldi r20,lo8(10)
 214 00b4 50E0      		ldi r21,hi8(10)
 215 00b6 BE01      		movw r22,r28
 216 00b8 6F5F      		subi r22,lo8(-(1))
 217 00ba 7F4F      		sbci r23,hi8(-(1))
 218 00bc 86E8      		ldi r24,lo8(134)
 219 00be 90E0      		ldi r25,hi8(134)
 220 00c0 0E94 0000 		call itoa
 114:test_uart.c   ****     uart_puts(buffer);        // and transmit string to UART
 222               	.LM13:
 223 00c4 CE01      		movw r24,r28
 224 00c6 0196      		adiw r24,1
 225 00c8 0E94 0000 		call uart_puts
 115:test_uart.c   ****     /*
 116:test_uart.c   ****      * Transmit single character to UART
 117:test_uart.c   ****      */
 118:test_uart.c   ****     uart_putc('\r');
 227               	.LM14:
 228 00cc 8DE0      		ldi r24,lo8(13)
 229               	.L8:
 231               	.LM15:
 232 00ce 0E94 0000 		call uart_putc
 119:test_uart.c   ****          
 120:test_uart.c   ****     for(;;)
 121:test_uart.c   ****     {
 122:test_uart.c   ****         c  = uart_getc();
 234               	.LM16:
 235 00d2 0E94 0000 		call uart_getc
 236 00d6 FBCF      		rjmp .L8
 237               	/* epilogue: frame size=7 */
 238               	/* epilogue: noreturn */
 239               	/* epilogue end (size=0) */
 240               	/* function main size 31 (27) */
 245               	.Lscope2:
 246               		.text
 248               	Letext:
 249               	/* File "test_uart.c": code  109 = 0x006d (  37), prologues  38, epilogues  34 */
DEFINED SYMBOLS
                            *ABS*:00000000 test_uart.c
                            *ABS*:0000003f __SREG__
                            *ABS*:0000003e __SP_H__
                            *ABS*:0000003d __SP_L__
                            *ABS*:00000000 __tmp_reg__
                            *ABS*:00000001 __zero_reg__
C:\DOCUME~1\tos\LOCALS~1\Temp/ccYRaaaa.s:65     .text:00000000 __vector_13
C:\DOCUME~1\tos\LOCALS~1\Temp/ccYRaaaa.s:121    .text:0000004a __vector_14
C:\DOCUME~1\tos\LOCALS~1\Temp/ccYRaaaa.s:189    .text:0000009c main
C:\DOCUME~1\tos\LOCALS~1\Temp/ccYRaaaa.s:248    .text:000000d8 Letext

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
uart_put_RX
uart_get_TX
__stack
uart_init
uart_puts
itoa
uart_putc
uart_getc
