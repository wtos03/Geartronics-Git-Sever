   1               		.file	"Eboot.c"
   2               		.arch atmega32
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  89               	.global	jump_to_app
  90               	.global	jump_to_app
  91               		.section .bss
  94               	jump_to_app:
  95 0000 0000      		.skip 2,0
  96               		.text
  98               	.global	get_hex_value
 100               	get_hex_value:
   1:Eboot.c       **** /******************************************************************************
   2:Eboot.c       ****  * Filename: EBoot.c
   3:Eboot.c       ****  *
   4:Eboot.c       ****  * Modified  from Boot.c
   5:Eboot.c       ****  * Author: Preston K. Manwaring
   6:Eboot.c       ****  *
   7:Eboot.c       ****  * Date: Monday, August 22, 2005 13:38:36 -0600
   8:Eboot.c       ****  *
   9:Eboot.c       ****  * License: Free to use. Please mention the contributing authors in the source
  10:Eboot.c       ****  * code.
  11:Eboot.c       ****  *
  12:Eboot.c       ****  * Description: This is a bootloader designed for the AVR processor family
  13:Eboot.c       ****  * which allows new firmware to be uploaded via the UART in Intel Hex format.
  14:Eboot.c       ****  * An interface for uploading such as Hyperterm is envisioned.
  15:Eboot.c       ****  * This code correctly parses the Intel Hex strings and upon reception of
  16:Eboot.c       ****  * a complete page (processor specific) of data, writes the data to flash.
  17:Eboot.c       ****  * Minimal error handling is implemented. Errors during program upload are
  18:Eboot.c       ****  *
  19:Eboot.c       ****  * ERR 1 - File upload synchronization is off (i.e. the ':' was not found)
  20:Eboot.c       ****  * ERR 2 - the checksum failed.
  21:Eboot.c       ****  *
  22:Eboot.c       ****  * Typical Intel hex format is supported in unix mode (LF not LF,CR). So
  23:Eboot.c       ****  * be sure to strip the extra CR from the hex file or have this program
  24:Eboot.c       ****  * strip the CR.
  25:Eboot.c       ****  *
  26:Eboot.c       ****  * The user menu is as follows:
  27:Eboot.c       ****  * U - upload the hex file. A 'READY' will return when the MCU is ready to
  28:Eboot.c       ****  *     receive the file. As the file uploads, a '*' prints for every page
  29:Eboot.c       ****  *     written to flash. When complete, 'OK' is transmitted. If an error
  30:Eboot.c       ****  *     occurs, 'ERR' followed by a number is printed.
  31:Eboot.c       ****  *
  32:Eboot.c       ****  * X - exit this program and start the user application.
  33:Eboot.c       ****  *
  34:Eboot.c       ****  * NOTE: This software is not optimized. It fits as it currently stands
  35:Eboot.c       ****  * in a BLS of 1024. Optimizations could be easily made, but the code is 
  36:Eboot.c       ****  * much easier to  understand with the way it currently stands. I spent
  37:Eboot.c       ****  * a lot of time reading manuals and looking at other's code to figure out
  38:Eboot.c       ****  * all I wanted to know. So I hope this is easily understood. Due to the 
  39:Eboot.c       ****  * lack of optimization, the most common error you will get using this
  40:Eboot.c       ****  * code will be ERR 1 as synchronization fails. This failure will occur
  41:Eboot.c       ****  * because your BAUD rate setting is too high and the program cannot
  42:Eboot.c       ****  * keep up the incoming data. Slowing down the data transfer rate should
  43:Eboot.c       ****  * fix this or you can optimize the code.
  44:Eboot.c       ****  *
  45:Eboot.c       ****  * A special thanks needs to go to Martin Thomas for writing some excelent code
  46:Eboot.c       ****  * which helped me get started. In fact, you will see some files and macros 
  47:Eboot.c       ****  * of his which I use including chipdef.h. His project can be found at
  48:Eboot.c       ****  * http://www.siwawi.arubi.uni-kl.de/avr_projects/
  49:Eboot.c       ****  *
  50:Eboot.c       ****  * If you have any questions or comments, feel free to write.
  51:Eboot.c       ****  * manjagu@byu.edu
  52:Eboot.c       ****  
  53:Eboot.c       ****  * Modified by Wichai Tossamartvorakul
  54:Eboot.c       ****  * Date 2 Aug 2007 
  55:Eboot.c       ****  * Test with ATMEGA32 at 16 Mhz
  56:Eboot.c       ****  *
  57:Eboot.c       ****  * To remove pin for select bootloader use keypress from terminal program
  58:Eboot.c       ****  * Improve Speed to 38400  with XON/XOFF protocal  use serial library from Eblock
  59:Eboot.c       ****  *
  60:Eboot.c       ****  * Enter boot mode condition
  61:Eboot.c       ****  *   	1.No program at 0x0000 ( Read 0xFF )
  62:Eboot.c       ****  * 		2.Press 2 buttons at E_IO while press reset key
  63:Eboot.c       ****  * Enter program mode condition
  64:Eboot.c       ****  * 	    1  There are program at 0x0000  (Checked when press Reset)
  65:Eboot.c       ****  *     	2  Press x  at bootmode  
  66:Eboot.c       ****  *  
  67:Eboot.c       ****  *
  68:Eboot.c       ****  ******************************************************************************/
  69:Eboot.c       **** 
  70:Eboot.c       **** /*--- INCLUDE FILES ----------------------------------------------------------*/
  71:Eboot.c       **** #include <inttypes.h>
  72:Eboot.c       **** //#include <avr/io.h>
  73:Eboot.c       **** #include <avr/interrupt.h>
  74:Eboot.c       **** #include <avr/wdt.h>
  75:Eboot.c       **** #include <avr/boot.h>
  76:Eboot.c       **** #include <avr/pgmspace.h>
  77:Eboot.c       **** #include "avr_serial.h"
  78:Eboot.c       **** 
  79:Eboot.c       **** 
  80:Eboot.c       **** 
  81:Eboot.c       **** /* Select Boot Size (select one, comment out the others) */
  82:Eboot.c       **** // MAYBE: #define _B512 
  83:Eboot.c       **** //#define _B1024 
  84:Eboot.c       **** #define _B2048
  85:Eboot.c       **** 
  86:Eboot.c       **** /* From Martin Thomas */
  87:Eboot.c       **** #include "chipdef.h"
  88:Eboot.c       **** 
  89:Eboot.c       ****  
  90:Eboot.c       **** #define VERSION  "Eboot V 0.8 \r\n"
  91:Eboot.c       ****  
  92:Eboot.c       **** 
  93:Eboot.c       **** // TRUE and FALSE
  94:Eboot.c       **** #define TRUE  1
  95:Eboot.c       **** #define FALSE 0
  96:Eboot.c       **** 
  97:Eboot.c       **** /*--- GLOBAL VARIABLES -------------------------------------------------------*/
  98:Eboot.c       **** unsigned char page_data[SPM_PAGESIZE]; // create temporary location for program 
  99:Eboot.c       **** 				       // data
 100:Eboot.c       **** unsigned long buf_address;
 101:Eboot.c       **** 
 102:Eboot.c       **** /*--- FUNCTION PROTOTYPES ----------------------------------------------------*/
 103:Eboot.c       **** uint8_t get_hex_value(void);
 104:Eboot.c       **** char ihex_load(void);
 105:Eboot.c       **** void (*jump_to_app)(void) = 0x0000;
 106:Eboot.c       **** 
 107:Eboot.c       ****   
 108:Eboot.c       **** 
 109:Eboot.c       **** /*--- MAIN -------------------------------------------------------------------*/
 110:Eboot.c       **** int main(void)
 111:Eboot.c       **** {
 112:Eboot.c       ****     uint8_t temp_char,tmp;
 113:Eboot.c       ****  	uint8_t bootFlag = TRUE;
 114:Eboot.c       ****     
 115:Eboot.c       ****     cli();
 116:Eboot.c       **** 	
 117:Eboot.c       ****     /* the following code moves the interrupt vector pointer to the bootloader
 118:Eboot.c       ****        section. The problem is the compiler doesn't understand where to put
 119:Eboot.c       ****        the IV table. */
 120:Eboot.c       ****     GICR = _BV(IVCE);       
 121:Eboot.c       ****     GICR = _BV(IVSEL); //move interruptvectors to the Boot sector  ** WRITE 0 TO IVCE use = not |
 122:Eboot.c       ****    
 123:Eboot.c       **** 
 124:Eboot.c       **** // Initial 7 Segments on E_io
 125:Eboot.c       **** // Set direction of two switch to Input	
 126:Eboot.c       ****     DDRB =  0xFF;   // Output	
 127:Eboot.c       ****     DDRC  = 0x18;  // P3, P4 for  Control 7 segments Digits 
 128:Eboot.c       **** 
 129:Eboot.c       **** // Enable pull up resistor 
 130:Eboot.c       ****  	PORTC |= 0x24;
 131:Eboot.c       **** 
 132:Eboot.c       **** 	
 133:Eboot.c       ****     /* The slow baud rate is required because of the intel hex parsing overhead.
 134:Eboot.c       ****        If I could figure out how to enable interrupts in the BLS (compiler issue)
 135:Eboot.c       ****        then a higher speed could be used by switching to an interrupt based
 136:Eboot.c       ****        UART ISR. The code could also be optimized. */
 137:Eboot.c       ****     
 138:Eboot.c       **** 	uart_init( UART_INTERRUPT,UART_8_N_1,UART_38400);   
 139:Eboot.c       ****  
 140:Eboot.c       **** // poll USART receive complete flag 64k times to catch the 'i' reliably
 141:Eboot.c       ****  
 142:Eboot.c       **** // test if flash is empty (i.e. flash content is 0xff)
 143:Eboot.c       **** 	if(pgm_read_byte_near(0x0000) != 0xFF) {
 144:Eboot.c       **** 		bootFlag = FALSE; 
 145:Eboot.c       **** 	}
 146:Eboot.c       **** 	
 147:Eboot.c       **** //  Enter boot mode by press b 	
 148:Eboot.c       **** //	while (!(tmp  = uart_read()));
 149:Eboot.c       **** //	if (tmp == 'b')
 150:Eboot.c       **** //	     bootFlag = TRUE;
 151:Eboot.c       **** 		 
 152:Eboot.c       **** // Check SW for enter boot mode either press both SW at the same time	
 153:Eboot.c       **** 	tmp = PINC & (0x24);   // PB0, PB3 port
 154:Eboot.c       ****     if (!tmp)    // Press SW tmp = 0
 155:Eboot.c       ****         bootFlag = TRUE;	 
 156:Eboot.c       **** 		 
 157:Eboot.c       **** 
 158:Eboot.c       **** 	uart_write_str (VERSION);
 159:Eboot.c       **** // Display b characters 
 160:Eboot.c       **** 	E_OUT_PORTA  =  0x7C;  // b
 161:Eboot.c       ****  	E_OUT_PB1(0);
 162:Eboot.c       ****  	E_OUT_PB2(1);
 163:Eboot.c       ****  
 164:Eboot.c       ****     
 165:Eboot.c       ****     /* this main loop is the user 'menu'. */
 166:Eboot.c       ****     while(bootFlag)                             
 167:Eboot.c       ****     {
 168:Eboot.c       **** 			   
 169:Eboot.c       **** 	if( (tmp = uart_read()) ) 
 170:Eboot.c       **** 	{
 171:Eboot.c       ****  	   switch(tmp)
 172:Eboot.c       **** 	   {
 173:Eboot.c       **** 		case 'u': // download new program
 174:Eboot.c       **** 		{
 175:Eboot.c       **** 		    /* erase the main flash excepting BLS */
 176:Eboot.c       **** 		    buf_address = 0; 
 177:Eboot.c       **** 		    while ( APP_END > buf_address )
 178:Eboot.c       **** 		    {
 179:Eboot.c       **** 			boot_page_erase(buf_address);	// Perform page erase
 180:Eboot.c       **** 			boot_spm_busy_wait();		// Wait until the memory is erased.
 181:Eboot.c       **** 			buf_address += SPM_PAGESIZE;
 182:Eboot.c       **** 		    }
 183:Eboot.c       **** 		    buf_address = 0;
 184:Eboot.c       **** 
 185:Eboot.c       **** 		    /* load new program */
 186:Eboot.c       **** 			uart_write_str("READY \n");
 187:Eboot.c       **** 		    if(( temp_char = ihex_load()))
 188:Eboot.c       **** 		    {
 189:Eboot.c       **** 				uart_write_str("ERR ");
 190:Eboot.c       **** 				uart_write_char(temp_char + '0' );
 191:Eboot.c       **** 				uart_write_char('\n');
 192:Eboot.c       **** 		    }
 193:Eboot.c       **** 		    else
 194:Eboot.c       **** 			{
 195:Eboot.c       **** 				bootFlag = FALSE ;  // Exit to run
 196:Eboot.c       **** 			}
 197:Eboot.c       **** 		}
 198:Eboot.c       **** 		break;
 199:Eboot.c       **** 		
 200:Eboot.c       **** 		case 'x':                   //Exit upgrade
 201:Eboot.c       **** 		{
 202:Eboot.c       **** 			GICR = _BV(IVCE); 
 203:Eboot.c       **** 			GICR &= ~(_BV(IVSEL) | _BV(IVCE)); //move interruptvectors to the Application sector  Write 0 to
 204:Eboot.c       **** 		    jump_to_app(); // Jump to application sector
 205:Eboot.c       **** //		    wdt_enable(WDTO_15MS); // Enable Watchdog Timer to give reset
 206:Eboot.c       **** 		}
 207:Eboot.c       **** 		break;    
 208:Eboot.c       **** 		default:
 209:Eboot.c       **** 		{
 210:Eboot.c       **** 		   uart_write_str(" u - Upload or x - Execute \n");
 211:Eboot.c       **** 		}
 212:Eboot.c       **** 	   } // end switch
 213:Eboot.c       **** 	}  
 214:Eboot.c       ****     }	// end while(1)
 215:Eboot.c       **** // Start to application
 216:Eboot.c       **** 
 217:Eboot.c       **** 	 GICR = _BV(IVCE); 
 218:Eboot.c       **** 	 GICR &= ~(_BV(IVSEL) | _BV(IVCE)); //move interruptvectors to the Application sector  Write 0 to 
 219:Eboot.c       **** 	 jump_to_app(); // Jump to application sector
 220:Eboot.c       **** 
 221:Eboot.c       ****     return 0;
 222:Eboot.c       **** }
 223:Eboot.c       **** 
 224:Eboot.c       **** /*--- char ihex_load( void ) -------------------------------------------------*/
 225:Eboot.c       **** /* This function pulls intel hex formatted code from the serial port and loads 
 226:Eboot.c       ****    it into a temporary location. Once a complete SPM page length is stored,
 227:Eboot.c       ****    it executes a flash memory write.
 228:Eboot.c       ****     Return Error
 229:Eboot.c       **** 	* ERR 1 - File upload synchronization is off (i.e. the ':' was not found)
 230:Eboot.c       **** 	* ERR 2 - the checksum failed.
 231:Eboot.c       **** 
 232:Eboot.c       ****  */
 233:Eboot.c       **** char ihex_load(void)
 234:Eboot.c       **** {
 235:Eboot.c       ****     uint8_t
 236:Eboot.c       **** 	i,temp_char,
 237:Eboot.c       **** 	byte_count = 0,
 238:Eboot.c       **** 	data_pairs,
 239:Eboot.c       **** 	data_type,
 240:Eboot.c       **** 	temp_byte,
 241:Eboot.c       **** 	temp_store,
 242:Eboot.c       **** 	address_lo,
 243:Eboot.c       **** 	address_hi;
 244:Eboot.c       **** 
 245:Eboot.c       ****     unsigned int data; // temporary location to store program words
 246:Eboot.c       ****     
 247:Eboot.c       ****     unsigned long temp_address = 0ul;   //Tmp page fill address ??
 248:Eboot.c       **** 	
 249:Eboot.c       **** 	
 250:Eboot.c       ****     do
 251:Eboot.c       ****     {
 252:Eboot.c       **** 	// Wait for characters 
 253:Eboot.c       **** 	    do
 254:Eboot.c       **** 		{
 255:Eboot.c       **** 			temp_char = uart_read();
 256:Eboot.c       **** 			if ( (temp_char == 13)  || (temp_char == 10))   // get and dispose of the CR or LF
 257:Eboot.c       **** 					temp_char = 0;                           // Wait for first character of line
 258:Eboot.c       **** 		} while (!temp_char);
 259:Eboot.c       **** 	   if(temp_char != ':') // check to make sure the first character is ':'
 260:Eboot.c       **** 	   {
 261:Eboot.c       **** 	    return(1);
 262:Eboot.c       **** 	   }
 263:Eboot.c       **** 
 264:Eboot.c       **** 	
 265:Eboot.c       **** 	/* get the count of data pairs */
 266:Eboot.c       ****  
 267:Eboot.c       **** 	data_pairs  = get_hex_value();
 268:Eboot.c       **** 	
 269:Eboot.c       **** 	/* get the address to put the data */
 270:Eboot.c       **** 	/* although we collect this data, we do not use it.  All data
 271:Eboot.c       **** 	   programmed through this bootloader starts at application program
 272:Eboot.c       **** 	   space location 0x0000. The collection is neccessary only for
 273:Eboot.c       **** 	   the checksum calculation. */
 274:Eboot.c       **** 	address_hi = get_hex_value();
 275:Eboot.c       **** 	address_lo = get_hex_value();
 276:Eboot.c       **** 	
 277:Eboot.c       **** 	/* get the data type */
 278:Eboot.c       **** 	data_type  = get_hex_value();
 279:Eboot.c       **** 	
 280:Eboot.c       **** 	temp_store = data_pairs + address_hi + address_lo + data_type;
 281:Eboot.c       **** 	
 282:Eboot.c       **** 	for( i = 0; i < data_pairs; i++ )
 283:Eboot.c       **** 	{
 284:Eboot.c       **** 
 285:Eboot.c       **** 		temp_byte = get_hex_value();		
 286:Eboot.c       **** 	    page_data[byte_count] = temp_byte;	
 287:Eboot.c       **** 		byte_count++;
 288:Eboot.c       **** 	    temp_store += temp_byte;
 289:Eboot.c       **** 	}
 290:Eboot.c       **** 	    
 291:Eboot.c       **** 	/* get the checksum */
 292:Eboot.c       ****     temp_byte = get_hex_value();
 293:Eboot.c       **** 	
 294:Eboot.c       **** 
 295:Eboot.c       **** 	
 296:Eboot.c       **** 
 297:Eboot.c       **** 	/* check the data and checksum */
 298:Eboot.c       **** 	if( (char)(temp_store + temp_byte) )
 299:Eboot.c       **** 	{
 300:Eboot.c       **** 	    return(2);
 301:Eboot.c       **** 	}
 302:Eboot.c       **** 
 303:Eboot.c       **** 
 304:Eboot.c       **** 	/* fill the rest of the page buffer with 0xFF if the last records are not 
 305:Eboot.c       **** 	   a full page in length */
 306:Eboot.c       **** 	if( data_type)   // End of File record 
 307:Eboot.c       **** 	{
 308:Eboot.c       **** 		
 309:Eboot.c       **** 		for(byte_count; byte_count < SPM_PAGESIZE; byte_count++ )
 310:Eboot.c       **** 	    {
 311:Eboot.c       **** 			page_data[byte_count] = 0xFF;
 312:Eboot.c       **** 	    }
 313:Eboot.c       **** 	}
 314:Eboot.c       **** 
 315:Eboot.c       **** 	/* if the page buffer is full, write the buffer to the temp flash buffer */
 316:Eboot.c       **** 	if( byte_count >= SPM_PAGESIZE )
 317:Eboot.c       **** 	{
 318:Eboot.c       **** 	    byte_count = 0;
 319:Eboot.c       **** 
 320:Eboot.c       **** 	    /* store data in temp buffer and write to flash */
 321:Eboot.c       **** 	    for( i = 0; i < SPM_PAGESIZE; i += 2 )
 322:Eboot.c       **** 	    {
 323:Eboot.c       **** 		/* swap the bytes for little endian format */
 324:Eboot.c       **** 		data = page_data[i];
 325:Eboot.c       **** 		data |= ( page_data[ i + 1 ] << 8 );
 326:Eboot.c       **** 		boot_page_fill( temp_address, data ); // call asm routine to load temporary flash buffer
 327:Eboot.c       **** 		temp_address += 2; // select next word in temporary buffer
 328:Eboot.c       **** 	    }
 329:Eboot.c       **** 
 330:Eboot.c       **** 	    /* write to the flash */
 331:Eboot.c       **** 	    boot_page_write( temp_address - SPM_PAGESIZE );
 332:Eboot.c       **** 	    boot_spm_busy_wait();	
 333:Eboot.c       **** 	    boot_rww_enable();				//Re-enable the RWW section
 334:Eboot.c       **** 	    uart_write_char('*');
 335:Eboot.c       **** 		// Display - characters 
 336:Eboot.c       **** 		E_OUT_PORTA  =  0x73;  // Show P while programming 
 337:Eboot.c       **** 		E_OUT_PB1(0);
 338:Eboot.c       **** 		E_OUT_PB2(1);
 339:Eboot.c       **** 	}
 340:Eboot.c       ****  
 341:Eboot.c       ****    } while( data_type != 1);            // Do while not end of File
 342:Eboot.c       **** 	
 343:Eboot.c       **** 	uart_write_char('E');                // End of file
 344:Eboot.c       ****     return(0);
 345:Eboot.c       **** }
 346:Eboot.c       **** 
 347:Eboot.c       **** 
 348:Eboot.c       **** /* This fuction returns the hex value of the  2 consequence received ascii characters (HEX) */
 349:Eboot.c       **** uint8_t get_hex_value()
 350:Eboot.c       **** {
 102               	.LM1:
 103               	/* prologue: frame size=0 */
 104 0000 CF93      		push r28
 105               	/* prologue end (size=1) */
 106               	.L2:
 351:Eboot.c       **** ) */
 352:Eboot.c       **** uint8_t get_hex_value()
 353:Eboot.c       **** {
 108               	.LM2:
 109 0002 0E94 0000 		call uart_read
 110 0006 8823      		tst r24
 111 0008 E1F3      		breq .L2
 354:Eboot.c       **** ) */
 355:Eboot.c       **** uint8_t get_hex_value()
 113               	.LM3:
 114 000a 8134      		cpi r24,lo8(65)
 115 000c 10F4      		brsh .L5
 356:Eboot.c       **** HEX) */
 357:Eboot.c       **** uint8_t get_hex_value()
 117               	.LM4:
 118 000e 8053      		subi r24,lo8(-(-48))
 119 0010 01C0      		rjmp .L6
 120               	.L5:
 358:Eboot.c       **** HEX) */
 359:Eboot.c       **** uint8_t get_hex_value()
 360:Eboot.c       **** {
 361:Eboot.c       ****      uint8_t data;
 362:Eboot.c       **** 	 uint8_t temp_byte;
 122               	.LM5:
 123 0012 8753      		subi r24,lo8(-(-55))
 124               	.L6:
 363:Eboot.c       **** t data;
 364:Eboot.c       **** 	 uint8_t temp_byte;
 126               	.LM6:
 127 0014 C82F      		mov r28,r24
 128 0016 C295      		swap r28
 129 0018 C07F      		andi r28,0xf0
 130               	.L7:
 365:Eboot.c       **** t data;
 132               	.LM7:
 133 001a 0E94 0000 		call uart_read
 134 001e 8823      		tst r24
 135 0020 E1F3      		breq .L7
 366:Eboot.c       **** _value()
 367:Eboot.c       **** {
 137               	.LM8:
 138 0022 8134      		cpi r24,lo8(65)
 139 0024 10F4      		brsh .L10
 368:Eboot.c       **** ) */
 369:Eboot.c       **** uint8_t get_hex_value()
 141               	.LM9:
 142 0026 8053      		subi r24,lo8(-(-48))
 143 0028 01C0      		rjmp .L11
 144               	.L10:
 370:Eboot.c       **** HEX) */
 371:Eboot.c       **** uint8_t get_hex_value()
 372:Eboot.c       **** {
 373:Eboot.c       ****      uint8_t data;
 146               	.LM10:
 147 002a 8753      		subi r24,lo8(-(-55))
 148               	.L11:
 374:Eboot.c       **** _value()
 375:Eboot.c       **** {
 376:Eboot.c       ****      uint8_t data;
 150               	.LM11:
 151 002c C82B      		or r28,r24
 377:Eboot.c       **** _value()
 378:Eboot.c       **** {
 379:Eboot.c       ****      uint8_t data;
 153               	.LM12:
 154 002e 8C2F      		mov r24,r28
 155 0030 9927      		clr r25
 156               	/* epilogue: frame size=0 */
 157 0032 CF91      		pop r28
 158 0034 0895      		ret
 159               	/* epilogue end (size=2) */
 160               	/* function get_hex_value size 27 (24) */
 166               	.Lscope0:
 168               	.global	ihex_load
 170               	ihex_load:
 172               	.LM13:
 173               	/* prologue: frame size=0 */
 174 0036 AF92      		push r10
 175 0038 BF92      		push r11
 176 003a CF92      		push r12
 177 003c DF92      		push r13
 178 003e EF92      		push r14
 179 0040 FF92      		push r15
 180 0042 0F93      		push r16
 181 0044 1F93      		push r17
 182 0046 CF93      		push r28
 183               	/* prologue end (size=9) */
 185               	.LM14:
 186 0048 BB24      		clr r11
 188               	.LM15:
 189 004a CC24      		clr r12
 190 004c DD24      		clr r13
 191 004e 7601      		movw r14,r12
 192               	.L49:
 194               	.LM16:
 195 0050 0E94 0000 		call uart_read
 197               	.LM17:
 198 0054 8D30      		cpi r24,lo8(13)
 199 0056 E1F3      		breq .L49
 200 0058 8A30      		cpi r24,lo8(10)
 201 005a D1F3      		breq .L49
 203               	.LM18:
 204 005c 8823      		tst r24
 205 005e C1F3      		breq .L49
 207               	.LM19:
 208 0060 8A33      		cpi r24,lo8(58)
 209 0062 19F0      		breq .L21
 211               	.LM20:
 212 0064 81E0      		ldi r24,lo8(1)
 213 0066 90E0      		ldi r25,hi8(1)
 214 0068 72C0      		rjmp .L12
 215               	.L21:
 217               	.LM21:
 218 006a 0E94 0000 		call get_hex_value
 219 006e 082F      		mov r16,r24
 221               	.LM22:
 222 0070 0E94 0000 		call get_hex_value
 223 0074 C82F      		mov r28,r24
 225               	.LM23:
 226 0076 0E94 0000 		call get_hex_value
 227 007a 182F      		mov r17,r24
 229               	.LM24:
 230 007c 0E94 0000 		call get_hex_value
 231 0080 A82E      		mov r10,r24
 233               	.LM25:
 234 0082 C00F      		add r28,r16
 235 0084 C10F      		add r28,r17
 236 0086 C80F      		add r28,r24
 238               	.LM26:
 239 0088 10E0      		ldi r17,lo8(0)
 240               	.L48:
 241 008a 1017      		cp r17,r16
 242 008c 58F4      		brsh .L41
 244               	.LM27:
 245 008e 0E94 0000 		call get_hex_value
 247               	.LM28:
 248 0092 EB2D      		mov r30,r11
 249 0094 FF27      		clr r31
 250 0096 E050      		subi r30,lo8(-(page_data))
 251 0098 F040      		sbci r31,hi8(-(page_data))
 252 009a 8083      		st Z,r24
 254               	.LM29:
 255 009c B394      		inc r11
 257               	.LM30:
 258 009e C80F      		add r28,r24
 260               	.LM31:
 261 00a0 1F5F      		subi r17,lo8(-(1))
 262 00a2 F3CF      		rjmp .L48
 263               	.L41:
 265               	.LM32:
 266 00a4 0E94 0000 		call get_hex_value
 268               	.LM33:
 269 00a8 C80F      		add r28,r24
 270 00aa 19F0      		breq .L26
 272               	.LM34:
 273 00ac 82E0      		ldi r24,lo8(2)
 274 00ae 90E0      		ldi r25,hi8(2)
 275 00b0 4EC0      		rjmp .L12
 276               	.L26:
 278               	.LM35:
 279 00b2 AA20      		tst r10
 280 00b4 59F0      		breq .L27
 282               	.LM36:
 283 00b6 B7FC      		sbrc r11,7
 284 00b8 09C0      		rjmp .L27
 285 00ba 8FEF      		ldi r24,lo8(-1)
 286               	.L31:
 288               	.LM37:
 289 00bc EB2D      		mov r30,r11
 290 00be FF27      		clr r31
 291 00c0 E050      		subi r30,lo8(-(page_data))
 292 00c2 F040      		sbci r31,hi8(-(page_data))
 293 00c4 8083      		st Z,r24
 295               	.LM38:
 296 00c6 B394      		inc r11
 297 00c8 B7FE      		sbrs r11,7
 298 00ca F8CF      		rjmp .L31
 299               	.L27:
 301               	.LM39:
 302 00cc B7FE      		sbrs r11,7
 303 00ce 36C0      		rjmp .L15
 305               	.LM40:
 306 00d0 10E0      		ldi r17,lo8(0)
 308               	.LM41:
 309 00d2 B12E      		mov r11,r17
 310 00d4 41E0      		ldi r20,lo8(1)
 311               	.L36:
 313               	.LM42:
 314 00d6 E12F      		mov r30,r17
 315 00d8 FF27      		clr r31
 316 00da E050      		subi r30,lo8(-(page_data))
 317 00dc F040      		sbci r31,hi8(-(page_data))
 318 00de 8081      		ld r24,Z
 319 00e0 9927      		clr r25
 321               	.LM43:
 322 00e2 2181      		ldd r18,Z+1
 323 00e4 3327      		clr r19
 324 00e6 322F      		mov r19,r18
 325 00e8 2227      		clr r18
 326 00ea 822B      		or r24,r18
 327 00ec 932B      		or r25,r19
 328               	.LBB2:
 330               	.LM44:
 331               	/* #APP */
 332 00ee 0C01      		movw  r0, r24
 333 00f0 F601      		movw r30, r12
 334 00f2 4093 5700 		sts 87, r20
 335 00f6 E895      		spm
 336 00f8 1124      		clr  r1
 337               		
 338               	/* #NOAPP */
 339               	.LBE2:
 341               	.LM45:
 342 00fa 82E0      		ldi r24,lo8(2)
 343 00fc 90E0      		ldi r25,hi8(2)
 344 00fe A0E0      		ldi r26,hlo8(2)
 345 0100 B0E0      		ldi r27,hhi8(2)
 346 0102 C80E      		add r12,r24
 347 0104 D91E      		adc r13,r25
 348 0106 EA1E      		adc r14,r26
 349 0108 FB1E      		adc r15,r27
 351               	.LM46:
 352 010a 1E5F      		subi r17,lo8(-(2))
 353 010c 17FF      		sbrs r17,7
 354 010e E3CF      		rjmp .L36
 355               	.LBB3:
 357               	.LM47:
 358 0110 25E0      		ldi r18,lo8(5)
 359 0112 C601      		movw r24,r12
 360 0114 8058      		subi r24,lo8(-(-128))
 361 0116 9040      		sbci r25,hi8(-(-128))
 362               	/* #APP */
 363 0118 FC01      		movw r30, r24
 364 011a 2093 5700 		sts 87, r18
 365 011e E895      		spm
 366               		
 367               	/* #NOAPP */
 368               	.L37:
 369               	.LBE3:
 371               	.LM48:
 372 0120 07B6      		in __tmp_reg__,87-0x20
 373 0122 00FC      		sbrc __tmp_reg__,0
 374 0124 FDCF      		rjmp .L37
 375               	.LBB4:
 377               	.LM49:
 378 0126 81E1      		ldi r24,lo8(17)
 379               	/* #APP */
 380 0128 8093 5700 		sts 87, r24
 381 012c E895      		spm
 382               		
 383               	/* #NOAPP */
 384               	.LBE4:
 386               	.LM50:
 387 012e 8AE2      		ldi r24,lo8(42)
 388 0130 0E94 0000 		call uart_write_char
 390               	.LM51:
 391 0134 83E7      		ldi r24,lo8(115)
 392 0136 88BB      		out 56-0x20,r24
 394               	.LM52:
 395 0138 AB98      		cbi 53-0x20,3
 397               	.LM53:
 398 013a AC9A      		sbi 53-0x20,4
 399               	.L15:
 401               	.LM54:
 402 013c 91E0      		ldi r25,lo8(1)
 403 013e A916      		cp r10,r25
 404 0140 09F0      		breq .+2
 405 0142 86CF      		rjmp .L49
 407               	.LM55:
 408 0144 85E4      		ldi r24,lo8(69)
 409 0146 0E94 0000 		call uart_write_char
 411               	.LM56:
 412 014a 80E0      		ldi r24,lo8(0)
 413 014c 90E0      		ldi r25,hi8(0)
 414               	.L12:
 415               	/* epilogue: frame size=0 */
 416 014e CF91      		pop r28
 417 0150 1F91      		pop r17
 418 0152 0F91      		pop r16
 419 0154 FF90      		pop r15
 420 0156 EF90      		pop r14
 421 0158 DF90      		pop r13
 422 015a CF90      		pop r12
 423 015c BF90      		pop r11
 424 015e AF90      		pop r10
 425 0160 0895      		ret
 426               	/* epilogue end (size=10) */
 427               	/* function ihex_load size 164 (145) */
 441               	.Lscope1:
 442               		.data
 443               	.LC0:
 444 0000 4562 6F6F 		.string	"Eboot V 0.8 \r\n"
 444      7420 5620 
 444      302E 3820 
 444      0D0A 00
 445               	.LC1:
 446 000f 5245 4144 		.string	"READY \n"
 446      5920 0A00 
 447               	.LC2:
 448 0017 4552 5220 		.string	"ERR "
 448      00
 449               	.LC3:
 450 001c 2075 202D 		.string	" u - Upload or x - Execute \n"
 450      2055 706C 
 450      6F61 6420 
 450      6F72 2078 
 450      202D 2045 
 451               		.text
 453               	.global	main
 455               	main:
 457               	.LM57:
 458               	/* prologue: frame size=0 */
 459 0162 C0E0      		ldi r28,lo8(__stack - 0)
 460 0164 D0E0      		ldi r29,hi8(__stack - 0)
 461 0166 DEBF      		out __SP_H__,r29
 462 0168 CDBF      		out __SP_L__,r28
 463               	/* prologue end (size=4) */
 465               	.LM58:
 466 016a 11E0      		ldi r17,lo8(1)
 468               	.LM59:
 469               	/* #APP */
 470 016c F894      		cli
 472               	.LM60:
 473               	/* #NOAPP */
 474 016e C1E0      		ldi r28,lo8(1)
 475 0170 CBBF      		out 91-0x20,r28
 477               	.LM61:
 478 0172 82E0      		ldi r24,lo8(2)
 479 0174 8BBF      		out 91-0x20,r24
 481               	.LM62:
 482 0176 8FEF      		ldi r24,lo8(-1)
 483 0178 87BB      		out 55-0x20,r24
 485               	.LM63:
 486 017a 88E1      		ldi r24,lo8(24)
 487 017c 84BB      		out 52-0x20,r24
 489               	.LM64:
 490 017e 85B3      		in r24,53-0x20
 491 0180 8462      		ori r24,lo8(36)
 492 0182 85BB      		out 53-0x20,r24
 494               	.LM65:
 495 0184 49E1      		ldi r20,lo8(25)
 496 0186 50E0      		ldi r21,hi8(25)
 497 0188 66E8      		ldi r22,lo8(-122)
 498 018a 88E9      		ldi r24,lo8(-104)
 499 018c 0E94 0000 		call uart_init
 500               	.LBB5:
 502               	.LM66:
 503 0190 E0E0      		ldi r30,lo8(0)
 504 0192 F0E0      		ldi r31,hi8(0)
 505               	/* #APP */
 506 0194 8491      		lpm r24, Z
 507               		
 508               	/* #NOAPP */
 509               	.LBE5:
 510 0196 8F3F      		cpi r24,lo8(-1)
 511 0198 09F0      		breq .L51
 513               	.LM67:
 514 019a 10E0      		ldi r17,lo8(0)
 515               	.L51:
 517               	.LM68:
 518 019c 83B3      		in r24,51-0x20
 519 019e 8472      		andi r24,lo8(36)
 521               	.LM69:
 522 01a0 09F4      		brne .L52
 524               	.LM70:
 525 01a2 1C2F      		mov r17,r28
 526               	.L52:
 528               	.LM71:
 529 01a4 80E0      		ldi r24,lo8(.LC0)
 530 01a6 90E0      		ldi r25,hi8(.LC0)
 531 01a8 0E94 0000 		call uart_write_str
 533               	.LM72:
 534 01ac 8CE7      		ldi r24,lo8(124)
 535 01ae 88BB      		out 56-0x20,r24
 537               	.LM73:
 538 01b0 AB98      		cbi 53-0x20,3
 540               	.LM74:
 541 01b2 AC9A      		sbi 53-0x20,4
 542               	.L74:
 544               	.LM75:
 545 01b4 1123      		tst r17
 546 01b6 09F4      		brne .+2
 547 01b8 67C0      		rjmp .L70
 549               	.LM76:
 550 01ba 0E94 0000 		call uart_read
 551 01be 8823      		tst r24
 552 01c0 C9F3      		breq .L74
 554               	.LM77:
 555 01c2 9927      		clr r25
 556 01c4 8537      		cpi r24,117
 557 01c6 9105      		cpc r25,__zero_reg__
 558 01c8 29F0      		breq .L57
 559 01ca 8837      		cpi r24,120
 560 01cc 9105      		cpc r25,__zero_reg__
 561 01ce 09F4      		brne .+2
 562 01d0 4BC0      		rjmp .L66
 563 01d2 55C0      		rjmp .L67
 564               	.L57:
 566               	.LM78:
 567 01d4 1092 0000 		sts buf_address,__zero_reg__
 568 01d8 1092 0000 		sts (buf_address)+1,__zero_reg__
 569 01dc 1092 0000 		sts (buf_address)+2,__zero_reg__
 570 01e0 1092 0000 		sts (buf_address)+3,__zero_reg__
 571 01e4 23E0      		ldi r18,lo8(3)
 572               	.L63:
 573               	.LBB6:
 575               	.LM79:
 576 01e6 8091 0000 		lds r24,buf_address
 577 01ea 9091 0000 		lds r25,(buf_address)+1
 578               	/* #APP */
 579 01ee FC01      		movw r30, r24
 580 01f0 2093 5700 		sts 87, r18
 581 01f4 E895      		spm
 582               		
 583               	/* #NOAPP */
 584               	.L60:
 585               	.LBE6:
 587               	.LM80:
 588 01f6 07B6      		in __tmp_reg__,87-0x20
 589 01f8 00FC      		sbrc __tmp_reg__,0
 590 01fa FDCF      		rjmp .L60
 592               	.LM81:
 593 01fc 8091 0000 		lds r24,buf_address
 594 0200 9091 0000 		lds r25,(buf_address)+1
 595 0204 A091 0000 		lds r26,(buf_address)+2
 596 0208 B091 0000 		lds r27,(buf_address)+3
 597 020c 8058      		subi r24,lo8(-(128))
 598 020e 9F4F      		sbci r25,hi8(-(128))
 599 0210 AF4F      		sbci r26,hlo8(-(128))
 600 0212 BF4F      		sbci r27,hhi8(-(128))
 601 0214 8093 0000 		sts buf_address,r24
 602 0218 9093 0000 		sts (buf_address)+1,r25
 603 021c A093 0000 		sts (buf_address)+2,r26
 604 0220 B093 0000 		sts (buf_address)+3,r27
 605 0224 8050      		subi r24,lo8(28672)
 606 0226 9047      		sbci r25,hi8(28672)
 607 0228 A040      		sbci r26,hlo8(28672)
 608 022a B040      		sbci r27,hhi8(28672)
 609 022c E0F2      		brlo .L63
 611               	.LM82:
 612 022e 1092 0000 		sts buf_address,__zero_reg__
 613 0232 1092 0000 		sts (buf_address)+1,__zero_reg__
 614 0236 1092 0000 		sts (buf_address)+2,__zero_reg__
 615 023a 1092 0000 		sts (buf_address)+3,__zero_reg__
 617               	.LM83:
 618 023e 80E0      		ldi r24,lo8(.LC1)
 619 0240 90E0      		ldi r25,hi8(.LC1)
 620 0242 0E94 0000 		call uart_write_str
 622               	.LM84:
 623 0246 0E94 0000 		call ihex_load
 624 024a C82F      		mov r28,r24
 625 024c 8823      		tst r24
 626 024e E1F0      		breq .L70
 628               	.LM85:
 629 0250 80E0      		ldi r24,lo8(.LC2)
 630 0252 90E0      		ldi r25,hi8(.LC2)
 631 0254 0E94 0000 		call uart_write_str
 633               	.LM86:
 634 0258 8C2F      		mov r24,r28
 635 025a 805D      		subi r24,lo8(-(48))
 636 025c 0E94 0000 		call uart_write_char
 638               	.LM87:
 639 0260 8AE0      		ldi r24,lo8(10)
 640 0262 0E94 0000 		call uart_write_char
 641 0266 A6CF      		rjmp .L74
 642               	.L66:
 644               	.LM88:
 645 0268 81E0      		ldi r24,lo8(1)
 646 026a 8BBF      		out 91-0x20,r24
 648               	.LM89:
 649 026c 8BB7      		in r24,91-0x20
 650 026e 8C7F      		andi r24,lo8(-4)
 651 0270 8BBF      		out 91-0x20,r24
 653               	.LM90:
 654 0272 E091 0000 		lds r30,jump_to_app
 655 0276 F091 0000 		lds r31,(jump_to_app)+1
 656 027a 0995      		icall
 658               	.LM91:
 659 027c 9BCF      		rjmp .L74
 660               	.L67:
 662               	.LM92:
 663 027e 80E0      		ldi r24,lo8(.LC3)
 664 0280 90E0      		ldi r25,hi8(.LC3)
 665 0282 0E94 0000 		call uart_write_str
 666 0286 96CF      		rjmp .L74
 667               	.L70:
 669               	.LM93:
 670 0288 81E0      		ldi r24,lo8(1)
 671 028a 8BBF      		out 91-0x20,r24
 673               	.LM94:
 674 028c 8BB7      		in r24,91-0x20
 675 028e 8C7F      		andi r24,lo8(-4)
 676 0290 8BBF      		out 91-0x20,r24
 678               	.LM95:
 679 0292 E091 0000 		lds r30,jump_to_app
 680 0296 F091 0000 		lds r31,(jump_to_app)+1
 681 029a 0995      		icall
 683               	.LM96:
 684 029c 80E0      		ldi r24,lo8(0)
 685 029e 90E0      		ldi r25,hi8(0)
 686               	/* epilogue: frame size=0 */
 687 02a0 0C94 0000 		jmp exit
 688               	/* epilogue end (size=2) */
 689               	/* function main size 173 (167) */
 700               	.Lscope2:
 701               		.comm page_data,128,1
 702               		.comm buf_address,4,1
 706               		.text
 708               	Letext:
 709               	/* File "Eboot.c": code  364 = 0x016c ( 336), prologues  14, epilogues  14 */
DEFINED SYMBOLS
                            *ABS*:00000000 Eboot.c
C:\DOCUME~1\tos\LOCALS~1\Temp/ccqeaaaa.s:3      *ABS*:0000003f __SREG__
C:\DOCUME~1\tos\LOCALS~1\Temp/ccqeaaaa.s:4      *ABS*:0000003e __SP_H__
C:\DOCUME~1\tos\LOCALS~1\Temp/ccqeaaaa.s:5      *ABS*:0000003d __SP_L__
C:\DOCUME~1\tos\LOCALS~1\Temp/ccqeaaaa.s:6      *ABS*:00000000 __tmp_reg__
C:\DOCUME~1\tos\LOCALS~1\Temp/ccqeaaaa.s:7      *ABS*:00000001 __zero_reg__
C:\DOCUME~1\tos\LOCALS~1\Temp/ccqeaaaa.s:94     .bss:00000000 jump_to_app
C:\DOCUME~1\tos\LOCALS~1\Temp/ccqeaaaa.s:100    .text:00000000 get_hex_value
C:\DOCUME~1\tos\LOCALS~1\Temp/ccqeaaaa.s:170    .text:00000036 ihex_load
                            *COM*:00000080 page_data
C:\DOCUME~1\tos\LOCALS~1\Temp/ccqeaaaa.s:455    .text:00000162 main
                            *COM*:00000004 buf_address
C:\DOCUME~1\tos\LOCALS~1\Temp/ccqeaaaa.s:708    .text:000002a4 Letext

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
uart_read
uart_write_char
__stack
uart_init
uart_write_str
exit
