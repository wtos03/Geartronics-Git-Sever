
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000059a  00007000  00007000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000759a  0000062e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000087  00800060  00800060  0000062e  2**0
                  ALLOC
  3 .noinit       00000000  008000e7  008000e7  0000062e  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  0000062e  2**0
                  CONTENTS
  5 .stab         00000f60  00000000  00000000  00000630  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000949  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00007000 <__vectors>:
    7000:	0c 94 2a 38 	jmp	0x7054
    7004:	0c 94 45 38 	jmp	0x708a
    7008:	0c 94 45 38 	jmp	0x708a
    700c:	0c 94 45 38 	jmp	0x708a
    7010:	0c 94 45 38 	jmp	0x708a
    7014:	0c 94 45 38 	jmp	0x708a
    7018:	0c 94 45 38 	jmp	0x708a
    701c:	0c 94 45 38 	jmp	0x708a
    7020:	0c 94 45 38 	jmp	0x708a
    7024:	0c 94 45 38 	jmp	0x708a
    7028:	0c 94 45 38 	jmp	0x708a
    702c:	0c 94 45 38 	jmp	0x708a
    7030:	0c 94 45 38 	jmp	0x708a
    7034:	0c 94 45 38 	jmp	0x708a
    7038:	0c 94 45 38 	jmp	0x708a
    703c:	0c 94 45 38 	jmp	0x708a
    7040:	0c 94 45 38 	jmp	0x708a
    7044:	0c 94 45 38 	jmp	0x708a
    7048:	0c 94 45 38 	jmp	0x708a
    704c:	0c 94 45 38 	jmp	0x708a
    7050:	0c 94 45 38 	jmp	0x708a

00007054 <__ctors_end>:
    7054:	11 24       	eor	r1, r1
    7056:	1f be       	out	0x3f, r1	; 63
    7058:	cf e5       	ldi	r28, 0x5F	; 95
    705a:	d8 e0       	ldi	r29, 0x08	; 8
    705c:	de bf       	out	0x3e, r29	; 62
    705e:	cd bf       	out	0x3d, r28	; 61

00007060 <__do_copy_data>:
    7060:	10 e0       	ldi	r17, 0x00	; 0
    7062:	a0 e6       	ldi	r26, 0x60	; 96
    7064:	b0 e0       	ldi	r27, 0x00	; 0
    7066:	ea e9       	ldi	r30, 0x9A	; 154
    7068:	f5 e7       	ldi	r31, 0x75	; 117
    706a:	02 c0       	rjmp	.+4      	; 0x7070

0000706c <.do_copy_data_loop>:
    706c:	05 90       	lpm	r0, Z+
    706e:	0d 92       	st	X+, r0

00007070 <.do_copy_data_start>:
    7070:	a0 36       	cpi	r26, 0x60	; 96
    7072:	b1 07       	cpc	r27, r17
    7074:	d9 f7       	brne	.-10     	; 0x706c

00007076 <__do_clear_bss>:
    7076:	10 e0       	ldi	r17, 0x00	; 0
    7078:	a0 e6       	ldi	r26, 0x60	; 96
    707a:	b0 e0       	ldi	r27, 0x00	; 0
    707c:	01 c0       	rjmp	.+2      	; 0x7080

0000707e <.do_clear_bss_loop>:
    707e:	1d 92       	st	X+, r1

00007080 <.do_clear_bss_start>:
    7080:	a7 3e       	cpi	r26, 0xE7	; 231
    7082:	b1 07       	cpc	r27, r17
    7084:	e1 f7       	brne	.-8      	; 0x707e
    7086:	0c 94 75 39 	jmp	0x72ea

0000708a <__bad_interrupt>:
    708a:	0c 94 00 38 	jmp	0x7000

0000708e <send_boot>:
unsigned char device;

void send_boot(void)
{
	sendchar('A');
    708e:	81 e4       	ldi	r24, 0x41	; 65
    7090:	0e 94 9d 3a 	call	0x753a
	sendchar('V');
    7094:	86 e5       	ldi	r24, 0x56	; 86
    7096:	0e 94 9d 3a 	call	0x753a
	sendchar('R');
    709a:	82 e5       	ldi	r24, 0x52	; 82
    709c:	0e 94 9d 3a 	call	0x753a
	sendchar('B');
    70a0:	82 e4       	ldi	r24, 0x42	; 66
    70a2:	0e 94 9d 3a 	call	0x753a
	sendchar('O');
    70a6:	8f e4       	ldi	r24, 0x4F	; 79
    70a8:	0e 94 9d 3a 	call	0x753a
	sendchar('O');
    70ac:	8f e4       	ldi	r24, 0x4F	; 79
    70ae:	0e 94 9d 3a 	call	0x753a
	sendchar('T');
    70b2:	84 e5       	ldi	r24, 0x54	; 84
    70b4:	0e 94 9d 3a 	call	0x753a
    70b8:	08 95       	ret

000070ba <d7segment_display>:
}

void (*jump_to_app)(void) = 0x0000;

// Show output to 7 Segments

/*
void d7segment_init (void)
{
// Set direction for output for 7 Segment
	_7SEGMENT_DIGIT_DIR   = 0xFF;
	_7SEGMENT_PORT_DIR	  |= _7SEGMENT_DIGIT1 | _7SEGMENT_DIGIT2;
 
// Set direction for input for SW 
	_7SEGMENT_SW1_DIR	&=  ~(_7SEGMENT_SW1);
	_7SEGMENT_SW2_DIR	&=  ~(_7SEGMENT_SW2);

// Enable pull up
    _7SEGMENT_SW1_PORT   |= _7SEGMENT_SW1;
    _7SEGMENT_SW2_PORT   |= _7SEGMENT_SW2;
	
}

*/

 /* Display numeric 0-9  on  digit 0 or 1 
  
	INPUT
	num		:	number to show
	digit 	: 	Digit  to show
	
	OUTPUT	:	null
	
*/  

#include "Dual_7Segment.h"

void d7segment_display( uint8_t num)
{
 
   _7SEGMENT_PORT = num;
    70ba:	88 bb       	out	0x18, r24	; 24
// Out digit
	 
// ON Digit 1 OFF  ( 1 Off  0 On)
		_7SEGMENT_DIGIT_PORT &= ~(_7SEGMENT_DIGIT1);
    70bc:	ab 98       	cbi	0x15, 3	; 21
	   // OFF Digit 2 
	   _7SEGMENT_DIGIT_PORT |= _7SEGMENT_DIGIT2;
    70be:	ac 9a       	sbi	0x15, 4	; 21
    70c0:	08 95       	ret

000070c2 <BufferLoad>:
 
}	


int main(void)
{
 
	unsigned  tempi;
	char val;
    uint8_t sw1,sw2;
	
	#ifdef START_POWERSAVE
	char OK = 1;    
	#endif
    
	cli();
	
	MCUCR = (1<<IVCE);       
	MCUCR = (1<<IVSEL);             //move interruptvectors to the Boot sector    
 
	USART_Init(UART_BAUD_SELECT(BAUDRATE,XTAL),UARTSINGLE); 	// single speed
	// USART_Init(UART_BAUD_SELECT(BAUDRATE/2,XTAL),UARTDOUBLE);  // double speed
//	d7segment_init();
	
    // Set direction for output for 7 Segment
	_7SEGMENT_DIGIT_DIR   = 0xFF;
	_7SEGMENT_PORT_DIR	  |= _7SEGMENT_DIGIT1 | _7SEGMENT_DIGIT2;
 
// Set direction for input for SW 
	_7SEGMENT_SW1_DIR	&=  ~(_7SEGMENT_SW1);
	_7SEGMENT_SW2_DIR	&=  ~(_7SEGMENT_SW2);

// Enable pull up
    _7SEGMENT_SW1_PORT   |= _7SEGMENT_SW1;
    _7SEGMENT_SW2_PORT   |= _7SEGMENT_SW2;


	

#if defined(START_POWERSAVE)
	/* 
		This is an adoption of the Butterfly Bootloader startup-sequence.
		It may look a little strange but separating the login-loop from
		the main parser-loop gives a lot a possibilities (timeout, sleep-modes
	    etc.).
	*/		
 
	
	for(;OK;)
	{
		if((BLPIN1 & (1<<BLPNUM1)) || (BLPIN2 & (1<<BLPNUM2)))	 // Either one of two switch press still go app mode 
		{  
			// jump to main app if pin is not grounded
			BLPORT1 &= ~(1<<BLPNUM1);  // set to default
			MCUCR = (1<<IVCE); 
			MCUCR = (0<<IVSEL);      // move interruptvectors to the Application sector
			jump_to_app();			 // Jump to application sector
		}
		else
		{	
			val = recchar();
		
			if( val == 0x1B ) /* ESC */
	        {				// AVRPROG connection
				while (val != 'S')	// Wait for signon 
				{
					val = recchar();
				}
				send_boot();					// Report signon
				OK = 0;
			}
			else
				sendchar('?');
	        }
		// Power-Save code here
	}
	
#elif defined(START_SIMPLE)
 

   sw1 = _7SEGMENT_SW1_IN_PORT & _7SEGMENT_SW1; 
   sw2 = _7SEGMENT_SW2_IN_PORT & _7SEGMENT_SW2; 
   
    if ((sw1) ) //&&  (!sw2)) // SW1, SW2 Press
//	if((BLPIN1 & (1<<BLPNUM1)) || (BLPIN2 & (1<<BLPNUM2))) 
	{  
// jump to main app if pin is  grounded
//		BLPORT1 &= ~(1<<BLPNUM1);  		// set to default  ??
//		BLPORT2 &= ~(1<<BLPNUM2);  		// set to default  ??
		MCUCR = (1<<IVCE); 
		MCUCR = (0<<IVSEL);             //move interruptvectors to the Application sector

		d7segment_display(_7SEGMENT_C_P);
		jump_to_app();					// Jump to application sector
	}
	
	#elif defined(START_BOOTICE)
	#warning "BOOTICE mode - no startup-condition"

	#else
	#error "Select START_ condition for bootloader in main.c"
	#endif

  
	
    for(;;)                             
    {   
	    d7segment_display(_7SEGMENT_C_B);
		val=recchar();
         
        if(val=='a')                         //Autoincrement?
        {
          sendchar('Y');					  //Autoincrement is quicker
        }
 
        else if(val=='A')                    //write address 
        {
			address=recchar();                //read address 8 MSB
			address=(address<<8)|recchar();
			
			address=address<<1;               // !! convert from word address to byte address
			sendchar('\r');
        }
        
        else if(val=='b')
		{									// Buffer load support
			sendchar('Y');					// Report buffer load supported
			sendchar((UART_RX_BUFFER_SIZE >> 8) & 0xFF);
											// Report buffer size in bytes
			sendchar(UART_RX_BUFFER_SIZE & 0xFF);
		}

		else if(val=='B')					// Start buffer load
		{
			tempi = recchar() << 8;			// Load high byte of buffersize
			tempi |= recchar();				// Load low byte of buffersize
			val = recchar();				// Load memory type ('E' or 'F')
			sendchar (BufferLoad(tempi,val));
											// Start downloading of buffer
		}
		
		else if(val == 'g')					// Block read
		{
			tempi = (recchar() << 8) | recchar();

			val = recchar();				// Get memtype
			BlockRead(tempi,val);			// Perform the block read
		}		

        else if(val=='e')                   //Chip erase 
        {
			if (device == devtype)
			{
				// erase only main section (bootloader protection)
				address = 0; 
				while ( APP_END > address )
				{
					boot_page_erase(address);	// Perform page erase
					boot_spm_busy_wait();		// Wait until the memory is erased.
					address += SPM_PAGESIZE;
				}
			}
			boot_rww_enable();
			sendchar('\r');  

        }

        else if(val=='E')                   //Exit upgrade
        {
//			wdt_enable(WDTO_15MS); // Enable Watchdog Timer to give reset
			sendchar('\r');
			MCUCR = (1<<IVCE); 
			MCUCR = (0<<IVSEL);             //move interruptvectors to the Application sector
			jump_to_app();					// Jump to application sector
        }
       
	   #ifdef WRITELOCKBITS
	   #warning "Extension 'WriteLockBits' enabled"
	   // TODO: does not work reliably
        else if(val=='l')                   // write lockbits 
        {
			if (device == devtype)
			{
				// write_lock_bits(recchar());
				boot_lock_bits_set(recchar());	// boot.h takes care of mask
				boot_spm_busy_wait();
			}
			sendchar('\r');
		}
		#endif
        
        else if(val=='P')     // Enter programming mode 
        {
			sendchar('\r');
        }
        
        else if(val=='L')   // Leave programming mode
        { 
			sendchar('\r');
        }
        
        else if (val=='p')		// return programmer type
        {
          sendchar('S');		// always serial programmer
        } 
		
#ifdef ENABLEREADFUSELOCK
#warning "Extension 'ReadFuseLock' enabled"
        else if(val=='F')                   // read "low" fuse bits
        {
			sendchar( read_fuse_lock(0x0000, _BV(BLBSET)|_BV(SPMEN)) );
        }

        else if(val=='r')                   // read lock bits
        { 
			sendchar( read_fuse_lock(0x0001, _BV(BLBSET)|_BV(SPMEN)) );
        }        

        else if(val=='N')                   // read high fuse bits
        {
			sendchar( read_fuse_lock(0x0003,_BV(BLBSET)|_BV(SPMEN)) );
        }        

        else if(val=='Q')                   // read extended fuse bits
        {
			sendchar( read_fuse_lock(0x0002,_BV(BLBSET)|_BV(SPMEN)) );
        }
#endif	
// end of ENABLEREADFUSELOCK section

        else if(val=='t')                   // Return device type 
        {
			sendchar(devtype);
			sendchar(0);
        }

        else if ((val=='x')||(val=='y'))	// clear and set LED ignored
        {
			recchar();
			sendchar('\r');
        }
  
		else if (val=='T')					// set device
		{
			device = recchar();
			sendchar('\r');
		}
		
        else if (val=='S')                  // Return software identifier 
        {
			send_boot();
        }                
        
        else if (val=='V')                  // Return Software Version
        {
			sendchar(VERSION_HIGH);
			sendchar(VERSION_LOW);
        }        

        else if (val=='s')                  // Return Signature Byte
        {
			sendchar(sig_byte1);
			sendchar(sig_byte2);
			sendchar(sig_byte3);
        }       

        else if(val != 0x1b) /* ESC */
        {
			sendchar('?');
        }

	}	// end of "parser" for-loop

	return 0;
}


unsigned char BufferLoad(unsigned int size, unsigned char mem)
{
    70c2:	bf 92       	push	r11
    70c4:	cf 92       	push	r12
    70c6:	df 92       	push	r13
    70c8:	ef 92       	push	r14
    70ca:	ff 92       	push	r15
    70cc:	0f 93       	push	r16
    70ce:	1f 93       	push	r17
    70d0:	cf 93       	push	r28
    70d2:	df 93       	push	r29
    70d4:	8c 01       	movw	r16, r24
    70d6:	b6 2e       	mov	r11, r22
	unsigned int data, cnt;
	uint32_t tempaddress;
		
	for (cnt=0; cnt<UART_RX_BUFFER_SIZE; cnt++)
    70d8:	20 e0       	ldi	r18, 0x00	; 0
    70da:	30 e0       	ldi	r19, 0x00	; 0
    70dc:	e9 01       	movw	r28, r18
    70de:	ce 59       	subi	r28, 0x9E	; 158
    70e0:	df 4f       	sbci	r29, 0xFF	; 255
    70e2:	79 01       	movw	r14, r18
    70e4:	08 94       	sec
    70e6:	e1 1c       	adc	r14, r1
    70e8:	f1 1c       	adc	r15, r1
	{
		if (cnt<size) gBuffer[cnt]=recchar();
    70ea:	20 17       	cp	r18, r16
    70ec:	31 07       	cpc	r19, r17
    70ee:	18 f4       	brcc	.+6      	; 0x70f6
    70f0:	0e 94 b2 3a 	call	0x7564
    70f4:	01 c0       	rjmp	.+2      	; 0x70f8
		else gBuffer[cnt]=0xFF;
    70f6:	8f ef       	ldi	r24, 0xFF	; 255
    70f8:	88 83       	st	Y, r24
    70fa:	97 01       	movw	r18, r14
    70fc:	20 38       	cpi	r18, 0x80	; 128
    70fe:	31 05       	cpc	r19, r1
    7100:	68 f3       	brcs	.-38     	; 0x70dc
	}
	cnt=0;
    7102:	20 e0       	ldi	r18, 0x00	; 0
    7104:	30 e0       	ldi	r19, 0x00	; 0

	tempaddress = address;					// Store address in page
    7106:	c0 90 e2 00 	lds	r12, 0x00E2
    710a:	d0 90 e3 00 	lds	r13, 0x00E3
    710e:	e0 90 e4 00 	lds	r14, 0x00E4
    7112:	f0 90 e5 00 	lds	r15, 0x00E5
	
	my_eeprom_busy_wait();
    7116:	8c b3       	in	r24, 0x1c	; 28
    7118:	99 27       	eor	r25, r25
    711a:	96 95       	lsr	r25
    711c:	87 95       	ror	r24
    711e:	ac 01       	movw	r20, r24
    7120:	41 70       	andi	r20, 0x01	; 1
    7122:	50 70       	andi	r21, 0x00	; 0
    7124:	80 fd       	sbrc	r24, 0
    7126:	f7 cf       	rjmp	.-18     	; 0x7116
	
	if (device == devtype)
    7128:	80 91 e6 00 	lds	r24, 0x00E6
    712c:	83 37       	cpi	r24, 0x73	; 115
    712e:	09 f0       	breq	.+2      	; 0x7132
    7130:	7f c0       	rjmp	.+254    	; 0x7230
	{
		if (mem == 'F')		// Flash
    7132:	86 e4       	ldi	r24, 0x46	; 70
    7134:	b8 16       	cp	r11, r24
    7136:	09 f0       	breq	.+2      	; 0x713a
    7138:	39 c0       	rjmp	.+114    	; 0x71ac
    713a:	41 e0       	ldi	r20, 0x01	; 1
    713c:	c2 e6       	ldi	r28, 0x62	; 98
    713e:	d0 e0       	ldi	r29, 0x00	; 0
		{
			do {
				data=gBuffer[cnt++];
    7140:	89 91       	ld	r24, Y+
    7142:	28 2f       	mov	r18, r24
    7144:	33 27       	eor	r19, r19
				data|=(gBuffer[cnt++]<<8);
    7146:	89 91       	ld	r24, Y+
    7148:	99 27       	eor	r25, r25
    714a:	98 2f       	mov	r25, r24
    714c:	88 27       	eor	r24, r24
    714e:	28 2b       	or	r18, r24
    7150:	39 2b       	or	r19, r25
				boot_page_fill(address,data);
    7152:	80 91 e2 00 	lds	r24, 0x00E2
    7156:	90 91 e3 00 	lds	r25, 0x00E3
    715a:	09 01       	movw	r0, r18
    715c:	fc 01       	movw	r30, r24
    715e:	40 93 57 00 	sts	0x0057, r20
    7162:	e8 95       	spm
    7164:	11 24       	eor	r1, r1
											//call asm routine. 
				address=address+2;  		// Select next word in memory
    7166:	80 91 e2 00 	lds	r24, 0x00E2
    716a:	90 91 e3 00 	lds	r25, 0x00E3
    716e:	a0 91 e4 00 	lds	r26, 0x00E4
    7172:	b0 91 e5 00 	lds	r27, 0x00E5
    7176:	02 96       	adiw	r24, 0x02	; 2
    7178:	a1 1d       	adc	r26, r1
    717a:	b1 1d       	adc	r27, r1
    717c:	80 93 e2 00 	sts	0x00E2, r24
    7180:	90 93 e3 00 	sts	0x00E3, r25
    7184:	a0 93 e4 00 	sts	0x00E4, r26
    7188:	b0 93 e5 00 	sts	0x00E5, r27
				size -= 2;					// Reduce number of bytes to write by two    
    718c:	02 50       	subi	r16, 0x02	; 2
    718e:	10 40       	sbci	r17, 0x00	; 0
			} while(size);					// Loop until all bytes written
    7190:	b9 f6       	brne	.-82     	; 0x7140

			/* commented out since not compatible with mega8 - 
			   secondary benefit: saves memory 
			tempaddress &= 0xFF80;			// Ensure the address points to the first byte in the page
			*/

			boot_page_write(tempaddress);
    7192:	85 e0       	ldi	r24, 0x05	; 5
    7194:	f6 01       	movw	r30, r12
    7196:	80 93 57 00 	sts	0x0057, r24
    719a:	e8 95       	spm
			boot_spm_busy_wait();	
    719c:	07 b6       	in	r0, 0x37	; 55
    719e:	00 fc       	sbrc	r0, 0
    71a0:	fd cf       	rjmp	.-6      	; 0x719c
			boot_rww_enable();				//Re-enable the RWW section
    71a2:	81 e1       	ldi	r24, 0x11	; 17
    71a4:	80 93 57 00 	sts	0x0057, r24
    71a8:	e8 95       	spm
    71aa:	3f c0       	rjmp	.+126    	; 0x722a
			
			/* commented out since not compatible with mega8
			if (address != (address & 0xFF80))
			{								// Ensure that the address points to the beginning of the next page
				address &= 0xFF80;
				address += SPM_PAGESIZE;
			}
			*/	
		}									// End FLASH
		
		if (mem == 'E')						// Start EEPROM
    71ac:	85 e4       	ldi	r24, 0x45	; 69
    71ae:	b8 16       	cp	r11, r24
    71b0:	e1 f5       	brne	.+120    	; 0x722a
        {
			address>>=1;
    71b2:	80 91 e2 00 	lds	r24, 0x00E2
    71b6:	90 91 e3 00 	lds	r25, 0x00E3
    71ba:	a0 91 e4 00 	lds	r26, 0x00E4
    71be:	b0 91 e5 00 	lds	r27, 0x00E5
    71c2:	b6 95       	lsr	r27
    71c4:	a7 95       	ror	r26
    71c6:	97 95       	ror	r25
    71c8:	87 95       	ror	r24
    71ca:	80 93 e2 00 	sts	0x00E2, r24
    71ce:	90 93 e3 00 	sts	0x00E3, r25
    71d2:	a0 93 e4 00 	sts	0x00E4, r26
    71d6:	b0 93 e5 00 	sts	0x00E5, r27
    71da:	f9 01       	movw	r30, r18
    71dc:	ef 59       	subi	r30, 0x9F	; 159
    71de:	ff 4f       	sbci	r31, 0xFF	; 255
			do {
	 	        EEARL = address;			// Setup EEPROM address
    71e0:	80 91 e2 00 	lds	r24, 0x00E2
    71e4:	8e bb       	out	0x1e, r24	; 30
	            EEARH = (address >> 8);
    71e6:	80 91 e2 00 	lds	r24, 0x00E2
    71ea:	90 91 e3 00 	lds	r25, 0x00E3
    71ee:	a0 91 e4 00 	lds	r26, 0x00E4
    71f2:	b0 91 e5 00 	lds	r27, 0x00E5
    71f6:	29 2f       	mov	r18, r25
    71f8:	3a 2f       	mov	r19, r26
    71fa:	4b 2f       	mov	r20, r27
    71fc:	55 27       	eor	r21, r21
    71fe:	2f bb       	out	0x1f, r18	; 31
				address++;					// Select next byte
    7200:	01 96       	adiw	r24, 0x01	; 1
    7202:	a1 1d       	adc	r26, r1
    7204:	b1 1d       	adc	r27, r1
    7206:	80 93 e2 00 	sts	0x00E2, r24
    720a:	90 93 e3 00 	sts	0x00E3, r25
    720e:	a0 93 e4 00 	sts	0x00E4, r26
    7212:	b0 93 e5 00 	sts	0x00E5, r27
				EEDR=gBuffer[cnt++];
    7216:	31 96       	adiw	r30, 0x01	; 1
    7218:	80 81       	ld	r24, Z
    721a:	8d bb       	out	0x1d, r24	; 29
				
	            EECR |= (1<<EEMWE);			// Write data into EEPROM
    721c:	e2 9a       	sbi	0x1c, 2	; 28
	            EECR |= (1<<EEWE);
    721e:	e1 9a       	sbi	0x1c, 1	; 28
	            
				while (EECR & (1<<EEWE));	// Wait for EEPROM write to finish
    7220:	e1 99       	sbic	0x1c, 1	; 28
    7222:	fe cf       	rjmp	.-4      	; 0x7220
				size--;						// Decreas number of bytes to write
    7224:	01 50       	subi	r16, 0x01	; 1
    7226:	10 40       	sbci	r17, 0x00	; 0
			} while(size);					// Loop until all bytes written
    7228:	d9 f6       	brne	.-74     	; 0x71e0

		}

		return '\r';						// Report programming OK
    722a:	8d e0       	ldi	r24, 0x0D	; 13
    722c:	90 e0       	ldi	r25, 0x00	; 0
    722e:	01 c0       	rjmp	.+2      	; 0x7232

	}
	
	return 0;								// Report programming failed
    7230:	ca 01       	movw	r24, r20
    7232:	df 91       	pop	r29
    7234:	cf 91       	pop	r28
    7236:	1f 91       	pop	r17
    7238:	0f 91       	pop	r16
    723a:	ff 90       	pop	r15
    723c:	ef 90       	pop	r14
    723e:	df 90       	pop	r13
    7240:	cf 90       	pop	r12
    7242:	bf 90       	pop	r11
    7244:	08 95       	ret

00007246 <BlockRead>:
}

void BlockRead(unsigned int size, unsigned char mem)
{
    7246:	0f 93       	push	r16
    7248:	1f 93       	push	r17
    724a:	cf 93       	push	r28
    724c:	df 93       	push	r29
    724e:	ec 01       	movw	r28, r24
	unsigned int data;
	
	my_eeprom_busy_wait();
    7250:	e1 99       	sbic	0x1c, 1	; 28
    7252:	fe cf       	rjmp	.-4      	; 0x7250
	
	if (mem == 'E')							// Read EEPROM
    7254:	65 34       	cpi	r22, 0x45	; 69
    7256:	11 f5       	brne	.+68     	; 0x729c
	{
		// address>>=1; // not needed here - hmm, somehow inconsistant TODO
		do {
			EEARL = address;				// Setup EEPROM address
    7258:	80 91 e2 00 	lds	r24, 0x00E2
    725c:	8e bb       	out	0x1e, r24	; 30
			EEARH = (address >> 8);
    725e:	80 91 e2 00 	lds	r24, 0x00E2
    7262:	90 91 e3 00 	lds	r25, 0x00E3
    7266:	a0 91 e4 00 	lds	r26, 0x00E4
    726a:	b0 91 e5 00 	lds	r27, 0x00E5
    726e:	29 2f       	mov	r18, r25
    7270:	3a 2f       	mov	r19, r26
    7272:	4b 2f       	mov	r20, r27
    7274:	55 27       	eor	r21, r21
    7276:	2f bb       	out	0x1f, r18	; 31
			address++;						// Select next EEPROM byte
    7278:	01 96       	adiw	r24, 0x01	; 1
    727a:	a1 1d       	adc	r26, r1
    727c:	b1 1d       	adc	r27, r1
    727e:	80 93 e2 00 	sts	0x00E2, r24
    7282:	90 93 e3 00 	sts	0x00E3, r25
    7286:	a0 93 e4 00 	sts	0x00E4, r26
    728a:	b0 93 e5 00 	sts	0x00E5, r27
			EECR |= (1<<EERE);				// Read EEPROM
    728e:	e0 9a       	sbi	0x1c, 0	; 28
			sendchar(EEDR);					// Transmit EEPROM data to PC
    7290:	8d b3       	in	r24, 0x1d	; 29
    7292:	0e 94 9d 3a 	call	0x753a
			size--;							// Decrease number of bytes to read
    7296:	21 97       	sbiw	r28, 0x01	; 1
		} while (size);					// Repeat until all block has been read
    7298:	f9 f6       	brne	.-66     	; 0x7258
    729a:	22 c0       	rjmp	.+68     	; 0x72e0
	}
	else									// Read Flash
	{
		do {
#if defined(RAMPZ)
			data = pgm_read_word_far(address);
#else
			data = pgm_read_word_near((uint16_t)address);
    729c:	e0 91 e2 00 	lds	r30, 0x00E2
    72a0:	f0 91 e3 00 	lds	r31, 0x00E3
    72a4:	05 91       	lpm	r16, Z+
    72a6:	14 91       	lpm	r17, Z
#endif
			sendchar((unsigned char)data);		//send LSB
    72a8:	80 2f       	mov	r24, r16
    72aa:	0e 94 9d 3a 	call	0x753a
			sendchar((unsigned char)(data >> 8));	//send MSB  
    72ae:	81 2f       	mov	r24, r17
    72b0:	99 27       	eor	r25, r25
    72b2:	0e 94 9d 3a 	call	0x753a
			address += 2;  					// Select next word in memory
    72b6:	80 91 e2 00 	lds	r24, 0x00E2
    72ba:	90 91 e3 00 	lds	r25, 0x00E3
    72be:	a0 91 e4 00 	lds	r26, 0x00E4
    72c2:	b0 91 e5 00 	lds	r27, 0x00E5
    72c6:	02 96       	adiw	r24, 0x02	; 2
    72c8:	a1 1d       	adc	r26, r1
    72ca:	b1 1d       	adc	r27, r1
    72cc:	80 93 e2 00 	sts	0x00E2, r24
    72d0:	90 93 e3 00 	sts	0x00E3, r25
    72d4:	a0 93 e4 00 	sts	0x00E4, r26
    72d8:	b0 93 e5 00 	sts	0x00E5, r27
			size -= 2;						// Subtract two bytes from number of bytes to read
    72dc:	22 97       	sbiw	r28, 0x02	; 2
		} while (size);					// Repeat until all block has been read
    72de:	f1 f6       	brne	.-68     	; 0x729c
    72e0:	df 91       	pop	r29
    72e2:	cf 91       	pop	r28
    72e4:	1f 91       	pop	r17
    72e6:	0f 91       	pop	r16
    72e8:	08 95       	ret

000072ea <main>:
    72ea:	cf e5       	ldi	r28, 0x5F	; 95
    72ec:	d8 e0       	ldi	r29, 0x08	; 8
    72ee:	de bf       	out	0x3e, r29	; 62
    72f0:	cd bf       	out	0x3d, r28	; 61
    72f2:	f8 94       	cli
    72f4:	01 e0       	ldi	r16, 0x01	; 1
    72f6:	05 bf       	out	0x35, r16	; 53
    72f8:	82 e0       	ldi	r24, 0x02	; 2
    72fa:	85 bf       	out	0x35, r24	; 53
    72fc:	60 e0       	ldi	r22, 0x00	; 0
    72fe:	83 e3       	ldi	r24, 0x33	; 51
    7300:	90 e0       	ldi	r25, 0x00	; 0
    7302:	0e 94 93 3a 	call	0x7526
    7306:	8f ef       	ldi	r24, 0xFF	; 255
    7308:	87 bb       	out	0x17, r24	; 23
    730a:	84 b3       	in	r24, 0x14	; 20
    730c:	88 61       	ori	r24, 0x18	; 24
    730e:	84 bb       	out	0x14, r24	; 20
    7310:	8b 98       	cbi	0x11, 3	; 17
    7312:	a2 98       	cbi	0x14, 2	; 20
    7314:	93 9a       	sbi	0x12, 3	; 18
    7316:	aa 9a       	sbi	0x15, 2	; 21
    7318:	80 b3       	in	r24, 0x10	; 16
    731a:	93 b3       	in	r25, 0x13	; 19
    731c:	83 ff       	sbrs	r24, 3
    731e:	0a c0       	rjmp	.+20     	; 0x7334
    7320:	05 bf       	out	0x35, r16	; 53
    7322:	15 be       	out	0x35, r1	; 53
    7324:	83 e7       	ldi	r24, 0x73	; 115
    7326:	0e 94 5d 38 	call	0x70ba
    732a:	e0 91 60 00 	lds	r30, 0x0060
    732e:	f0 91 61 00 	lds	r31, 0x0061
    7332:	09 95       	icall
    7334:	8c e7       	ldi	r24, 0x7C	; 124
    7336:	0e 94 5d 38 	call	0x70ba
    733a:	0e 94 b2 3a 	call	0x7564
    733e:	68 2f       	mov	r22, r24
    7340:	81 36       	cpi	r24, 0x61	; 97
    7342:	11 f4       	brne	.+4      	; 0x7348
    7344:	89 e5       	ldi	r24, 0x59	; 89
    7346:	ec c0       	rjmp	.+472    	; 0x7520
    7348:	81 34       	cpi	r24, 0x41	; 65
    734a:	39 f5       	brne	.+78     	; 0x739a
    734c:	0e 94 b2 3a 	call	0x7564
    7350:	99 27       	eor	r25, r25
    7352:	aa 27       	eor	r26, r26
    7354:	bb 27       	eor	r27, r27
    7356:	80 93 e2 00 	sts	0x00E2, r24
    735a:	90 93 e3 00 	sts	0x00E3, r25
    735e:	a0 93 e4 00 	sts	0x00E4, r26
    7362:	b0 93 e5 00 	sts	0x00E5, r27
    7366:	ee 24       	eor	r14, r14
    7368:	f8 2e       	mov	r15, r24
    736a:	09 2f       	mov	r16, r25
    736c:	1a 2f       	mov	r17, r26
    736e:	0e 94 b2 3a 	call	0x7564
    7372:	99 27       	eor	r25, r25
    7374:	aa 27       	eor	r26, r26
    7376:	bb 27       	eor	r27, r27
    7378:	e8 2a       	or	r14, r24
    737a:	f9 2a       	or	r15, r25
    737c:	0a 2b       	or	r16, r26
    737e:	1b 2b       	or	r17, r27
    7380:	ee 0c       	add	r14, r14
    7382:	ff 1c       	adc	r15, r15
    7384:	00 1f       	adc	r16, r16
    7386:	11 1f       	adc	r17, r17
    7388:	e0 92 e2 00 	sts	0x00E2, r14
    738c:	f0 92 e3 00 	sts	0x00E3, r15
    7390:	00 93 e4 00 	sts	0x00E4, r16
    7394:	10 93 e5 00 	sts	0x00E5, r17
    7398:	68 c0       	rjmp	.+208    	; 0x746a
    739a:	82 36       	cpi	r24, 0x62	; 98
    739c:	41 f4       	brne	.+16     	; 0x73ae
    739e:	89 e5       	ldi	r24, 0x59	; 89
    73a0:	0e 94 9d 3a 	call	0x753a
    73a4:	80 e0       	ldi	r24, 0x00	; 0
    73a6:	0e 94 9d 3a 	call	0x753a
    73aa:	80 e8       	ldi	r24, 0x80	; 128
    73ac:	b9 c0       	rjmp	.+370    	; 0x7520
    73ae:	82 34       	cpi	r24, 0x42	; 66
    73b0:	89 f4       	brne	.+34     	; 0x73d4
    73b2:	0e 94 b2 3a 	call	0x7564
    73b6:	99 27       	eor	r25, r25
    73b8:	18 2f       	mov	r17, r24
    73ba:	00 27       	eor	r16, r16
    73bc:	0e 94 b2 3a 	call	0x7564
    73c0:	99 27       	eor	r25, r25
    73c2:	08 2b       	or	r16, r24
    73c4:	19 2b       	or	r17, r25
    73c6:	0e 94 b2 3a 	call	0x7564
    73ca:	68 2f       	mov	r22, r24
    73cc:	c8 01       	movw	r24, r16
    73ce:	0e 94 61 38 	call	0x70c2
    73d2:	a6 c0       	rjmp	.+332    	; 0x7520
    73d4:	87 36       	cpi	r24, 0x67	; 103
    73d6:	89 f4       	brne	.+34     	; 0x73fa
    73d8:	0e 94 b2 3a 	call	0x7564
    73dc:	99 27       	eor	r25, r25
    73de:	18 2f       	mov	r17, r24
    73e0:	00 27       	eor	r16, r16
    73e2:	0e 94 b2 3a 	call	0x7564
    73e6:	99 27       	eor	r25, r25
    73e8:	08 2b       	or	r16, r24
    73ea:	19 2b       	or	r17, r25
    73ec:	0e 94 b2 3a 	call	0x7564
    73f0:	68 2f       	mov	r22, r24
    73f2:	c8 01       	movw	r24, r16
    73f4:	0e 94 23 39 	call	0x7246
    73f8:	9d cf       	rjmp	.-198    	; 0x7334
    73fa:	85 36       	cpi	r24, 0x65	; 101
    73fc:	09 f0       	breq	.+2      	; 0x7400
    73fe:	37 c0       	rjmp	.+110    	; 0x746e
    7400:	80 91 e6 00 	lds	r24, 0x00E6
    7404:	83 37       	cpi	r24, 0x73	; 115
    7406:	69 f5       	brne	.+90     	; 0x7462
    7408:	10 92 e2 00 	sts	0x00E2, r1
    740c:	10 92 e3 00 	sts	0x00E3, r1
    7410:	10 92 e4 00 	sts	0x00E4, r1
    7414:	10 92 e5 00 	sts	0x00E5, r1
    7418:	23 e0       	ldi	r18, 0x03	; 3
    741a:	80 91 e2 00 	lds	r24, 0x00E2
    741e:	90 91 e3 00 	lds	r25, 0x00E3
    7422:	fc 01       	movw	r30, r24
    7424:	20 93 57 00 	sts	0x0057, r18
    7428:	e8 95       	spm
    742a:	07 b6       	in	r0, 0x37	; 55
    742c:	00 fc       	sbrc	r0, 0
    742e:	fd cf       	rjmp	.-6      	; 0x742a
    7430:	80 91 e2 00 	lds	r24, 0x00E2
    7434:	90 91 e3 00 	lds	r25, 0x00E3
    7438:	a0 91 e4 00 	lds	r26, 0x00E4
    743c:	b0 91 e5 00 	lds	r27, 0x00E5
    7440:	80 58       	subi	r24, 0x80	; 128
    7442:	9f 4f       	sbci	r25, 0xFF	; 255
    7444:	af 4f       	sbci	r26, 0xFF	; 255
    7446:	bf 4f       	sbci	r27, 0xFF	; 255
    7448:	80 93 e2 00 	sts	0x00E2, r24
    744c:	90 93 e3 00 	sts	0x00E3, r25
    7450:	a0 93 e4 00 	sts	0x00E4, r26
    7454:	b0 93 e5 00 	sts	0x00E5, r27
    7458:	80 50       	subi	r24, 0x00	; 0
    745a:	90 47       	sbci	r25, 0x70	; 112
    745c:	a0 40       	sbci	r26, 0x00	; 0
    745e:	b0 40       	sbci	r27, 0x00	; 0
    7460:	e0 f2       	brcs	.-72     	; 0x741a
    7462:	81 e1       	ldi	r24, 0x11	; 17
    7464:	80 93 57 00 	sts	0x0057, r24
    7468:	e8 95       	spm
    746a:	8d e0       	ldi	r24, 0x0D	; 13
    746c:	59 c0       	rjmp	.+178    	; 0x7520
    746e:	85 34       	cpi	r24, 0x45	; 69
    7470:	39 f4       	brne	.+14     	; 0x7480
    7472:	8d e0       	ldi	r24, 0x0D	; 13
    7474:	0e 94 9d 3a 	call	0x753a
    7478:	81 e0       	ldi	r24, 0x01	; 1
    747a:	85 bf       	out	0x35, r24	; 53
    747c:	15 be       	out	0x35, r1	; 53
    747e:	55 cf       	rjmp	.-342    	; 0x732a
    7480:	80 35       	cpi	r24, 0x50	; 80
    7482:	99 f3       	breq	.-26     	; 0x746a
    7484:	8c 34       	cpi	r24, 0x4C	; 76
    7486:	89 f3       	breq	.-30     	; 0x746a
    7488:	80 37       	cpi	r24, 0x70	; 112
    748a:	11 f4       	brne	.+4      	; 0x7490
    748c:	83 e5       	ldi	r24, 0x53	; 83
    748e:	48 c0       	rjmp	.+144    	; 0x7520
    7490:	86 34       	cpi	r24, 0x46	; 70
    7492:	21 f4       	brne	.+8      	; 0x749c
    7494:	69 e0       	ldi	r22, 0x09	; 9
    7496:	80 e0       	ldi	r24, 0x00	; 0
    7498:	90 e0       	ldi	r25, 0x00	; 0
    749a:	05 c0       	rjmp	.+10     	; 0x74a6
    749c:	82 37       	cpi	r24, 0x72	; 114
    749e:	31 f4       	brne	.+12     	; 0x74ac
    74a0:	69 e0       	ldi	r22, 0x09	; 9
    74a2:	81 e0       	ldi	r24, 0x01	; 1
    74a4:	90 e0       	ldi	r25, 0x00	; 0
    74a6:	0e 94 c6 3a 	call	0x758c
    74aa:	3a c0       	rjmp	.+116    	; 0x7520
    74ac:	8e 34       	cpi	r24, 0x4E	; 78
    74ae:	21 f4       	brne	.+8      	; 0x74b8
    74b0:	69 e0       	ldi	r22, 0x09	; 9
    74b2:	83 e0       	ldi	r24, 0x03	; 3
    74b4:	90 e0       	ldi	r25, 0x00	; 0
    74b6:	f7 cf       	rjmp	.-18     	; 0x74a6
    74b8:	81 35       	cpi	r24, 0x51	; 81
    74ba:	21 f4       	brne	.+8      	; 0x74c4
    74bc:	69 e0       	ldi	r22, 0x09	; 9
    74be:	82 e0       	ldi	r24, 0x02	; 2
    74c0:	90 e0       	ldi	r25, 0x00	; 0
    74c2:	f1 cf       	rjmp	.-30     	; 0x74a6
    74c4:	84 37       	cpi	r24, 0x74	; 116
    74c6:	29 f4       	brne	.+10     	; 0x74d2
    74c8:	83 e7       	ldi	r24, 0x73	; 115
    74ca:	0e 94 9d 3a 	call	0x753a
    74ce:	80 e0       	ldi	r24, 0x00	; 0
    74d0:	27 c0       	rjmp	.+78     	; 0x7520
    74d2:	88 57       	subi	r24, 0x78	; 120
    74d4:	82 30       	cpi	r24, 0x02	; 2
    74d6:	18 f4       	brcc	.+6      	; 0x74de
    74d8:	0e 94 b2 3a 	call	0x7564
    74dc:	c6 cf       	rjmp	.-116    	; 0x746a
    74de:	64 35       	cpi	r22, 0x54	; 84
    74e0:	29 f4       	brne	.+10     	; 0x74ec
    74e2:	0e 94 b2 3a 	call	0x7564
    74e6:	80 93 e6 00 	sts	0x00E6, r24
    74ea:	bf cf       	rjmp	.-130    	; 0x746a
    74ec:	63 35       	cpi	r22, 0x53	; 83
    74ee:	19 f4       	brne	.+6      	; 0x74f6
    74f0:	0e 94 47 38 	call	0x708e
    74f4:	1f cf       	rjmp	.-450    	; 0x7334
    74f6:	66 35       	cpi	r22, 0x56	; 86
    74f8:	29 f4       	brne	.+10     	; 0x7504
    74fa:	80 e3       	ldi	r24, 0x30	; 48
    74fc:	0e 94 9d 3a 	call	0x753a
    7500:	87 e3       	ldi	r24, 0x37	; 55
    7502:	0e c0       	rjmp	.+28     	; 0x7520
    7504:	63 37       	cpi	r22, 0x73	; 115
    7506:	41 f4       	brne	.+16     	; 0x7518
    7508:	82 e0       	ldi	r24, 0x02	; 2
    750a:	0e 94 9d 3a 	call	0x753a
    750e:	85 e9       	ldi	r24, 0x95	; 149
    7510:	0e 94 9d 3a 	call	0x753a
    7514:	8e e1       	ldi	r24, 0x1E	; 30
    7516:	04 c0       	rjmp	.+8      	; 0x7520
    7518:	6b 31       	cpi	r22, 0x1B	; 27
    751a:	09 f4       	brne	.+2      	; 0x751e
    751c:	0b cf       	rjmp	.-490    	; 0x7334
    751e:	8f e3       	ldi	r24, 0x3F	; 63
    7520:	0e 94 9d 3a 	call	0x753a
    7524:	07 cf       	rjmp	.-498    	; 0x7334

00007526 <USART_Init>:
#endif


void USART_Init(unsigned int baudrate, unsigned char doublespeed)
{
    7526:	9c 01       	movw	r18, r24
    // Set baud rate
    UART0_UBRR_HIGH = (unsigned char)(baudrate>>8);
    7528:	83 2f       	mov	r24, r19
    752a:	99 27       	eor	r25, r25
    752c:	80 bd       	out	0x20, r24	; 32
    UART0_UBRR_LOW  = (unsigned char)baudrate;
    752e:	29 b9       	out	0x09, r18	; 9

    // Enable 2x speed - TODO adopt to all uCs
	#ifdef UART0_DOUBLEAVAIL
    if (doublespeed) UCSR0A = (1<<U2X0);
	#endif

#if defined (ATMEGA_USART)
    /* Enable USART receiver and transmitter and disable interrupts */
    UART0_CONTROL = (1<<RXEN)|(1<<TXEN)|(0<<RXCIE)|(0<<UDRIE);
    7530:	88 e1       	ldi	r24, 0x18	; 24
    7532:	8a b9       	out	0x0a, r24	; 10
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
    7534:	86 e8       	ldi	r24, 0x86	; 134
    7536:	80 bd       	out	0x20, r24	; 32
    7538:	08 95       	ret

0000753a <sendchar>:
    #else
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Enable USART receiver and transmitter and disable interrupts */
    UART0_CONTROL = (1<<RXEN0)|(1<<TXEN0)|(0<<RXCIE0)|(0<<UDRIE0);
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
    #endif 
#endif
    
}

void sendchar(char data)
{
    int i = 0;
    753a:	20 e0       	ldi	r18, 0x00	; 0
    753c:	30 e0       	ldi	r19, 0x00	; 0
    
    UART0_DATA  = data;
    753e:	8c b9       	out	0x0c, r24	; 12
    
    if(SREG & 0x80)
    7540:	0f b6       	in	r0, 0x3f	; 63
    7542:	07 fe       	sbrs	r0, 7
    7544:	0b c0       	rjmp	.+22     	; 0x755c
    {
		while ( !(UART0_STATUS&0x40) && (i<10000) )
		{
			i++;
    7546:	5e 99       	sbic	0x0b, 6	; 11
    7548:	0b c0       	rjmp	.+22     	; 0x7560
    754a:	2f 5f       	subi	r18, 0xFF	; 255
    754c:	3f 4f       	sbci	r19, 0xFF	; 255
    754e:	5e 99       	sbic	0x0b, 6	; 11
    7550:	07 c0       	rjmp	.+14     	; 0x7560
    7552:	87 e2       	ldi	r24, 0x27	; 39
    7554:	20 31       	cpi	r18, 0x10	; 16
    7556:	38 07       	cpc	r19, r24
    7558:	c4 f3       	brlt	.-16     	; 0x754a
    755a:	02 c0       	rjmp	.+4      	; 0x7560
		}
    }
    else 
        while( !(UART0_STATUS&0x40) );
    755c:	5e 9b       	sbis	0x0b, 6	; 11
    755e:	fe cf       	rjmp	.-4      	; 0x755c
        
    UART0_STATUS=UART0_STATUS|0x40;                             //delete TXCflag
    7560:	5e 9a       	sbi	0x0b, 6	; 11
    7562:	08 95       	ret

00007564 <recchar>:
}


char recchar(void)
{
    int i = 0;
    7564:	80 e0       	ldi	r24, 0x00	; 0
    7566:	90 e0       	ldi	r25, 0x00	; 0

    
    if(SREG & 0x80)
    7568:	0f b6       	in	r0, 0x3f	; 63
    756a:	07 fe       	sbrs	r0, 7
    756c:	0a c0       	rjmp	.+20     	; 0x7582
    {
		// while (!(UART0_STATUS & (1<<RXC0)) && (i<10000))
		while (!(UART0_STATUS & 0x80) && (i<10000))
		{
			i++;
    756e:	5f 99       	sbic	0x0b, 7	; 11
    7570:	0a c0       	rjmp	.+20     	; 0x7586
    7572:	01 96       	adiw	r24, 0x01	; 1
    7574:	5f 99       	sbic	0x0b, 7	; 11
    7576:	07 c0       	rjmp	.+14     	; 0x7586
    7578:	27 e2       	ldi	r18, 0x27	; 39
    757a:	80 31       	cpi	r24, 0x10	; 16
    757c:	92 07       	cpc	r25, r18
    757e:	cc f3       	brlt	.-14     	; 0x7572
    7580:	02 c0       	rjmp	.+4      	; 0x7586
		}
    }
    else
        // while(!(UART0_STATUS & (1<<RXC0)));
		while(!(UART0_STATUS & 0x80));
    7582:	5f 9b       	sbis	0x0b, 7	; 11
    7584:	fe cf       	rjmp	.-4      	; 0x7582
		
        
    return UART0_DATA ;
    7586:	8c b1       	in	r24, 0x0c	; 12
}
    7588:	99 27       	eor	r25, r25
    758a:	08 95       	ret

0000758c <read_fuse_lock>:
unsigned char read_fuse_lock(unsigned short addr, unsigned char mode)
{
	unsigned char retval;
	
	asm volatile
    758c:	fc 01       	movw	r30, r24
    758e:	60 93 57 00 	sts	0x0057, r22
    7592:	c8 95       	lpm
    7594:	80 2d       	mov	r24, r0
	(
		"movw r30, %3\n\t" /* Z to addr */ \
		"sts %0, %2\n\t" /* set mode in SPM_REG */ \
		"lpm\n\t"  /* load fuse/lock value into r0 */ \
		"mov %1,r0\n\t" /* save return value */ \
		: "=m" (SPM_REG),
		  "=r" (retval)
		: "r" (mode),
		  "r" (addr)
		: "r30", "r31", "r0"
	);
	return retval;
}
    7596:	99 27       	eor	r25, r25
    7598:	08 95       	ret
