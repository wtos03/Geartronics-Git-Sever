   1               		.file	"boot.c"
   2               		.arch atmega32
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  89               	.global	jump_to_app
  90               	.global	jump_to_app
  91               		.section .bss
  94               	jump_to_app:
  95 0000 0000      		.skip 2,0
  96               		.text
  99               	.global	ascii_to_bin
 101               	ascii_to_bin:
   1:boot.c        **** /******************************************************************************
   2:boot.c        ****  * Filename: Boot.c
   3:boot.c        ****  *
   4:boot.c        ****  * Author: Preston K. Manwaring
   5:boot.c        ****  *
   6:boot.c        ****  * Date: Monday, August 22, 2005 13:38:36 -0600
   7:boot.c        ****  *
   8:boot.c        ****  * License: Free to use. Please mention the contributing authors in the source
   9:boot.c        ****  * code.
  10:boot.c        ****  *
  11:boot.c        ****  * Description: This is a bootloader designed for the AVR processor family
  12:boot.c        ****  * which allows new firmware to be uploaded via the UART in Intel Hex format.
  13:boot.c        ****  * An interface for uploading such as Hyperterm is envisioned.
  14:boot.c        ****  * This code correctly parses the Intel Hex strings and upon reception of
  15:boot.c        ****  * a complete page (processor specific) of data, writes the data to flash.
  16:boot.c        ****  * Minimal error handling is implemented. Errors during program upload are
  17:boot.c        ****  *
  18:boot.c        ****  * ERR 1 - File upload synchronization is off (i.e. the ':' was not found)
  19:boot.c        ****  * ERR 2 - the checksum failed.
  20:boot.c        ****  *
  21:boot.c        ****  * Typical Intel hex format is supported in unix mode (LF not LF,CR). So
  22:boot.c        ****  * be sure to strip the extra CR from the hex file or have this program
  23:boot.c        ****  * strip the CR.
  24:boot.c        ****  *
  25:boot.c        ****  * The user menu is as follows:
  26:boot.c        ****  * U - upload the hex file. A 'READY' will return when the MCU is ready to
  27:boot.c        ****  *     receive the file. As the file uploads, a '*' prints for every page
  28:boot.c        ****  *     written to flash. When complete, 'OK' is transmitted. If an error
  29:boot.c        ****  *     occurs, 'ERR' followed by a number is printed.
  30:boot.c        ****  *
  31:boot.c        ****  * X - exit this program and start the user application.
  32:boot.c        ****  *
  33:boot.c        ****  * NOTE: This software is not optimized. It fits as it currently stands
  34:boot.c        ****  * in a BLS of 1024. Optimizations could be easily made, but the code is 
  35:boot.c        ****  * much easier to  understand with the way it currently stands. I spent
  36:boot.c        ****  * a lot of time reading manuals and looking at other's code to figure out
  37:boot.c        ****  * all I wanted to know. So I hope this is easily understood. Due to the 
  38:boot.c        ****  * lack of optimization, the most common error you will get using this
  39:boot.c        ****  * code will be ERR 1 as synchronization fails. This failure will occur
  40:boot.c        ****  * because your BAUD rate setting is too high and the program cannot
  41:boot.c        ****  * keep up the incoming data. Slowing down the data transfer rate should
  42:boot.c        ****  * fix this or you can optimize the code.
  43:boot.c        ****  *
  44:boot.c        ****  * A special thanks needs to go to Martin Thomas for writing some excelent code
  45:boot.c        ****  * which helped me get started. In fact, you will see some files and macros 
  46:boot.c        ****  * of his which I use including chipdef.h. His project can be found at
  47:boot.c        ****  * http://www.siwawi.arubi.uni-kl.de/avr_projects/
  48:boot.c        ****  *
  49:boot.c        ****  * If you have any questions or comments, feel free to write.
  50:boot.c        ****  * manjagu@byu.edu
  51:boot.c        ****  
  52:boot.c        ****  * Modified by Wichai Tossamartvorakul
  53:boot.c        ****  * Date 2 Aug 2007 
  54:boot.c        ****  * Test with ATMEGA32 at 16 Mhz
  55:boot.c        ****  *
  56:boot.c        ****  * To remove pin for select bootloader use keypress from terminal program
  57:boot.c        ****  * Enter boot mode condition
  58:boot.c        ****  *   	1.No program at 0x0000 ( Read 0xFF )
  59:boot.c        ****  * 		2.Press 2 buttons at E_IO while press reset key
  60:boot.c        ****  * Enter program mode condition
  61:boot.c        ****  * 	    1  There are program at 0x0000  (Checked when press Reset)
  62:boot.c        ****  *     	2  Press x  at bootmode  
  63:boot.c        ****  *  
  64:boot.c        ****  *
  65:boot.c        ****  ******************************************************************************/
  66:boot.c        **** 
  67:boot.c        **** /*--- INCLUDE FILES ----------------------------------------------------------*/
  68:boot.c        **** #include <inttypes.h>
  69:boot.c        **** #include <avr/io.h>
  70:boot.c        **** #include <avr/interrupt.h>
  71:boot.c        **** #include <avr/wdt.h>
  72:boot.c        **** #include <avr/boot.h>
  73:boot.c        **** #include <avr/pgmspace.h>
  74:boot.c        **** #include "sercom.h"
  75:boot.c        **** 
  76:boot.c        **** /* Select Boot Size (select one, comment out the others) */
  77:boot.c        **** // MAYBE: #define _B512 
  78:boot.c        **** //#define _B1024 
  79:boot.c        **** #define _B2048
  80:boot.c        **** 
  81:boot.c        **** /* From Martin Thomas */
  82:boot.c        **** #include "chipdef.h"
  83:boot.c        **** 
  84:boot.c        ****  
  85:boot.c        **** 
  86:boot.c        **** /* Bootloader Version */
  87:boot.c        **** #define VER_HIGH_BYTE '0'
  88:boot.c        **** #define VER_LOW_BYTE  '1'
  89:boot.c        **** 
  90:boot.c        **** // TRUE and FALSE
  91:boot.c        **** #define TRUE  1
  92:boot.c        **** #define FALSE 0
  93:boot.c        **** 
  94:boot.c        **** /*--- GLOBAL VARIABLES -------------------------------------------------------*/
  95:boot.c        **** unsigned char page_data[SPM_PAGESIZE]; // create temporary location for program 
  96:boot.c        **** 				       // data
  97:boot.c        **** unsigned long buf_address;
  98:boot.c        **** 
  99:boot.c        **** /*--- FUNCTION PROTOTYPES ----------------------------------------------------*/
 100:boot.c        **** unsigned char ascii_to_bin( char data );
 101:boot.c        **** char ihex_load(void);
 102:boot.c        **** void (*jump_to_app)(void) = 0x0000;
 103:boot.c        **** 
 104:boot.c        **** /*--- MAIN -------------------------------------------------------------------*/
 105:boot.c        **** int main(void)
 106:boot.c        **** {
 107:boot.c        ****     char temp_char;
 108:boot.c        ****     uint16_t loop  = 1;
 109:boot.c        **** //	uint8_t bootFlag = TRUE;
 110:boot.c        ****   	uint8_t bootFlag = FALSE;
 111:boot.c        ****     
 112:boot.c        ****     cli();
 113:boot.c        **** 	
 114:boot.c        ****     /* the following code moves the interrupt vector pointer to the bootloader
 115:boot.c        ****        section. The problem is the compiler doesn't understand where to put
 116:boot.c        ****        the IV table. */
 117:boot.c        ****     GICR = _BV(IVCE);       
 118:boot.c        ****     GICR |= _BV(IVSEL); //move interruptvectors to the Boot sector       
 119:boot.c        ****  
 120:boot.c        ****     /* The slow baud rate is required because of the intel hex parsing overhead.
 121:boot.c        ****        If I could figure out how to enable interrupts in the BLS (compiler issue)
 122:boot.c        ****        then a higher speed could be used by switching to an interrupt based
 123:boot.c        ****        UART ISR. The code could also be optimized. */
 124:boot.c        **** 
 125:boot.c        ****     SerCom0Init(BAUD_2400); // NOTE, the baud rates are constants defined in
 126:boot.c        ****                             // sercom.h. You need to adjust those constants
 127:boot.c        ****                             // to fit your MCU speed
 128:boot.c        **** 							
 129:boot.c        **** 	   // poll USART receive complete flag 64k times to catch the 'i' reliably
 130:boot.c        ****  
 131:boot.c        ****  
 132:boot.c        **** 	
 133:boot.c        **** // test if flash is empty (i.e. flash content is 0xff)
 134:boot.c        **** 	if(pgm_read_byte_near(0x0000) != 0xFF) {
 135:boot.c        **** 		bootFlag = FALSE; 
 136:boot.c        **** 	}
 137:boot.c        **** 
 138:boot.c        ****     do {
 139:boot.c        **** 	if(bit_is_set( UCSRA, RXC))
 140:boot.c        **** 	    if( UDR == 'i')
 141:boot.c        **** 		{ 	bootFlag = TRUE;
 142:boot.c        **** 			PutString0("Boot V ");
 143:boot.c        **** 			PutChar0(VER_HIGH_BYTE);
 144:boot.c        **** 			PutChar0(VER_LOW_BYTE);
 145:boot.c        **** 			PutString0("\r\n");
 146:boot.c        **** 		}		
 147:boot.c        **** 		
 148:boot.c        **** //    } while(loop++);
 149:boot.c        ****      } while(!bootFlag);
 150:boot.c        ****  
 151:boot.c        ****     
 152:boot.c        ****     /* this main loop is the user 'menu'. */
 153:boot.c        ****     while(bootFlag)                             
 154:boot.c        ****     {
 155:boot.c        **** 			   
 156:boot.c        **** 	if( Hit0() ) // more necessary for UART code running interrupts
 157:boot.c        **** 	{
 158:boot.c        **** 	    temp_char=GetChar0();
 159:boot.c        **** 
 160:boot.c        ****  	    switch(temp_char)
 161:boot.c        **** 	    {
 162:boot.c        **** 		case 'u': // download new program
 163:boot.c        **** 		{
 164:boot.c        **** 		    /* erase the main flash excepting BLS */
 165:boot.c        **** 		    buf_address = 0; 
 166:boot.c        **** 		    while ( APP_END > buf_address )
 167:boot.c        **** 		    {
 168:boot.c        **** 			boot_page_erase(buf_address);	// Perform page erase
 169:boot.c        **** 			boot_spm_busy_wait();		// Wait until the memory is erased.
 170:boot.c        **** 			buf_address += SPM_PAGESIZE;
 171:boot.c        **** 		    }
 172:boot.c        **** 		    buf_address = 0;
 173:boot.c        **** 
 174:boot.c        **** 		    /* load new program */
 175:boot.c        **** 		    PutString0("READY");
 176:boot.c        **** 		    if(( temp_char = ihex_load()))
 177:boot.c        **** 		    {
 178:boot.c        **** 			PutString0("ERR ");
 179:boot.c        **** 			PutInt0(temp_char);
 180:boot.c        **** 		    }
 181:boot.c        **** 		    else
 182:boot.c        **** 			{( PutString0("OK") );
 183:boot.c        **** 				bootFlag = FALSE ;  // Exit to run
 184:boot.c        **** 			}
 185:boot.c        **** 		}
 186:boot.c        **** 		break;
 187:boot.c        **** 		
 188:boot.c        **** 		case 'x':                   //Exit upgrade
 189:boot.c        **** 		{
 190:boot.c        **** 			GICR = _BV(IVCE); 
 191:boot.c        **** 			GICR &= ~_BV(IVSEL); //move interruptvectors to the Application sector
 192:boot.c        **** 			jump_to_app(); // Jump to application sector
 193:boot.c        **** //		    wdt_enable(WDTO_15MS); // Enable Watchdog Timer to give reset
 194:boot.c        **** 		}
 195:boot.c        **** 		break;
 196:boot.c        **** 		default:
 197:boot.c        **** 		{
 198:boot.c        **** 		    PutString0("u - Upload or x - Execute\r\n");
 199:boot.c        **** 		}
 200:boot.c        **** 	    } // end switch
 201:boot.c        **** 	} // end if( Hit0() )
 202:boot.c        ****     }	// end while(1)
 203:boot.c        **** // Start to application
 204:boot.c        **** 
 205:boot.c        **** 	 GICR = _BV(IVCE); 
 206:boot.c        **** 	 GICR &= ~_BV(IVSEL); //move interruptvectors to the Application sector
 207:boot.c        **** 	 jump_to_app(); // Jump to application sector
 208:boot.c        **** 
 209:boot.c        ****     return 0;
 210:boot.c        **** }
 211:boot.c        **** 
 212:boot.c        **** /*--- char ihex_load( void ) -------------------------------------------------*/
 213:boot.c        **** /* This function pulls intel hex formatted code from the serial port and loads 
 214:boot.c        ****    it into a temporary location. Once a complete SPM page length is stored,
 215:boot.c        ****    it executes a flash memory write. */
 216:boot.c        **** char ihex_load(void)
 217:boot.c        **** {
 218:boot.c        ****     unsigned char
 219:boot.c        **** 	i,
 220:boot.c        **** 	byte_count = 0,
 221:boot.c        **** 	data_pairs,
 222:boot.c        **** 	data_type,
 223:boot.c        **** 	temp_byte,
 224:boot.c        **** 	temp_store,
 225:boot.c        **** 	address_lo,
 226:boot.c        **** 	address_hi;
 227:boot.c        **** 
 228:boot.c        ****     unsigned int data; // temporary location to store program words
 229:boot.c        ****     
 230:boot.c        ****     unsigned long temp_address = 0ul;   //Tmp page fill address ??
 231:boot.c        **** 
 232:boot.c        ****     do
 233:boot.c        ****     {
 234:boot.c        **** 	if(GetChar0() != ':') // check to make sure the first character is ':'
 235:boot.c        **** 	{
 236:boot.c        **** 	    return(1);
 237:boot.c        **** 	}
 238:boot.c        **** 	/* get the count of data pairs */
 239:boot.c        **** 	data_pairs = ascii_to_bin( GetChar0() ) << 4;
 240:boot.c        **** 	data_pairs |= ascii_to_bin( GetChar0() );
 241:boot.c        **** 	
 242:boot.c        **** 	/* get the address to put the data */
 243:boot.c        **** 	/* although we collect this data, we do not use it.  All data
 244:boot.c        **** 	   programmed through this bootloader starts at application program
 245:boot.c        **** 	   space location 0x0000. The collection is neccessary only for
 246:boot.c        **** 	   the checksum calculation. */
 247:boot.c        **** 	address_hi = ascii_to_bin( GetChar0() ) << 4;
 248:boot.c        **** 	address_hi |= ascii_to_bin( GetChar0() );
 249:boot.c        **** 	
 250:boot.c        **** 	address_lo = ascii_to_bin( GetChar0() ) << 4;
 251:boot.c        **** 	address_lo |= ascii_to_bin( GetChar0() );
 252:boot.c        **** 	
 253:boot.c        **** 	/* get the data type */
 254:boot.c        **** 	data_type = ascii_to_bin( GetChar0() ) << 4;
 255:boot.c        **** 	data_type |= ascii_to_bin( GetChar0() );
 256:boot.c        **** 	
 257:boot.c        **** 	temp_store = data_pairs + address_hi + address_lo + data_type;
 258:boot.c        **** 	
 259:boot.c        **** 	for( i = 0; i < data_pairs; i++ )
 260:boot.c        **** 	{
 261:boot.c        **** 	    temp_byte = ascii_to_bin( GetChar0() ) << 4;
 262:boot.c        **** 	    temp_byte |= ascii_to_bin( GetChar0() );
 263:boot.c        **** 	    page_data[byte_count] = temp_byte;	
 264:boot.c        **** 		byte_count++;
 265:boot.c        **** 	    temp_store += temp_byte;
 266:boot.c        **** 	}
 267:boot.c        **** 	    
 268:boot.c        **** 	/* get the checksum */
 269:boot.c        **** 	temp_byte = ascii_to_bin( GetChar0() ) << 4;
 270:boot.c        **** 	temp_byte |= ascii_to_bin( GetChar0() );
 271:boot.c        **** 
 272:boot.c        **** 	GetChar0(); // get and dispose of the LF
 273:boot.c        **** 	//GetChar0(); // strip the CR character
 274:boot.c        **** 
 275:boot.c        **** 	/* check the data and checksum */
 276:boot.c        **** 	if( (char)(temp_store + temp_byte) )
 277:boot.c        **** 	{
 278:boot.c        **** 	    return(2);
 279:boot.c        **** 	}
 280:boot.c        **** 
 281:boot.c        **** 	/* fill the rest of the page buffer with 0xFF if the last records are not 
 282:boot.c        **** 	   a full page in length */
 283:boot.c        **** 	if( data_type )
 284:boot.c        **** 	{
 285:boot.c        **** 	
 286:boot.c        **** 		for (i= 0 ; i < 10 ;i++);
 287:boot.c        **** 		
 288:boot.c        **** 		for(byte_count; byte_count < SPM_PAGESIZE; byte_count++ )
 289:boot.c        **** 	    {
 290:boot.c        **** 			page_data[byte_count] = 0xFF;
 291:boot.c        **** 	    }
 292:boot.c        **** 	}
 293:boot.c        **** 
 294:boot.c        **** 	/* if the page buffer is full, write the buffer to the temp flash buffer */
 295:boot.c        **** 	if( byte_count >= SPM_PAGESIZE )
 296:boot.c        **** 	{
 297:boot.c        **** 	    byte_count = 0;
 298:boot.c        **** 
 299:boot.c        **** 	    /* store data in temp buffer and write to flash */
 300:boot.c        **** 	    for( i = 0; i < SPM_PAGESIZE; i += 2 )
 301:boot.c        **** 	    {
 302:boot.c        **** 		/* swap the bytes for little endian format */
 303:boot.c        **** 		data = page_data[ i ];
 304:boot.c        **** 		data |= ( page_data[ i + 1 ] << 8 );
 305:boot.c        **** 		boot_page_fill( temp_address, data ); // call asm routine to load temporary flash buffer
 306:boot.c        **** 		temp_address += 2; // select next word in temporary buffer
 307:boot.c        **** 	    }
 308:boot.c        **** 
 309:boot.c        **** 	    /* write to the flash */
 310:boot.c        **** 	    boot_page_write( temp_address - SPM_PAGESIZE );
 311:boot.c        **** 	    boot_spm_busy_wait();	
 312:boot.c        **** 	    boot_rww_enable();				//Re-enable the RWW section
 313:boot.c        **** 
 314:boot.c        **** 	    PutChar0('*');
 315:boot.c        **** 	}
 316:boot.c        ****     } while( !data_type );
 317:boot.c        ****     return(0);
 318:boot.c        **** }
 319:boot.c        **** 
 320:boot.c        **** /*--- unsigned char ascii_to_bin( char data ) --------------------------------*/
 321:boot.c        **** /* This fuction returns the binary value of the received ascii (HEX) character */
 322:boot.c        **** unsigned char ascii_to_bin( char data )
 323:boot.c        **** {
 103               	.LM1:
 104               	/* prologue: frame size=0 */
 105               	/* prologue end (size=0) */
 324:boot.c        ****  data )
 107               	.LM2:
 108 0000 8134      		cpi r24,lo8(65)
 109 0002 18F4      		brsh .L2
 325:boot.c        **** har data )
 326:boot.c        **** {
 111               	.LM3:
 112 0004 8053      		subi r24,lo8(-(-48))
 113 0006 9927      		clr r25
 114 0008 0895      		ret
 115               	.L2:
 327:boot.c        ****  data )
 328:boot.c        **** {
 329:boot.c        ****     if( data < 'A' )
 330:boot.c        ****     {
 117               	.LM4:
 118 000a 8753      		subi r24,lo8(-(-55))
 119 000c 9927      		clr r25
 331:boot.c        **** )
 332:boot.c        ****     {
 121               	.LM5:
 122 000e 0895      		ret
 123               	/* epilogue: frame size=0 */
 124               	/* epilogue: noreturn */
 125               	/* epilogue end (size=0) */
 126               	/* function ascii_to_bin size 8 (8) */
 128               	.Lscope0:
 130               	.global	ihex_load
 132               	ihex_load:
 134               	.LM6:
 135               	/* prologue: frame size=0 */
 136 0010 9F92      		push r9
 137 0012 AF92      		push r10
 138 0014 BF92      		push r11
 139 0016 CF92      		push r12
 140 0018 DF92      		push r13
 141 001a EF92      		push r14
 142 001c FF92      		push r15
 143 001e 0F93      		push r16
 144 0020 1F93      		push r17
 145 0022 CF93      		push r28
 146               	/* prologue end (size=10) */
 148               	.LM7:
 149 0024 EE24      		clr r14
 151               	.LM8:
 152 0026 AA24      		clr r10
 153 0028 BB24      		clr r11
 154 002a 6501      		movw r12,r10
 155               	.L5:
 157               	.LM9:
 158 002c 0E94 0000 		call GetChar0
 159 0030 8A33      		cpi r24,lo8(58)
 160 0032 19F0      		breq .L8
 162               	.LM10:
 163 0034 81E0      		ldi r24,lo8(1)
 164 0036 90E0      		ldi r25,hi8(1)
 165 0038 A8C0      		rjmp .L4
 166               	.L8:
 168               	.LM11:
 169 003a 0E94 0000 		call GetChar0
 170 003e 0E94 0000 		call ascii_to_bin
 171 0042 F82E      		mov r15,r24
 172 0044 FF0C      		lsl r15
 173 0046 FF0C      		lsl r15
 174 0048 FF0C      		lsl r15
 175 004a FF0C      		lsl r15
 177               	.LM12:
 178 004c 0E94 0000 		call GetChar0
 179 0050 0E94 0000 		call ascii_to_bin
 180 0054 F82A      		or r15,r24
 182               	.LM13:
 183 0056 0E94 0000 		call GetChar0
 184 005a 0E94 0000 		call ascii_to_bin
 185 005e C82F      		mov r28,r24
 186 0060 C295      		swap r28
 187 0062 C07F      		andi r28,0xf0
 189               	.LM14:
 190 0064 0E94 0000 		call GetChar0
 191 0068 0E94 0000 		call ascii_to_bin
 192 006c C82B      		or r28,r24
 194               	.LM15:
 195 006e 0E94 0000 		call GetChar0
 196 0072 0E94 0000 		call ascii_to_bin
 197 0076 182F      		mov r17,r24
 198 0078 1295      		swap r17
 199 007a 107F      		andi r17,0xf0
 201               	.LM16:
 202 007c 0E94 0000 		call GetChar0
 203 0080 0E94 0000 		call ascii_to_bin
 204 0084 182B      		or r17,r24
 206               	.LM17:
 207 0086 0E94 0000 		call GetChar0
 208 008a 0E94 0000 		call ascii_to_bin
 209 008e 982E      		mov r9,r24
 210 0090 990C      		lsl r9
 211 0092 990C      		lsl r9
 212 0094 990C      		lsl r9
 213 0096 990C      		lsl r9
 215               	.LM18:
 216 0098 0E94 0000 		call GetChar0
 217 009c 0E94 0000 		call ascii_to_bin
 218 00a0 982A      		or r9,r24
 220               	.LM19:
 221 00a2 CF0D      		add r28,r15
 222 00a4 C10F      		add r28,r17
 223 00a6 C90D      		add r28,r9
 225               	.LM20:
 226 00a8 00E0      		ldi r16,lo8(0)
 227               	.L58:
 228 00aa 0F15      		cp r16,r15
 229 00ac A8F4      		brsh .L32
 231               	.LM21:
 232 00ae 0E94 0000 		call GetChar0
 233 00b2 0E94 0000 		call ascii_to_bin
 234 00b6 182F      		mov r17,r24
 235 00b8 1295      		swap r17
 236 00ba 107F      		andi r17,0xf0
 238               	.LM22:
 239 00bc 0E94 0000 		call GetChar0
 240 00c0 0E94 0000 		call ascii_to_bin
 241 00c4 182B      		or r17,r24
 243               	.LM23:
 244 00c6 EE2D      		mov r30,r14
 245 00c8 FF27      		clr r31
 246 00ca E050      		subi r30,lo8(-(page_data))
 247 00cc F040      		sbci r31,hi8(-(page_data))
 248 00ce 1083      		st Z,r17
 250               	.LM24:
 251 00d0 E394      		inc r14
 253               	.LM25:
 254 00d2 C10F      		add r28,r17
 256               	.LM26:
 257 00d4 0F5F      		subi r16,lo8(-(1))
 258 00d6 E9CF      		rjmp .L58
 259               	.L32:
 261               	.LM27:
 262 00d8 0E94 0000 		call GetChar0
 263 00dc 0E94 0000 		call ascii_to_bin
 264 00e0 182F      		mov r17,r24
 265 00e2 1295      		swap r17
 266 00e4 107F      		andi r17,0xf0
 268               	.LM28:
 269 00e6 0E94 0000 		call GetChar0
 270 00ea 0E94 0000 		call ascii_to_bin
 271 00ee 182B      		or r17,r24
 273               	.LM29:
 274 00f0 0E94 0000 		call GetChar0
 276               	.LM30:
 277 00f4 C10F      		add r28,r17
 278 00f6 19F0      		breq .L13
 280               	.LM31:
 281 00f8 82E0      		ldi r24,lo8(2)
 282 00fa 90E0      		ldi r25,hi8(2)
 283 00fc 46C0      		rjmp .L4
 284               	.L13:
 286               	.LM32:
 287 00fe 9920      		tst r9
 288 0100 59F0      		breq .L14
 290               	.LM33:
 291 0102 E7FC      		sbrc r14,7
 292 0104 09C0      		rjmp .L14
 293 0106 8FEF      		ldi r24,lo8(-1)
 294               	.L22:
 296               	.LM34:
 297 0108 EE2D      		mov r30,r14
 298 010a FF27      		clr r31
 299 010c E050      		subi r30,lo8(-(page_data))
 300 010e F040      		sbci r31,hi8(-(page_data))
 301 0110 8083      		st Z,r24
 303               	.LM35:
 304 0112 E394      		inc r14
 305 0114 E7FE      		sbrs r14,7
 306 0116 F8CF      		rjmp .L22
 307               	.L14:
 309               	.LM36:
 310 0118 E7FE      		sbrs r14,7
 311 011a 32C0      		rjmp .L7
 313               	.LM37:
 314 011c 00E0      		ldi r16,lo8(0)
 316               	.LM38:
 317 011e E02E      		mov r14,r16
 318 0120 41E0      		ldi r20,lo8(1)
 319               	.L27:
 321               	.LM39:
 322 0122 E02F      		mov r30,r16
 323 0124 FF27      		clr r31
 324 0126 E050      		subi r30,lo8(-(page_data))
 325 0128 F040      		sbci r31,hi8(-(page_data))
 326 012a 8081      		ld r24,Z
 327 012c 9927      		clr r25
 329               	.LM40:
 330 012e 2181      		ldd r18,Z+1
 331 0130 3327      		clr r19
 332 0132 322F      		mov r19,r18
 333 0134 2227      		clr r18
 334 0136 822B      		or r24,r18
 335 0138 932B      		or r25,r19
 336               	.LBB2:
 338               	.LM41:
 339               	/* #APP */
 340 013a 0C01      		movw  r0, r24
 341 013c F501      		movw r30, r10
 342 013e 4093 5700 		sts 87, r20
 343 0142 E895      		spm
 344 0144 1124      		clr  r1
 345               		
 346               	/* #NOAPP */
 347               	.LBE2:
 349               	.LM42:
 350 0146 82E0      		ldi r24,lo8(2)
 351 0148 90E0      		ldi r25,hi8(2)
 352 014a A0E0      		ldi r26,hlo8(2)
 353 014c B0E0      		ldi r27,hhi8(2)
 354 014e A80E      		add r10,r24
 355 0150 B91E      		adc r11,r25
 356 0152 CA1E      		adc r12,r26
 357 0154 DB1E      		adc r13,r27
 359               	.LM43:
 360 0156 0E5F      		subi r16,lo8(-(2))
 361 0158 07FF      		sbrs r16,7
 362 015a E3CF      		rjmp .L27
 363               	.LBB3:
 365               	.LM44:
 366 015c 25E0      		ldi r18,lo8(5)
 367 015e C501      		movw r24,r10
 368 0160 8058      		subi r24,lo8(-(-128))
 369 0162 9040      		sbci r25,hi8(-(-128))
 370               	/* #APP */
 371 0164 FC01      		movw r30, r24
 372 0166 2093 5700 		sts 87, r18
 373 016a E895      		spm
 374               		
 375               	/* #NOAPP */
 376               	.L28:
 377               	.LBE3:
 379               	.LM45:
 380 016c 07B6      		in __tmp_reg__,87-0x20
 381 016e 00FC      		sbrc __tmp_reg__,0
 382 0170 FDCF      		rjmp .L28
 383               	.LBB4:
 385               	.LM46:
 386 0172 81E1      		ldi r24,lo8(17)
 387               	/* #APP */
 388 0174 8093 5700 		sts 87, r24
 389 0178 E895      		spm
 390               		
 391               	/* #NOAPP */
 392               	.LBE4:
 394               	.LM47:
 395 017a 8AE2      		ldi r24,lo8(42)
 396 017c 0E94 0000 		call PutChar0
 397               	.L7:
 399               	.LM48:
 400 0180 9920      		tst r9
 401 0182 09F4      		brne .+2
 402 0184 53CF      		rjmp .L5
 404               	.LM49:
 405 0186 80E0      		ldi r24,lo8(0)
 406 0188 90E0      		ldi r25,hi8(0)
 407               	.L4:
 408               	/* epilogue: frame size=0 */
 409 018a CF91      		pop r28
 410 018c 1F91      		pop r17
 411 018e 0F91      		pop r16
 412 0190 FF90      		pop r15
 413 0192 EF90      		pop r14
 414 0194 DF90      		pop r13
 415 0196 CF90      		pop r12
 416 0198 BF90      		pop r11
 417 019a AF90      		pop r10
 418 019c 9F90      		pop r9
 419 019e 0895      		ret
 420               	/* epilogue end (size=11) */
 421               	/* function ihex_load size 214 (193) */
 434               	.Lscope1:
 435               		.data
 436               	.LC0:
 437 0000 426F 6F74 		.string	"Boot V "
 437      2056 2000 
 438               	.LC1:
 439 0008 0D0A 00   		.string	"\r\n"
 440               	.LC2:
 441 000b 5245 4144 		.string	"READY"
 441      5900 
 442               	.LC3:
 443 0011 4552 5220 		.string	"ERR "
 443      00
 444               	.LC4:
 445 0016 4F4B 00   		.string	"OK"
 446               	.LC5:
 447 0019 7520 2D20 		.string	"u - Upload or x - Execute\r\n"
 447      5570 6C6F 
 447      6164 206F 
 447      7220 7820 
 447      2D20 4578 
 448               		.text
 450               	.global	main
 452               	main:
 454               	.LM50:
 455               	/* prologue: frame size=0 */
 456 01a0 C0E0      		ldi r28,lo8(__stack - 0)
 457 01a2 D0E0      		ldi r29,hi8(__stack - 0)
 458 01a4 DEBF      		out __SP_H__,r29
 459 01a6 CDBF      		out __SP_L__,r28
 460               	/* prologue end (size=4) */
 462               	.LM51:
 463 01a8 10E0      		ldi r17,lo8(0)
 465               	.LM52:
 466               	/* #APP */
 467 01aa F894      		cli
 469               	.LM53:
 470               	/* #NOAPP */
 471 01ac 81E0      		ldi r24,lo8(1)
 472 01ae 8BBF      		out 91-0x20,r24
 474               	.LM54:
 475 01b0 8BB7      		in r24,91-0x20
 476 01b2 8260      		ori r24,lo8(2)
 477 01b4 8BBF      		out 91-0x20,r24
 479               	.LM55:
 480 01b6 80EA      		ldi r24,lo8(416)
 481 01b8 91E0      		ldi r25,hi8(416)
 482 01ba 0E94 0000 		call SerCom0Init
 483               	.L61:
 485               	.LM56:
 486 01be 5F9B      		sbis 43-0x20,7
 487 01c0 13C0      		rjmp .L63
 489               	.LM57:
 490 01c2 8CB1      		in r24,44-0x20
 491 01c4 8936      		cpi r24,lo8(105)
 492 01c6 81F4      		brne .L63
 494               	.LM58:
 495 01c8 11E0      		ldi r17,lo8(1)
 497               	.LM59:
 498 01ca 80E0      		ldi r24,lo8(.LC0)
 499 01cc 90E0      		ldi r25,hi8(.LC0)
 500 01ce 0E94 0000 		call PutString0
 502               	.LM60:
 503 01d2 80E3      		ldi r24,lo8(48)
 504 01d4 0E94 0000 		call PutChar0
 506               	.LM61:
 507 01d8 81E3      		ldi r24,lo8(49)
 508 01da 0E94 0000 		call PutChar0
 510               	.LM62:
 511 01de 80E0      		ldi r24,lo8(.LC1)
 512 01e0 90E0      		ldi r25,hi8(.LC1)
 513 01e2 0E94 0000 		call PutString0
 514 01e6 02C0      		rjmp .L81
 515               	.L63:
 517               	.LM63:
 518 01e8 1123      		tst r17
 519 01ea 49F3      		breq .L61
 520               	.L81:
 522               	.LM64:
 523 01ec 0E94 0000 		call Hit0
 524 01f0 8823      		tst r24
 525 01f2 09F4      		brne .+2
 526 01f4 6AC0      		rjmp .L66
 528               	.LM65:
 529 01f6 0E94 0000 		call GetChar0
 531               	.LM66:
 532 01fa 9927      		clr r25
 533 01fc 8537      		cpi r24,117
 534 01fe 9105      		cpc r25,__zero_reg__
 535 0200 29F0      		breq .L70
 536 0202 8837      		cpi r24,120
 537 0204 9105      		cpc r25,__zero_reg__
 538 0206 09F4      		brne .+2
 539 0208 51C0      		rjmp .L79
 540 020a 5BC0      		rjmp .L80
 541               	.L70:
 543               	.LM67:
 544 020c 1092 0000 		sts buf_address,__zero_reg__
 545 0210 1092 0000 		sts (buf_address)+1,__zero_reg__
 546 0214 1092 0000 		sts (buf_address)+2,__zero_reg__
 547 0218 1092 0000 		sts (buf_address)+3,__zero_reg__
 548 021c 23E0      		ldi r18,lo8(3)
 549               	.L76:
 550               	.LBB5:
 552               	.LM68:
 553 021e 8091 0000 		lds r24,buf_address
 554 0222 9091 0000 		lds r25,(buf_address)+1
 555               	/* #APP */
 556 0226 FC01      		movw r30, r24
 557 0228 2093 5700 		sts 87, r18
 558 022c E895      		spm
 559               		
 560               	/* #NOAPP */
 561               	.L73:
 562               	.LBE5:
 564               	.LM69:
 565 022e 07B6      		in __tmp_reg__,87-0x20
 566 0230 00FC      		sbrc __tmp_reg__,0
 567 0232 FDCF      		rjmp .L73
 569               	.LM70:
 570 0234 8091 0000 		lds r24,buf_address
 571 0238 9091 0000 		lds r25,(buf_address)+1
 572 023c A091 0000 		lds r26,(buf_address)+2
 573 0240 B091 0000 		lds r27,(buf_address)+3
 574 0244 8058      		subi r24,lo8(-(128))
 575 0246 9F4F      		sbci r25,hi8(-(128))
 576 0248 AF4F      		sbci r26,hlo8(-(128))
 577 024a BF4F      		sbci r27,hhi8(-(128))
 578 024c 8093 0000 		sts buf_address,r24
 579 0250 9093 0000 		sts (buf_address)+1,r25
 580 0254 A093 0000 		sts (buf_address)+2,r26
 581 0258 B093 0000 		sts (buf_address)+3,r27
 582 025c 8050      		subi r24,lo8(28672)
 583 025e 9047      		sbci r25,hi8(28672)
 584 0260 A040      		sbci r26,hlo8(28672)
 585 0262 B040      		sbci r27,hhi8(28672)
 586 0264 E0F2      		brlo .L76
 588               	.LM71:
 589 0266 1092 0000 		sts buf_address,__zero_reg__
 590 026a 1092 0000 		sts (buf_address)+1,__zero_reg__
 591 026e 1092 0000 		sts (buf_address)+2,__zero_reg__
 592 0272 1092 0000 		sts (buf_address)+3,__zero_reg__
 594               	.LM72:
 595 0276 80E0      		ldi r24,lo8(.LC2)
 596 0278 90E0      		ldi r25,hi8(.LC2)
 597 027a 0E94 0000 		call PutString0
 599               	.LM73:
 600 027e 0E94 0000 		call ihex_load
 601 0282 C82F      		mov r28,r24
 602 0284 8823      		tst r24
 603 0286 69F0      		breq .L77
 605               	.LM74:
 606 0288 80E0      		ldi r24,lo8(.LC3)
 607 028a 90E0      		ldi r25,hi8(.LC3)
 608 028c 0E94 0000 		call PutString0
 610               	.LM75:
 611 0290 8C2F      		mov r24,r28
 612 0292 9927      		clr r25
 613 0294 AA27      		clr r26
 614 0296 BB27      		clr r27
 615 0298 BC01      		movw r22,r24
 616 029a CD01      		movw r24,r26
 617 029c 0E94 0000 		call PutInt0
 618 02a0 14C0      		rjmp .L66
 619               	.L77:
 621               	.LM76:
 622 02a2 80E0      		ldi r24,lo8(.LC4)
 623 02a4 90E0      		ldi r25,hi8(.LC4)
 624 02a6 0E94 0000 		call PutString0
 626               	.LM77:
 627 02aa 12C0      		rjmp .L83
 628               	.L79:
 630               	.LM78:
 631 02ac 81E0      		ldi r24,lo8(1)
 632 02ae 8BBF      		out 91-0x20,r24
 634               	.LM79:
 635 02b0 8BB7      		in r24,91-0x20
 636 02b2 8D7F      		andi r24,lo8(-3)
 637 02b4 8BBF      		out 91-0x20,r24
 639               	.LM80:
 640 02b6 E091 0000 		lds r30,jump_to_app
 641 02ba F091 0000 		lds r31,(jump_to_app)+1
 642 02be 0995      		icall
 644               	.LM81:
 645 02c0 04C0      		rjmp .L66
 646               	.L80:
 648               	.LM82:
 649 02c2 80E0      		ldi r24,lo8(.LC5)
 650 02c4 90E0      		ldi r25,hi8(.LC5)
 651 02c6 0E94 0000 		call PutString0
 652               	.L66:
 653 02ca 1123      		tst r17
 654 02cc 09F0      		breq .+2
 655 02ce 8ECF      		rjmp .L81
 656               	.L83:
 658               	.LM83:
 659 02d0 81E0      		ldi r24,lo8(1)
 660 02d2 8BBF      		out 91-0x20,r24
 662               	.LM84:
 663 02d4 8BB7      		in r24,91-0x20
 664 02d6 8D7F      		andi r24,lo8(-3)
 665 02d8 8BBF      		out 91-0x20,r24
 667               	.LM85:
 668 02da E091 0000 		lds r30,jump_to_app
 669 02de F091 0000 		lds r31,(jump_to_app)+1
 670 02e2 0995      		icall
 672               	.LM86:
 673 02e4 80E0      		ldi r24,lo8(0)
 674 02e6 90E0      		ldi r25,hi8(0)
 675               	/* epilogue: frame size=0 */
 676 02e8 0C94 0000 		jmp exit
 677               	/* epilogue end (size=2) */
 678               	/* function main size 174 (168) */
 684               	.Lscope2:
 685               		.comm page_data,128,1
 686               		.comm buf_address,4,1
 690               		.text
 692               	Letext:
 693               	/* File "boot.c": code  396 = 0x018c ( 369), prologues  14, epilogues  13 */
DEFINED SYMBOLS
                            *ABS*:00000000 boot.c
C:\DOCUME~1\tos\LOCALS~1\Temp/ccAZaaaa.s:3      *ABS*:0000003f __SREG__
C:\DOCUME~1\tos\LOCALS~1\Temp/ccAZaaaa.s:4      *ABS*:0000003e __SP_H__
C:\DOCUME~1\tos\LOCALS~1\Temp/ccAZaaaa.s:5      *ABS*:0000003d __SP_L__
C:\DOCUME~1\tos\LOCALS~1\Temp/ccAZaaaa.s:6      *ABS*:00000000 __tmp_reg__
C:\DOCUME~1\tos\LOCALS~1\Temp/ccAZaaaa.s:7      *ABS*:00000001 __zero_reg__
C:\DOCUME~1\tos\LOCALS~1\Temp/ccAZaaaa.s:94     .bss:00000000 jump_to_app
C:\DOCUME~1\tos\LOCALS~1\Temp/ccAZaaaa.s:101    .text:00000000 ascii_to_bin
C:\DOCUME~1\tos\LOCALS~1\Temp/ccAZaaaa.s:132    .text:00000010 ihex_load
                            *COM*:00000080 page_data
C:\DOCUME~1\tos\LOCALS~1\Temp/ccAZaaaa.s:452    .text:000001a0 main
                            *COM*:00000004 buf_address
C:\DOCUME~1\tos\LOCALS~1\Temp/ccAZaaaa.s:692    .text:000002ec Letext

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
GetChar0
PutChar0
__stack
SerCom0Init
PutString0
Hit0
PutInt0
exit
