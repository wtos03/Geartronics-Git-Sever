
Eboot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005dc  00007000  00007000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000088  00800060  000075dc  00000670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000027c  008000e8  008000e8  000006f8  2**0
                  ALLOC
  3 .noinit       00000000  00800364  00800364  000006f8  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  000006f8  2**0
                  CONTENTS
  5 .stab         000015b4  00000000  00000000  000006f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000d3c  00000000  00000000  00001cac  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00007000 <__vectors>:
    7000:	0c 94 2a 38 	jmp	0x7054 <__ctors_end>
    7004:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    7008:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    700c:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    7010:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    7014:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    7018:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    701c:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    7020:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    7024:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    7028:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    702c:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    7030:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    7034:	0c 94 86 3a 	jmp	0x750c <__vector_13>
    7038:	0c 94 c0 3a 	jmp	0x7580 <__vector_14>
    703c:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    7040:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    7044:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    7048:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    704c:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    7050:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>

00007054 <__ctors_end>:
    7054:	11 24       	eor	r1, r1
    7056:	1f be       	out	0x3f, r1	; 63
    7058:	cf e5       	ldi	r28, 0x5F	; 95
    705a:	d8 e0       	ldi	r29, 0x08	; 8
    705c:	de bf       	out	0x3e, r29	; 62
    705e:	cd bf       	out	0x3d, r28	; 61

00007060 <__do_copy_data>:
    7060:	10 e0       	ldi	r17, 0x00	; 0
    7062:	a0 e6       	ldi	r26, 0x60	; 96
    7064:	b0 e0       	ldi	r27, 0x00	; 0
    7066:	ec ed       	ldi	r30, 0xDC	; 220
    7068:	f5 e7       	ldi	r31, 0x75	; 117
    706a:	02 c0       	rjmp	.+4      	; 0x7070 <.do_copy_data_start>

0000706c <.do_copy_data_loop>:
    706c:	05 90       	lpm	r0, Z+
    706e:	0d 92       	st	X+, r0

00007070 <.do_copy_data_start>:
    7070:	a8 3e       	cpi	r26, 0xE8	; 232
    7072:	b1 07       	cpc	r27, r17
    7074:	d9 f7       	brne	.-10     	; 0x706c <.do_copy_data_loop>

00007076 <__do_clear_bss>:
    7076:	13 e0       	ldi	r17, 0x03	; 3
    7078:	a8 ee       	ldi	r26, 0xE8	; 232
    707a:	b0 e0       	ldi	r27, 0x00	; 0
    707c:	01 c0       	rjmp	.+2      	; 0x7080 <.do_clear_bss_start>

0000707e <.do_clear_bss_loop>:
    707e:	1d 92       	st	X+, r1

00007080 <.do_clear_bss_start>:
    7080:	a4 36       	cpi	r26, 0x64	; 100
    7082:	b1 07       	cpc	r27, r17
    7084:	e1 f7       	brne	.-8      	; 0x707e <.do_clear_bss_loop>
    7086:	0c 94 19 39 	jmp	0x7232 <main>

0000708a <__bad_interrupt>:
    708a:	0c 94 00 38 	jmp	0x7000 <__vectors>

0000708e <get_hex_value>:


/* This fuction returns the hex value of the  2 consequence received ascii characters (HEX) */
uint8_t get_hex_value()
{
    708e:	cf 93       	push	r28
     uint8_t data;
	 uint8_t temp_byte;
	 
    while (!(data = uart_read()));
    7090:	0e 94 6c 3a 	call	0x74d8 <uart_read>
    7094:	88 23       	and	r24, r24
    7096:	e1 f3       	breq	.-8      	; 0x7090 <get_hex_value+0x2>
// Put here to save calling subroutine overhead	
	 if( data < 'A' )
    7098:	81 34       	cpi	r24, 0x41	; 65
    709a:	10 f4       	brcc	.+4      	; 0x70a0 <get_hex_value+0x12>
    {
	   data  -= '0';
    709c:	80 53       	subi	r24, 0x30	; 48
    709e:	01 c0       	rjmp	.+2      	; 0x70a2 <get_hex_value+0x14>
    }
    else
    {
	   data -=  55 ;
    70a0:	87 53       	subi	r24, 0x37	; 55
    }
	temp_byte = data << 4;
    70a2:	c8 2f       	mov	r28, r24
    70a4:	c2 95       	swap	r28
    70a6:	c0 7f       	andi	r28, 0xF0	; 240
	 while (!(data = uart_read()));
    70a8:	0e 94 6c 3a 	call	0x74d8 <uart_read>
    70ac:	88 23       	and	r24, r24
    70ae:	e1 f3       	breq	.-8      	; 0x70a8 <get_hex_value+0x1a>
// Put here to save calling subroutine overhead	
	 if( data < 'A' )
    70b0:	81 34       	cpi	r24, 0x41	; 65
    70b2:	10 f4       	brcc	.+4      	; 0x70b8 <get_hex_value+0x2a>
    {
	   data  -= '0';
    70b4:	80 53       	subi	r24, 0x30	; 48
    70b6:	01 c0       	rjmp	.+2      	; 0x70ba <get_hex_value+0x2c>
    }
    else
    {
	   data -=  55 ;
    70b8:	87 53       	subi	r24, 0x37	; 55
    }
	
	temp_byte |= data;
    70ba:	c8 2b       	or	r28, r24
    return temp_byte;
    
}
    70bc:	8c 2f       	mov	r24, r28
    70be:	99 27       	eor	r25, r25
    70c0:	cf 91       	pop	r28
    70c2:	08 95       	ret

000070c4 <ihex_load>:
    70c4:	9f 92       	push	r9
    70c6:	af 92       	push	r10
    70c8:	bf 92       	push	r11
    70ca:	cf 92       	push	r12
    70cc:	df 92       	push	r13
    70ce:	ef 92       	push	r14
    70d0:	ff 92       	push	r15
    70d2:	0f 93       	push	r16
    70d4:	1f 93       	push	r17
    70d6:	cf 93       	push	r28
    70d8:	98 2e       	mov	r9, r24
    70da:	bb 24       	eor	r11, r11
    70dc:	cc 24       	eor	r12, r12
    70de:	dd 24       	eor	r13, r13
    70e0:	76 01       	movw	r14, r12
    70e2:	0e 94 6c 3a 	call	0x74d8 <uart_read>
    70e6:	8d 30       	cpi	r24, 0x0D	; 13
    70e8:	e1 f3       	breq	.-8      	; 0x70e2 <ihex_load+0x1e>
    70ea:	8a 30       	cpi	r24, 0x0A	; 10
    70ec:	d1 f3       	breq	.-12     	; 0x70e2 <ihex_load+0x1e>
    70ee:	88 23       	and	r24, r24
    70f0:	c1 f3       	breq	.-16     	; 0x70e2 <ihex_load+0x1e>
    70f2:	8a 33       	cpi	r24, 0x3A	; 58
    70f4:	19 f0       	breq	.+6      	; 0x70fc <ihex_load+0x38>
    70f6:	81 e0       	ldi	r24, 0x01	; 1
    70f8:	90 e0       	ldi	r25, 0x00	; 0
    70fa:	90 c0       	rjmp	.+288    	; 0x721c <ihex_load+0x158>
    70fc:	0e 94 47 38 	call	0x708e <get_hex_value>
    7100:	08 2f       	mov	r16, r24
    7102:	0e 94 47 38 	call	0x708e <get_hex_value>
    7106:	c8 2f       	mov	r28, r24
    7108:	0e 94 47 38 	call	0x708e <get_hex_value>
    710c:	18 2f       	mov	r17, r24
    710e:	0e 94 47 38 	call	0x708e <get_hex_value>
    7112:	a8 2e       	mov	r10, r24
    7114:	c0 0f       	add	r28, r16
    7116:	c1 0f       	add	r28, r17
    7118:	c8 0f       	add	r28, r24
    711a:	10 e0       	ldi	r17, 0x00	; 0
    711c:	10 17       	cp	r17, r16
    711e:	58 f4       	brcc	.+22     	; 0x7136 <ihex_load+0x72>
    7120:	0e 94 47 38 	call	0x708e <get_hex_value>
    7124:	eb 2d       	mov	r30, r11
    7126:	ff 27       	eor	r31, r31
    7128:	e4 51       	subi	r30, 0x14	; 20
    712a:	ff 4f       	sbci	r31, 0xFF	; 255
    712c:	80 83       	st	Z, r24
    712e:	b3 94       	inc	r11
    7130:	c8 0f       	add	r28, r24
    7132:	1f 5f       	subi	r17, 0xFF	; 255
    7134:	f3 cf       	rjmp	.-26     	; 0x711c <ihex_load+0x58>
    7136:	0e 94 47 38 	call	0x708e <get_hex_value>
    713a:	c8 0f       	add	r28, r24
    713c:	19 f0       	breq	.+6      	; 0x7144 <ihex_load+0x80>
    713e:	82 e0       	ldi	r24, 0x02	; 2
    7140:	90 e0       	ldi	r25, 0x00	; 0
    7142:	6c c0       	rjmp	.+216    	; 0x721c <ihex_load+0x158>
    7144:	aa 20       	and	r10, r10
    7146:	59 f0       	breq	.+22     	; 0x715e <ihex_load+0x9a>
    7148:	b7 fc       	sbrc	r11, 7
    714a:	09 c0       	rjmp	.+18     	; 0x715e <ihex_load+0x9a>
    714c:	8f ef       	ldi	r24, 0xFF	; 255
    714e:	eb 2d       	mov	r30, r11
    7150:	ff 27       	eor	r31, r31
    7152:	e4 51       	subi	r30, 0x14	; 20
    7154:	ff 4f       	sbci	r31, 0xFF	; 255
    7156:	80 83       	st	Z, r24
    7158:	b3 94       	inc	r11
    715a:	b7 fe       	sbrs	r11, 7
    715c:	f8 cf       	rjmp	.-16     	; 0x714e <ihex_load+0x8a>
    715e:	81 e0       	ldi	r24, 0x01	; 1
    7160:	98 16       	cp	r9, r24
    7162:	09 f0       	breq	.+2      	; 0x7166 <ihex_load+0xa2>
    7164:	33 c0       	rjmp	.+102    	; 0x71cc <ihex_load+0x108>
    7166:	b7 fe       	sbrs	r11, 7
    7168:	51 c0       	rjmp	.+162    	; 0x720c <ihex_load+0x148>
    716a:	10 e0       	ldi	r17, 0x00	; 0
    716c:	b1 2e       	mov	r11, r17
    716e:	49 2d       	mov	r20, r9
    7170:	e1 2f       	mov	r30, r17
    7172:	ff 27       	eor	r31, r31
    7174:	e4 51       	subi	r30, 0x14	; 20
    7176:	ff 4f       	sbci	r31, 0xFF	; 255
    7178:	80 81       	ld	r24, Z
    717a:	99 27       	eor	r25, r25
    717c:	21 81       	ldd	r18, Z+1	; 0x01
    717e:	33 27       	eor	r19, r19
    7180:	32 2f       	mov	r19, r18
    7182:	22 27       	eor	r18, r18
    7184:	82 2b       	or	r24, r18
    7186:	93 2b       	or	r25, r19
    7188:	0c 01       	movw	r0, r24
    718a:	f6 01       	movw	r30, r12
    718c:	40 93 57 00 	sts	0x0057, r20
    7190:	e8 95       	spm
    7192:	11 24       	eor	r1, r1
    7194:	82 e0       	ldi	r24, 0x02	; 2
    7196:	90 e0       	ldi	r25, 0x00	; 0
    7198:	a0 e0       	ldi	r26, 0x00	; 0
    719a:	b0 e0       	ldi	r27, 0x00	; 0
    719c:	c8 0e       	add	r12, r24
    719e:	d9 1e       	adc	r13, r25
    71a0:	ea 1e       	adc	r14, r26
    71a2:	fb 1e       	adc	r15, r27
    71a4:	1e 5f       	subi	r17, 0xFE	; 254
    71a6:	17 ff       	sbrs	r17, 7
    71a8:	e3 cf       	rjmp	.-58     	; 0x7170 <ihex_load+0xac>
    71aa:	25 e0       	ldi	r18, 0x05	; 5
    71ac:	c6 01       	movw	r24, r12
    71ae:	80 58       	subi	r24, 0x80	; 128
    71b0:	90 40       	sbci	r25, 0x00	; 0
    71b2:	fc 01       	movw	r30, r24
    71b4:	20 93 57 00 	sts	0x0057, r18
    71b8:	e8 95       	spm
    71ba:	07 b6       	in	r0, 0x37	; 55
    71bc:	00 fc       	sbrc	r0, 0
    71be:	fd cf       	rjmp	.-6      	; 0x71ba <ihex_load+0xf6>
    71c0:	81 e1       	ldi	r24, 0x11	; 17
    71c2:	80 93 57 00 	sts	0x0057, r24
    71c6:	e8 95       	spm
    71c8:	83 e7       	ldi	r24, 0x73	; 115
    71ca:	1c c0       	rjmp	.+56     	; 0x7204 <ihex_load+0x140>
    71cc:	92 e0       	ldi	r25, 0x02	; 2
    71ce:	99 16       	cp	r9, r25
    71d0:	e9 f4       	brne	.+58     	; 0x720c <ihex_load+0x148>
    71d2:	b7 fe       	sbrs	r11, 7
    71d4:	1b c0       	rjmp	.+54     	; 0x720c <ihex_load+0x148>
    71d6:	10 e0       	ldi	r17, 0x00	; 0
    71d8:	b1 2e       	mov	r11, r17
    71da:	e1 99       	sbic	0x1c, 1	; 28
    71dc:	fe cf       	rjmp	.-4      	; 0x71da <ihex_load+0x116>
    71de:	df ba       	out	0x1f, r13	; 31
    71e0:	ce ba       	out	0x1e, r12	; 30
    71e2:	e1 2f       	mov	r30, r17
    71e4:	ff 27       	eor	r31, r31
    71e6:	e4 51       	subi	r30, 0x14	; 20
    71e8:	ff 4f       	sbci	r31, 0xFF	; 255
    71ea:	80 81       	ld	r24, Z
    71ec:	8d bb       	out	0x1d, r24	; 29
    71ee:	e2 9a       	sbi	0x1c, 2	; 28
    71f0:	e1 9a       	sbi	0x1c, 1	; 28
    71f2:	08 94       	sec
    71f4:	c1 1c       	adc	r12, r1
    71f6:	d1 1c       	adc	r13, r1
    71f8:	e1 1c       	adc	r14, r1
    71fa:	f1 1c       	adc	r15, r1
    71fc:	1f 5f       	subi	r17, 0xFF	; 255
    71fe:	17 ff       	sbrs	r17, 7
    7200:	ec cf       	rjmp	.-40     	; 0x71da <ihex_load+0x116>
    7202:	89 e7       	ldi	r24, 0x79	; 121
    7204:	88 bb       	out	0x18, r24	; 24
    7206:	8a e2       	ldi	r24, 0x2A	; 42
    7208:	0e 94 e2 39 	call	0x73c4 <uart_write_char>
    720c:	ab 98       	cbi	0x15, 3	; 21
    720e:	ac 9a       	sbi	0x15, 4	; 21
    7210:	a1 e0       	ldi	r26, 0x01	; 1
    7212:	aa 16       	cp	r10, r26
    7214:	09 f0       	breq	.+2      	; 0x7218 <ihex_load+0x154>
    7216:	65 cf       	rjmp	.-310    	; 0x70e2 <ihex_load+0x1e>
    7218:	80 e0       	ldi	r24, 0x00	; 0
    721a:	90 e0       	ldi	r25, 0x00	; 0
    721c:	cf 91       	pop	r28
    721e:	1f 91       	pop	r17
    7220:	0f 91       	pop	r16
    7222:	ff 90       	pop	r15
    7224:	ef 90       	pop	r14
    7226:	df 90       	pop	r13
    7228:	cf 90       	pop	r12
    722a:	bf 90       	pop	r11
    722c:	af 90       	pop	r10
    722e:	9f 90       	pop	r9
    7230:	08 95       	ret

00007232 <main>:
    7232:	cf e5       	ldi	r28, 0x5F	; 95
    7234:	d8 e0       	ldi	r29, 0x08	; 8
    7236:	de bf       	out	0x3e, r29	; 62
    7238:	cd bf       	out	0x3d, r28	; 61
    723a:	11 e0       	ldi	r17, 0x01	; 1
    723c:	f8 94       	cli
    723e:	c1 e0       	ldi	r28, 0x01	; 1
    7240:	cb bf       	out	0x3b, r28	; 59
    7242:	82 e0       	ldi	r24, 0x02	; 2
    7244:	8b bf       	out	0x3b, r24	; 59
    7246:	8f ef       	ldi	r24, 0xFF	; 255
    7248:	87 bb       	out	0x17, r24	; 23
    724a:	88 e1       	ldi	r24, 0x18	; 24
    724c:	84 bb       	out	0x14, r24	; 20
    724e:	85 b3       	in	r24, 0x15	; 21
    7250:	84 62       	ori	r24, 0x24	; 36
    7252:	85 bb       	out	0x15, r24	; 21
    7254:	49 e1       	ldi	r20, 0x19	; 25
    7256:	50 e0       	ldi	r21, 0x00	; 0
    7258:	66 e8       	ldi	r22, 0x86	; 134
    725a:	88 e9       	ldi	r24, 0x98	; 152
    725c:	0e 94 5a 3a 	call	0x74b4 <uart_init>
    7260:	e0 e0       	ldi	r30, 0x00	; 0
    7262:	f0 e0       	ldi	r31, 0x00	; 0
    7264:	84 91       	lpm	r24, Z
    7266:	8f 3f       	cpi	r24, 0xFF	; 255
    7268:	09 f0       	breq	.+2      	; 0x726c <main+0x3a>
    726a:	10 e0       	ldi	r17, 0x00	; 0
    726c:	83 b3       	in	r24, 0x13	; 19
    726e:	80 95       	com	r24
    7270:	84 72       	andi	r24, 0x24	; 36
    7272:	09 f0       	breq	.+2      	; 0x7276 <main+0x44>
    7274:	1c 2f       	mov	r17, r28
    7276:	80 e6       	ldi	r24, 0x60	; 96
    7278:	90 e0       	ldi	r25, 0x00	; 0
    727a:	0e 94 70 3a 	call	0x74e0 <uart_write_str>
    727e:	8c e7       	ldi	r24, 0x7C	; 124
    7280:	88 bb       	out	0x18, r24	; 24
    7282:	ab 98       	cbi	0x15, 3	; 21
    7284:	ac 9a       	sbi	0x15, 4	; 21
    7286:	11 23       	and	r17, r17
    7288:	09 f4       	brne	.+2      	; 0x728c <main+0x5a>
    728a:	76 c0       	rjmp	.+236    	; 0x7378 <main+0x146>
    728c:	0e 94 6c 3a 	call	0x74d8 <uart_read>
    7290:	88 23       	and	r24, r24
    7292:	c9 f3       	breq	.-14     	; 0x7286 <main+0x54>
    7294:	99 27       	eor	r25, r25
    7296:	80 37       	cpi	r24, 0x70	; 112
    7298:	91 05       	cpc	r25, r1
    729a:	69 f0       	breq	.+26     	; 0x72b6 <main+0x84>
    729c:	81 37       	cpi	r24, 0x71	; 113
    729e:	91 05       	cpc	r25, r1
    72a0:	2c f4       	brge	.+10     	; 0x72ac <main+0x7a>
    72a2:	85 36       	cpi	r24, 0x65	; 101
    72a4:	91 05       	cpc	r25, r1
    72a6:	09 f4       	brne	.+2      	; 0x72aa <main+0x78>
    72a8:	41 c0       	rjmp	.+130    	; 0x732c <main+0xfa>
    72aa:	61 c0       	rjmp	.+194    	; 0x736e <main+0x13c>
    72ac:	88 37       	cpi	r24, 0x78	; 120
    72ae:	91 05       	cpc	r25, r1
    72b0:	09 f4       	brne	.+2      	; 0x72b4 <main+0x82>
    72b2:	52 c0       	rjmp	.+164    	; 0x7358 <main+0x126>
    72b4:	5c c0       	rjmp	.+184    	; 0x736e <main+0x13c>
    72b6:	10 92 6c 01 	sts	0x016C, r1
    72ba:	10 92 6d 01 	sts	0x016D, r1
    72be:	10 92 6e 01 	sts	0x016E, r1
    72c2:	10 92 6f 01 	sts	0x016F, r1
    72c6:	23 e0       	ldi	r18, 0x03	; 3
    72c8:	80 91 6c 01 	lds	r24, 0x016C
    72cc:	90 91 6d 01 	lds	r25, 0x016D
    72d0:	fc 01       	movw	r30, r24
    72d2:	20 93 57 00 	sts	0x0057, r18
    72d6:	e8 95       	spm
    72d8:	07 b6       	in	r0, 0x37	; 55
    72da:	00 fc       	sbrc	r0, 0
    72dc:	fd cf       	rjmp	.-6      	; 0x72d8 <main+0xa6>
    72de:	80 91 6c 01 	lds	r24, 0x016C
    72e2:	90 91 6d 01 	lds	r25, 0x016D
    72e6:	a0 91 6e 01 	lds	r26, 0x016E
    72ea:	b0 91 6f 01 	lds	r27, 0x016F
    72ee:	80 58       	subi	r24, 0x80	; 128
    72f0:	9f 4f       	sbci	r25, 0xFF	; 255
    72f2:	af 4f       	sbci	r26, 0xFF	; 255
    72f4:	bf 4f       	sbci	r27, 0xFF	; 255
    72f6:	80 93 6c 01 	sts	0x016C, r24
    72fa:	90 93 6d 01 	sts	0x016D, r25
    72fe:	a0 93 6e 01 	sts	0x016E, r26
    7302:	b0 93 6f 01 	sts	0x016F, r27
    7306:	80 50       	subi	r24, 0x00	; 0
    7308:	90 47       	sbci	r25, 0x70	; 112
    730a:	a0 40       	sbci	r26, 0x00	; 0
    730c:	b0 40       	sbci	r27, 0x00	; 0
    730e:	e0 f2       	brcs	.-72     	; 0x72c8 <main+0x96>
    7310:	10 92 6c 01 	sts	0x016C, r1
    7314:	10 92 6d 01 	sts	0x016D, r1
    7318:	10 92 6e 01 	sts	0x016E, r1
    731c:	10 92 6f 01 	sts	0x016F, r1
    7320:	81 e7       	ldi	r24, 0x71	; 113
    7322:	90 e0       	ldi	r25, 0x00	; 0
    7324:	0e 94 70 3a 	call	0x74e0 <uart_write_str>
    7328:	81 e0       	ldi	r24, 0x01	; 1
    732a:	05 c0       	rjmp	.+10     	; 0x7336 <main+0x104>
    732c:	8e e8       	ldi	r24, 0x8E	; 142
    732e:	90 e0       	ldi	r25, 0x00	; 0
    7330:	0e 94 70 3a 	call	0x74e0 <uart_write_str>
    7334:	82 e0       	ldi	r24, 0x02	; 2
    7336:	0e 94 62 38 	call	0x70c4 <ihex_load>
    733a:	c8 2f       	mov	r28, r24
    733c:	88 23       	and	r24, r24
    733e:	e1 f0       	breq	.+56     	; 0x7378 <main+0x146>
    7340:	88 ea       	ldi	r24, 0xA8	; 168
    7342:	90 e0       	ldi	r25, 0x00	; 0
    7344:	0e 94 70 3a 	call	0x74e0 <uart_write_str>
    7348:	8c 2f       	mov	r24, r28
    734a:	80 5d       	subi	r24, 0xD0	; 208
    734c:	0e 94 e2 39 	call	0x73c4 <uart_write_char>
    7350:	8a e0       	ldi	r24, 0x0A	; 10
    7352:	0e 94 e2 39 	call	0x73c4 <uart_write_char>
    7356:	97 cf       	rjmp	.-210    	; 0x7286 <main+0x54>
    7358:	81 e0       	ldi	r24, 0x01	; 1
    735a:	8b bf       	out	0x3b, r24	; 59
    735c:	8b b7       	in	r24, 0x3b	; 59
    735e:	8c 7f       	andi	r24, 0xFC	; 252
    7360:	8b bf       	out	0x3b, r24	; 59
    7362:	e0 91 e8 00 	lds	r30, 0x00E8
    7366:	f0 91 e9 00 	lds	r31, 0x00E9
    736a:	09 95       	icall
    736c:	8c cf       	rjmp	.-232    	; 0x7286 <main+0x54>
    736e:	8d ea       	ldi	r24, 0xAD	; 173
    7370:	90 e0       	ldi	r25, 0x00	; 0
    7372:	0e 94 70 3a 	call	0x74e0 <uart_write_str>
    7376:	87 cf       	rjmp	.-242    	; 0x7286 <main+0x54>
    7378:	81 e0       	ldi	r24, 0x01	; 1
    737a:	8b bf       	out	0x3b, r24	; 59
    737c:	8b b7       	in	r24, 0x3b	; 59
    737e:	8c 7f       	andi	r24, 0xFC	; 252
    7380:	8b bf       	out	0x3b, r24	; 59
    7382:	e0 91 e8 00 	lds	r30, 0x00E8
    7386:	f0 91 e9 00 	lds	r31, 0x00E9
    738a:	09 95       	icall
    738c:	80 e0       	ldi	r24, 0x00	; 0
    738e:	90 e0       	ldi	r25, 0x00	; 0
    7390:	0c 94 ed 3a 	jmp	0x75da <_exit>

00007394 <uart_put_TX>:
	\author wichai tossamartvorakul  wichi@geartronics.net
	\sa	 <see also two name joined by ::>
*/     
uint8_t uart_put_TX ( uint8_t ch)
{
    7394:	98 2f       	mov	r25, r24
// If exceed buffer do nothing until buffer is flushed
    if ((g_tx_ptr > (MAX_BUFF-1))) 
    7396:	80 91 ea 00 	lds	r24, 0x00EA
    739a:	8a 3f       	cpi	r24, 0xFA	; 250
    739c:	18 f0       	brcs	.+6      	; 0x73a4 <uart_put_TX+0x10>
    {
		return UART_BUFFER_FULL;   // No increase pointer
    739e:	82 e0       	ldi	r24, 0x02	; 2
    73a0:	90 e0       	ldi	r25, 0x00	; 0
    73a2:	08 95       	ret
    }
	g_tx_buff[g_tx_ptr]= ch;
    73a4:	e8 2f       	mov	r30, r24
    73a6:	ff 27       	eor	r31, r31
    73a8:	e6 59       	subi	r30, 0x96	; 150
    73aa:	fd 4f       	sbci	r31, 0xFD	; 253
    73ac:	90 83       	st	Z, r25
	g_tx_ptr++;
    73ae:	8f 5f       	subi	r24, 0xFF	; 255
    73b0:	80 93 ea 00 	sts	0x00EA, r24
	g_tx_buff[g_tx_ptr] = 0;    // Put null character at the end
    73b4:	e8 2f       	mov	r30, r24
    73b6:	ff 27       	eor	r31, r31
    73b8:	e6 59       	subi	r30, 0x96	; 150
    73ba:	fd 4f       	sbci	r31, 0xFD	; 253
    73bc:	10 82       	st	Z, r1
	return 0;
    73be:	80 e0       	ldi	r24, 0x00	; 0
    73c0:	90 e0       	ldi	r25, 0x00	; 0
}
    73c2:	08 95       	ret

000073c4 <uart_write_char>:


/*!	\brief  Get character from TX buffer to send and shift left all characters
	\param  None  
	\return Character to send 
	\par Port/Periheral Usage 
	\n   TX,RX
	\par Theory of Operation   
	\n   Get characters from buffer(FIFO) and shift all characters to left 
 	\par Pseudo code
	\n   Check whether there is data in TX buffer
	\n	 If yes  get characters  from TX buffer
	\n
	\note   Internal function  Do not call from outside
	\bug    <bug to fix>
	\author wichai tossamartvorakul  wichi@geartronics.net
	\sa	 <see also two name joined by ::>
*/     
 
uint8_t uart_get_TX (void)
{
   uint8_t i,j,ch =0;
   
   if ( g_tx_ptr)   // There are data in TX buffer
   {
		i  =  g_tx_ptr;
		g_tx_ptr--;
		ch =  g_tx_buff[0];   // Start from 0 FIFO
		j = 0;
// Move left all characters Need to rewrite !!!
        while (i)
		{
	      g_tx_buff[j] =  g_tx_buff[j+1];
	      j++;
	 	  i--;
		}
		return ch;
   }
   return 0;
}



 

/*!	\brief  Show debug value for short integer
	\param  Value to show (16 bits)
	\n		radix to show 10, 16,2	
	\return none
	\par Port/Periheral Usage 
	\n   TX,RX
	\par Theory of Operation   
	\n   Convert value to string and show on UART port
	\par Pseudo code
	\n   Convert long integer to string with  
	\note    
	\bug    <bug to fix>

	\author wichai tossamartvorakul  wichi@geartronics.net
	\sa	 <see also two name joined by ::>
*/ 
#ifdef DEBUG    
void  debug_value ( int16_t value, uint8_t radix)
{
   uint8_t  buff[20];
  
   itoa (value,buff, radix);
   uart_write_str ( buff);
}

 
/*!	\brief  Show debug value in long format
	\param  Value to show (32 bits)
	\n		radix  to show  10, 16,2
	\return None
	\par Port/Periheral Usage 
	\n  TX,RX
	\par Theory of Operation   
	\n   Convert value to string and show on UART port
	\par Pseudo code
	\n   Convert long integer to string with radix specified
	\n	 Write string to UART port
	\note   (Pseudo code)
	\bug    <bug to fix>

	\author wichai tossamartvorakul  wichi@geartronics.net
	\sa	 <see also two name joined by ::>
*/     
 
void  debug_lvalue ( int32_t value, uint8_t radix)
{
   uint8_t  buff[40];
   
   ltoa (value,buff, radix);
   uart_write_str ( buff);
}
 
#endif 

/*!	\brief  Initial serial Port UART
	\param  mode  =  TX/RX  Mode of operation  (Intrrupt/Polling) Enable RX, TX
			frame =  Set Data frame  8 bits  parity bits, stop bit
			baud  =  Baud rate 
			These parameter are predefined in avr_serial.h for easy set up
 	\return None
	\par Port/Periheral Usage 
	\n   TX, RX
	\par Theory of Operation   
	\n    Initial control register to set up for baud rate, data frame and mode of operations
	\n    For receive we are using interrupt for RX and TX 
	\par Pseudo code
	\n    Set and initial register for UART mode
	\note Future enhancement for error checking and overrun detect 
	\bug    <bug to fix>

	\author wichai tossamartvorakul  wichi@geartronics.net
	\sa	 <see also two name joined by ::>
*/     
void uart_init(uint8_t mode,uint8_t frame, uint16_t baud)
{
 
// Initialize UART  
    
    UCSRC  = frame;    // 8 bit non parity  1 stop bit
    UCSRB  = mode;    // Enable RX Interrupt and Enable TX, RX pin
	UBRRL  = (uint8_t) baud;
	UBRRH  = (uint8_t)(baud >>8); 
	g_rx_ptr = 0;
	g_tx_ptr = 0;
	receive_flag = ON;
    send_flag = ON;
    sei();
}


/*!	\brief  Get character from RX buffer
	\param  None  
	\return Read character from buffer  0 if none characters
	\par Port/Periheral Usage 
	\n   TX,RX
	\par Theory of Operation   
	\n    Read character from RX buffer reside inside this module
	\par Pseudo code
	\n
	\note 
	\bug    <bug to fix>

	\author wichai tossamartvorakul  wichi@geartronics.net
	\sa	 <see also two name joined by ::>
*/     
uint8_t uart_read(void)
{
    uint8_t ch;
	ch = uart_get_RX();
    return ch ;
}


/*!	\brief  Write character
	\param  None  
	\return None
	\par Port/Periheral Usage 
	\n   E_PB0,E_PB3
	\par Theory of Operation   
	\n
	\par Pseudo code
	\n
	\note   (Pseudo code)
	\bug    <bug to fix>

	\author wichai tossamartvorakul  wichi@geartronics.net
	\sa	 <see also two name joined by ::>
*/     
uint8_t uart_write_char(uint8_t c)
{
    73c4:	cf 93       	push	r28
    73c6:	c8 2f       	mov	r28, r24
   while (UART_BUFFER_FULL == uart_put_TX(c));  //If buffer full wait until buffer clear
    73c8:	8c 2f       	mov	r24, r28
    73ca:	0e 94 ca 39 	call	0x7394 <uart_put_TX>
    73ce:	82 30       	cpi	r24, 0x02	; 2
    73d0:	d9 f3       	breq	.-10     	; 0x73c8 <uart_write_char+0x4>
// Enable interrupt UART Data Register empty
  UCSRB  |=  (1<<UDRIE);	
    73d2:	55 9a       	sbi	0x0a, 5	; 10
   return 0;
}
    73d4:	80 e0       	ldi	r24, 0x00	; 0
    73d6:	90 e0       	ldi	r25, 0x00	; 0
    73d8:	cf 91       	pop	r28
    73da:	08 95       	ret

000073dc <uart_get_RX>:
    73dc:	cf 93       	push	r28
    73de:	80 91 eb 00 	lds	r24, 0x00EB
    73e2:	88 23       	and	r24, r24
    73e4:	19 f1       	breq	.+70     	; 0x742c <uart_get_RX+0x50>
    73e6:	c0 91 70 01 	lds	r28, 0x0170
    73ea:	98 2f       	mov	r25, r24
    73ec:	91 50       	subi	r25, 0x01	; 1
    73ee:	90 93 eb 00 	sts	0x00EB, r25
    73f2:	9f 5f       	subi	r25, 0xFF	; 255
    73f4:	20 e0       	ldi	r18, 0x00	; 0
    73f6:	e2 2f       	mov	r30, r18
    73f8:	ff 27       	eor	r31, r31
    73fa:	e0 59       	subi	r30, 0x90	; 144
    73fc:	fe 4f       	sbci	r31, 0xFE	; 254
    73fe:	81 81       	ldd	r24, Z+1	; 0x01
    7400:	80 83       	st	Z, r24
    7402:	2f 5f       	subi	r18, 0xFF	; 255
    7404:	91 50       	subi	r25, 0x01	; 1
    7406:	b9 f7       	brne	.-18     	; 0x73f6 <uart_get_RX+0x1a>
    7408:	80 91 eb 00 	lds	r24, 0x00EB
    740c:	8a 30       	cpi	r24, 0x0A	; 10
    740e:	58 f4       	brcc	.+22     	; 0x7426 <uart_get_RX+0x4a>
    7410:	80 91 e6 00 	lds	r24, 0x00E6
    7414:	88 23       	and	r24, r24
    7416:	39 f4       	brne	.+14     	; 0x7426 <uart_get_RX+0x4a>
    7418:	81 e0       	ldi	r24, 0x01	; 1
    741a:	80 93 e6 00 	sts	0x00E6, r24
    741e:	81 e1       	ldi	r24, 0x11	; 17
    7420:	0e 94 e2 39 	call	0x73c4 <uart_write_char>
    7424:	57 9a       	sbi	0x0a, 7	; 10
    7426:	8c 2f       	mov	r24, r28
    7428:	99 27       	eor	r25, r25
    742a:	02 c0       	rjmp	.+4      	; 0x7430 <uart_get_RX+0x54>
    742c:	80 e0       	ldi	r24, 0x00	; 0
    742e:	90 e0       	ldi	r25, 0x00	; 0
    7430:	cf 91       	pop	r28
    7432:	08 95       	ret

00007434 <uart_put_RX>:
    7434:	98 2f       	mov	r25, r24
    7436:	80 91 eb 00 	lds	r24, 0x00EB
    743a:	8a 3f       	cpi	r24, 0xFA	; 250
    743c:	68 f4       	brcc	.+26     	; 0x7458 <uart_put_RX+0x24>
    743e:	e8 2f       	mov	r30, r24
    7440:	ff 27       	eor	r31, r31
    7442:	e0 59       	subi	r30, 0x90	; 144
    7444:	fe 4f       	sbci	r31, 0xFE	; 254
    7446:	90 83       	st	Z, r25
    7448:	8f 5f       	subi	r24, 0xFF	; 255
    744a:	80 93 eb 00 	sts	0x00EB, r24
    744e:	e8 2f       	mov	r30, r24
    7450:	ff 27       	eor	r31, r31
    7452:	e0 59       	subi	r30, 0x90	; 144
    7454:	fe 4f       	sbci	r31, 0xFE	; 254
    7456:	10 82       	st	Z, r1
    7458:	80 91 eb 00 	lds	r24, 0x00EB
    745c:	88 3c       	cpi	r24, 0xC8	; 200
    745e:	18 f4       	brcc	.+6      	; 0x7466 <uart_put_RX+0x32>
    7460:	80 e0       	ldi	r24, 0x00	; 0
    7462:	90 e0       	ldi	r25, 0x00	; 0
    7464:	08 95       	ret
    7466:	80 91 e6 00 	lds	r24, 0x00E6
    746a:	81 30       	cpi	r24, 0x01	; 1
    746c:	29 f4       	brne	.+10     	; 0x7478 <uart_put_RX+0x44>
    746e:	83 e1       	ldi	r24, 0x13	; 19
    7470:	0e 94 e2 39 	call	0x73c4 <uart_write_char>
    7474:	10 92 e6 00 	sts	0x00E6, r1
    7478:	82 e0       	ldi	r24, 0x02	; 2
    747a:	90 e0       	ldi	r25, 0x00	; 0
    747c:	08 95       	ret

0000747e <uart_get_TX>:
    747e:	80 91 ea 00 	lds	r24, 0x00EA
    7482:	88 23       	and	r24, r24
    7484:	a1 f0       	breq	.+40     	; 0x74ae <uart_get_TX+0x30>
    7486:	28 2f       	mov	r18, r24
    7488:	21 50       	subi	r18, 0x01	; 1
    748a:	20 93 ea 00 	sts	0x00EA, r18
    748e:	2f 5f       	subi	r18, 0xFF	; 255
    7490:	90 91 6a 02 	lds	r25, 0x026A
    7494:	30 e0       	ldi	r19, 0x00	; 0
    7496:	e3 2f       	mov	r30, r19
    7498:	ff 27       	eor	r31, r31
    749a:	e6 59       	subi	r30, 0x96	; 150
    749c:	fd 4f       	sbci	r31, 0xFD	; 253
    749e:	81 81       	ldd	r24, Z+1	; 0x01
    74a0:	80 83       	st	Z, r24
    74a2:	3f 5f       	subi	r19, 0xFF	; 255
    74a4:	21 50       	subi	r18, 0x01	; 1
    74a6:	b9 f7       	brne	.-18     	; 0x7496 <uart_get_TX+0x18>
    74a8:	89 2f       	mov	r24, r25
    74aa:	99 27       	eor	r25, r25
    74ac:	08 95       	ret
    74ae:	80 e0       	ldi	r24, 0x00	; 0
    74b0:	90 e0       	ldi	r25, 0x00	; 0
    74b2:	08 95       	ret

000074b4 <uart_init>:
    74b4:	38 2f       	mov	r19, r24
    74b6:	60 bd       	out	0x20, r22	; 32
    74b8:	3a b9       	out	0x0a, r19	; 10
    74ba:	49 b9       	out	0x09, r20	; 9
    74bc:	85 2f       	mov	r24, r21
    74be:	99 27       	eor	r25, r25
    74c0:	80 bd       	out	0x20, r24	; 32
    74c2:	10 92 eb 00 	sts	0x00EB, r1
    74c6:	10 92 ea 00 	sts	0x00EA, r1
    74ca:	81 e0       	ldi	r24, 0x01	; 1
    74cc:	80 93 e6 00 	sts	0x00E6, r24
    74d0:	80 93 e5 00 	sts	0x00E5, r24
    74d4:	78 94       	sei
    74d6:	08 95       	ret

000074d8 <uart_read>:
    74d8:	0e 94 ee 39 	call	0x73dc <uart_get_RX>
    74dc:	99 27       	eor	r25, r25
    74de:	08 95       	ret

000074e0 <uart_write_str>:



/*!	\brief   Transmit string to UART1
	\param   Pointer to String  
	\return None
	\par Port/Periheral Usage 
	\n   TX,RX
	\par Theory of Operation   
	\n   Write each characters pointed by string pointer to UART until end of string
	\par Pseudo code
	\n    Write each char until NULL string found
	\n	  Send CR + LF for new line
	\note    
	\bug    <bug to fix>

	\author wichai tossamartvorakul  wichi@geartronics.net
	\sa	 <see also two name joined by ::>
*/     
void uart_write_str(const uint8_t *s)
{
    74e0:	cf 93       	push	r28
    74e2:	df 93       	push	r29
    74e4:	ec 01       	movw	r28, r24
 
    while (*s) 
    {
		uart_write_char(*s);
	    if (*s ==  0x0A)
		{
			uart_write_char(0x0D); // CR
//			uart_write_char(0x0A); // LF
		}
		s++;
    74e6:	88 81       	ld	r24, Y
    74e8:	88 23       	and	r24, r24
    74ea:	69 f0       	breq	.+26     	; 0x7506 <uart_write_str+0x26>
    74ec:	88 81       	ld	r24, Y
    74ee:	0e 94 e2 39 	call	0x73c4 <uart_write_char>
    74f2:	88 81       	ld	r24, Y
    74f4:	8a 30       	cpi	r24, 0x0A	; 10
    74f6:	19 f4       	brne	.+6      	; 0x74fe <uart_write_str+0x1e>
    74f8:	8d e0       	ldi	r24, 0x0D	; 13
    74fa:	0e 94 e2 39 	call	0x73c4 <uart_write_char>
    74fe:	21 96       	adiw	r28, 0x01	; 1
    7500:	88 81       	ld	r24, Y
    7502:	88 23       	and	r24, r24
    7504:	99 f7       	brne	.-26     	; 0x74ec <uart_write_str+0xc>
    7506:	df 91       	pop	r29
    7508:	cf 91       	pop	r28
    750a:	08 95       	ret

0000750c <__vector_13>:
	}
	
}


/*!	\brief  Interrupt handler for RX 
	\param     
	\return Rx characters put in buffer
	\par Port/Periheral Usage 
	\n   TX,RX
	\par Theory of Operation   
	\n    
	\par Pseudo code
	\n   Put each received characters in buffer
	\note  
	\bug  <bug to fix>

	\author wichai tossamartvorakul  wichi@geartronics.net
	\sa	 <see also two name joined by ::>
*/     
/* UART receiver ready
*/

SIGNAL(SIG_UART_RECV)
{  
    750c:	1f 92       	push	r1
    750e:	0f 92       	push	r0
    7510:	0f b6       	in	r0, 0x3f	; 63
    7512:	0f 92       	push	r0
    7514:	11 24       	eor	r1, r1
    7516:	2f 93       	push	r18
    7518:	3f 93       	push	r19
    751a:	4f 93       	push	r20
    751c:	5f 93       	push	r21
    751e:	6f 93       	push	r22
    7520:	7f 93       	push	r23
    7522:	8f 93       	push	r24
    7524:	9f 93       	push	r25
    7526:	af 93       	push	r26
    7528:	bf 93       	push	r27
    752a:	ef 93       	push	r30
    752c:	ff 93       	push	r31
   uint8_t ch;
   uint8_t status;
   
   
   ch =  UDR;
    752e:	8c b1       	in	r24, 0x0c	; 12
   if (ch == XOFF)
    7530:	83 31       	cpi	r24, 0x13	; 19
    7532:	19 f4       	brne	.+6      	; 0x753a <__vector_13+0x2e>
   {
      send_flag = OFF;
    7534:	10 92 e5 00 	sts	0x00E5, r1
	  return;
    7538:	12 c0       	rjmp	.+36     	; 0x755e <__vector_13+0x52>
   }
   if (ch == XON)
    753a:	81 31       	cpi	r24, 0x11	; 17
    753c:	21 f4       	brne	.+8      	; 0x7546 <__vector_13+0x3a>
   {
      send_flag = ON;
    753e:	81 e0       	ldi	r24, 0x01	; 1
    7540:	80 93 e5 00 	sts	0x00E5, r24
	  return;
    7544:	0c c0       	rjmp	.+24     	; 0x755e <__vector_13+0x52>
   }
   status = uart_put_RX (ch);    // Should not use UDR here to avoid characters missing
    7546:	0e 94 1a 3a 	call	0x7434 <uart_put_RX>
   if (status == UART_BUFFER_FULL)
    754a:	82 30       	cpi	r24, 0x02	; 2
    754c:	41 f4       	brne	.+16     	; 0x755e <__vector_13+0x52>
   {
   // Flush data
 
      while ( UCSRA & (1 << RXC))
	   {
	      ch = UDR;
		  uart_put_RX(ch);
    754e:	5f 9b       	sbis	0x0b, 7	; 11
    7550:	05 c0       	rjmp	.+10     	; 0x755c <__vector_13+0x50>
    7552:	8c b1       	in	r24, 0x0c	; 12
    7554:	0e 94 1a 3a 	call	0x7434 <uart_put_RX>
    7558:	5f 99       	sbic	0x0b, 7	; 11
    755a:	fb cf       	rjmp	.-10     	; 0x7552 <__vector_13+0x46>
	   }
   // Disable RX interrupt
		UCSRB &=  ~(1<< RXCIE);
    755c:	57 98       	cbi	0x0a, 7	; 10
    755e:	ff 91       	pop	r31
    7560:	ef 91       	pop	r30
    7562:	bf 91       	pop	r27
    7564:	af 91       	pop	r26
    7566:	9f 91       	pop	r25
    7568:	8f 91       	pop	r24
    756a:	7f 91       	pop	r23
    756c:	6f 91       	pop	r22
    756e:	5f 91       	pop	r21
    7570:	4f 91       	pop	r20
    7572:	3f 91       	pop	r19
    7574:	2f 91       	pop	r18
    7576:	0f 90       	pop	r0
    7578:	0f be       	out	0x3f, r0	; 63
    757a:	0f 90       	pop	r0
    757c:	1f 90       	pop	r1
    757e:	18 95       	reti

00007580 <__vector_14>:

//      uart_write_char ('*'); 
   }

}
 
 

/*!	\brief   Interrupt service routine for UART TX Data Register Empty interrupt
	\n		 Called when the UART is ready to transmit the next byte
	\param   Pointer to String  
	\return None
	\par Port/Periheral Usage 
	\n   TX,RX
	\par Theory of Operation   
	\n   When TX data register is empty to send the next characters. This routine will
	\n   activate and the characters will be read from TX buffer until end of text. 
	\n   If end of characers, this interrupt will be disable.
	\par Pseudo code
	\n   Send characters from TX buffer. If null char had found disable interrupt to avoid 
	\n   repeat interrupt call
	\note    
	\bug    Send too fast get garbage

	\author wichai tossamartvorakul  wichi@geartronics.net
	\sa	 <see also two name joined by ::>
*/     
 
SIGNAL(SIG_UART_DATA)
{ 
    7580:	1f 92       	push	r1
    7582:	0f 92       	push	r0
    7584:	0f b6       	in	r0, 0x3f	; 63
    7586:	0f 92       	push	r0
    7588:	11 24       	eor	r1, r1
    758a:	2f 93       	push	r18
    758c:	3f 93       	push	r19
    758e:	4f 93       	push	r20
    7590:	5f 93       	push	r21
    7592:	6f 93       	push	r22
    7594:	7f 93       	push	r23
    7596:	8f 93       	push	r24
    7598:	9f 93       	push	r25
    759a:	af 93       	push	r26
    759c:	bf 93       	push	r27
    759e:	ef 93       	push	r30
    75a0:	ff 93       	push	r31
    uint8_t  ch;
	if ( send_flag == ON)
    75a2:	80 91 e5 00 	lds	r24, 0x00E5
    75a6:	81 30       	cpi	r24, 0x01	; 1
    75a8:	39 f4       	brne	.+14     	; 0x75b8 <__vector_14+0x38>
	{
		if ((ch = uart_get_TX()))  //Send until end of TX
    75aa:	0e 94 3f 3a 	call	0x747e <uart_get_TX>
    75ae:	88 23       	and	r24, r24
    75b0:	11 f0       	breq	.+4      	; 0x75b6 <__vector_14+0x36>
		{
			UDR = ch;
    75b2:	8c b9       	out	0x0c, r24	; 12
    75b4:	01 c0       	rjmp	.+2      	; 0x75b8 <__vector_14+0x38>
		}	
		else 
// If there are no character,  disable interrupt to avoid repeat call again 
		{
			UCSRB &=  ~(1<<UDRIE);
    75b6:	55 98       	cbi	0x0a, 5	; 10
    75b8:	ff 91       	pop	r31
    75ba:	ef 91       	pop	r30
    75bc:	bf 91       	pop	r27
    75be:	af 91       	pop	r26
    75c0:	9f 91       	pop	r25
    75c2:	8f 91       	pop	r24
    75c4:	7f 91       	pop	r23
    75c6:	6f 91       	pop	r22
    75c8:	5f 91       	pop	r21
    75ca:	4f 91       	pop	r20
    75cc:	3f 91       	pop	r19
    75ce:	2f 91       	pop	r18
    75d0:	0f 90       	pop	r0
    75d2:	0f be       	out	0x3f, r0	; 63
    75d4:	0f 90       	pop	r0
    75d6:	1f 90       	pop	r1
    75d8:	18 95       	reti

000075da <_exit>:
    75da:	ff cf       	rjmp	.-2      	; 0x75da <_exit>
