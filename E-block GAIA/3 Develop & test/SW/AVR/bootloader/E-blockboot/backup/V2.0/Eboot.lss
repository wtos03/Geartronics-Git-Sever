
Eboot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000584  00007000  00007000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00007584  00000618  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000027c  00800098  00800098  00000650  2**0
                  ALLOC
  3 .noinit       00000000  00800314  00800314  00000650  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000650  2**0
                  CONTENTS
  5 .stab         000014ac  00000000  00000000  00000650  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000d42  00000000  00000000  00001afc  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00007000 <__vectors>:
    7000:	0c 94 2a 38 	jmp	0x7054 <__ctors_end>
    7004:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    7008:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    700c:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    7010:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    7014:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    7018:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    701c:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    7020:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    7024:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    7028:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    702c:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    7030:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    7034:	0c 94 5a 3a 	jmp	0x74b4 <__vector_13>
    7038:	0c 94 94 3a 	jmp	0x7528 <__vector_14>
    703c:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    7040:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    7044:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    7048:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    704c:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>
    7050:	0c 94 45 38 	jmp	0x708a <__bad_interrupt>

00007054 <__ctors_end>:
    7054:	11 24       	eor	r1, r1
    7056:	1f be       	out	0x3f, r1	; 63
    7058:	cf e5       	ldi	r28, 0x5F	; 95
    705a:	d8 e0       	ldi	r29, 0x08	; 8
    705c:	de bf       	out	0x3e, r29	; 62
    705e:	cd bf       	out	0x3d, r28	; 61

00007060 <__do_copy_data>:
    7060:	10 e0       	ldi	r17, 0x00	; 0
    7062:	a0 e6       	ldi	r26, 0x60	; 96
    7064:	b0 e0       	ldi	r27, 0x00	; 0
    7066:	e4 e8       	ldi	r30, 0x84	; 132
    7068:	f5 e7       	ldi	r31, 0x75	; 117
    706a:	02 c0       	rjmp	.+4      	; 0x7070 <.do_copy_data_start>

0000706c <.do_copy_data_loop>:
    706c:	05 90       	lpm	r0, Z+
    706e:	0d 92       	st	X+, r0

00007070 <.do_copy_data_start>:
    7070:	a8 39       	cpi	r26, 0x98	; 152
    7072:	b1 07       	cpc	r27, r17
    7074:	d9 f7       	brne	.-10     	; 0x706c <.do_copy_data_loop>

00007076 <__do_clear_bss>:
    7076:	13 e0       	ldi	r17, 0x03	; 3
    7078:	a8 e9       	ldi	r26, 0x98	; 152
    707a:	b0 e0       	ldi	r27, 0x00	; 0
    707c:	01 c0       	rjmp	.+2      	; 0x7080 <.do_clear_bss_start>

0000707e <.do_clear_bss_loop>:
    707e:	1d 92       	st	X+, r1

00007080 <.do_clear_bss_start>:
    7080:	a4 31       	cpi	r26, 0x14	; 20
    7082:	b1 07       	cpc	r27, r17
    7084:	e1 f7       	brne	.-8      	; 0x707e <.do_clear_bss_loop>
    7086:	0c 94 f4 38 	jmp	0x71e8 <main>

0000708a <__bad_interrupt>:
    708a:	0c 94 00 38 	jmp	0x7000 <__vectors>

0000708e <get_hex_value>:


/* This fuction returns the hex value of the  2 consequence received ascii characters (HEX) */
uint8_t get_hex_value()
{
    708e:	cf 93       	push	r28
     uint8_t data;
	 uint8_t temp_byte;
    while (!(data = uart_read()));
    7090:	0e 94 40 3a 	call	0x7480 <uart_read>
    7094:	88 23       	and	r24, r24
    7096:	e1 f3       	breq	.-8      	; 0x7090 <get_hex_value+0x2>
// Put here to save calling subroutine overhead	
	 if( data < 'A' )
    7098:	81 34       	cpi	r24, 0x41	; 65
    709a:	10 f4       	brcc	.+4      	; 0x70a0 <get_hex_value+0x12>
    {
	   data  -= '0';
    709c:	80 53       	subi	r24, 0x30	; 48
    709e:	01 c0       	rjmp	.+2      	; 0x70a2 <get_hex_value+0x14>
    }
    else
    {
	
   data -=  55 ;
    70a0:	87 53       	subi	r24, 0x37	; 55
    }
	temp_byte = data << 4;
    70a2:	c8 2f       	mov	r28, r24
    70a4:	c2 95       	swap	r28
    70a6:	c0 7f       	andi	r28, 0xF0	; 240
	 while (!(data = uart_read()));
    70a8:	0e 94 40 3a 	call	0x7480 <uart_read>
    70ac:	88 23       	and	r24, r24
    70ae:	e1 f3       	breq	.-8      	; 0x70a8 <get_hex_value+0x1a>
// Put here to save calling subroutine overhead	
	 if( data < 'A' )
    70b0:	81 34       	cpi	r24, 0x41	; 65
    70b2:	10 f4       	brcc	.+4      	; 0x70b8 <get_hex_value+0x2a>
    {
	   data  -= '0';
    70b4:	80 53       	subi	r24, 0x30	; 48
    70b6:	01 c0       	rjmp	.+2      	; 0x70ba <get_hex_value+0x2c>
    }
    else
    {
	   data -=  55 ;
    70b8:	87 53       	subi	r24, 0x37	; 55
    }
	
	temp_byte |= data;
    70ba:	c8 2b       	or	r28, r24
    return temp_byte;
    
}
    70bc:	8c 2f       	mov	r24, r28
    70be:	99 27       	eor	r25, r25
    70c0:	cf 91       	pop	r28
    70c2:	08 95       	ret

000070c4 <ihex_load>:
    70c4:	af 92       	push	r10
    70c6:	bf 92       	push	r11
    70c8:	cf 92       	push	r12
    70ca:	df 92       	push	r13
    70cc:	ef 92       	push	r14
    70ce:	ff 92       	push	r15
    70d0:	0f 93       	push	r16
    70d2:	1f 93       	push	r17
    70d4:	cf 93       	push	r28
    70d6:	bb 24       	eor	r11, r11
    70d8:	cc 24       	eor	r12, r12
    70da:	dd 24       	eor	r13, r13
    70dc:	76 01       	movw	r14, r12
    70de:	0e 94 40 3a 	call	0x7480 <uart_read>
    70e2:	8d 30       	cpi	r24, 0x0D	; 13
    70e4:	e1 f3       	breq	.-8      	; 0x70de <ihex_load+0x1a>
    70e6:	8a 30       	cpi	r24, 0x0A	; 10
    70e8:	d1 f3       	breq	.-12     	; 0x70de <ihex_load+0x1a>
    70ea:	88 23       	and	r24, r24
    70ec:	c1 f3       	breq	.-16     	; 0x70de <ihex_load+0x1a>
    70ee:	8a 33       	cpi	r24, 0x3A	; 58
    70f0:	19 f0       	breq	.+6      	; 0x70f8 <ihex_load+0x34>
    70f2:	81 e0       	ldi	r24, 0x01	; 1
    70f4:	90 e0       	ldi	r25, 0x00	; 0
    70f6:	6e c0       	rjmp	.+220    	; 0x71d4 <ihex_load+0x110>
    70f8:	0e 94 47 38 	call	0x708e <get_hex_value>
    70fc:	08 2f       	mov	r16, r24
    70fe:	0e 94 47 38 	call	0x708e <get_hex_value>
    7102:	c8 2f       	mov	r28, r24
    7104:	0e 94 47 38 	call	0x708e <get_hex_value>
    7108:	18 2f       	mov	r17, r24
    710a:	0e 94 47 38 	call	0x708e <get_hex_value>
    710e:	a8 2e       	mov	r10, r24
    7110:	c0 0f       	add	r28, r16
    7112:	c1 0f       	add	r28, r17
    7114:	c8 0f       	add	r28, r24
    7116:	10 e0       	ldi	r17, 0x00	; 0
    7118:	10 17       	cp	r17, r16
    711a:	58 f4       	brcc	.+22     	; 0x7132 <ihex_load+0x6e>
    711c:	0e 94 47 38 	call	0x708e <get_hex_value>
    7120:	eb 2d       	mov	r30, r11
    7122:	ff 27       	eor	r31, r31
    7124:	e4 56       	subi	r30, 0x64	; 100
    7126:	ff 4f       	sbci	r31, 0xFF	; 255
    7128:	80 83       	st	Z, r24
    712a:	b3 94       	inc	r11
    712c:	c8 0f       	add	r28, r24
    712e:	1f 5f       	subi	r17, 0xFF	; 255
    7130:	f3 cf       	rjmp	.-26     	; 0x7118 <ihex_load+0x54>
    7132:	0e 94 47 38 	call	0x708e <get_hex_value>
    7136:	c8 0f       	add	r28, r24
    7138:	19 f0       	breq	.+6      	; 0x7140 <ihex_load+0x7c>
    713a:	82 e0       	ldi	r24, 0x02	; 2
    713c:	90 e0       	ldi	r25, 0x00	; 0
    713e:	4a c0       	rjmp	.+148    	; 0x71d4 <ihex_load+0x110>
    7140:	aa 20       	and	r10, r10
    7142:	59 f0       	breq	.+22     	; 0x715a <ihex_load+0x96>
    7144:	b7 fc       	sbrc	r11, 7
    7146:	09 c0       	rjmp	.+18     	; 0x715a <ihex_load+0x96>
    7148:	8f ef       	ldi	r24, 0xFF	; 255
    714a:	eb 2d       	mov	r30, r11
    714c:	ff 27       	eor	r31, r31
    714e:	e4 56       	subi	r30, 0x64	; 100
    7150:	ff 4f       	sbci	r31, 0xFF	; 255
    7152:	80 83       	st	Z, r24
    7154:	b3 94       	inc	r11
    7156:	b7 fe       	sbrs	r11, 7
    7158:	f8 cf       	rjmp	.-16     	; 0x714a <ihex_load+0x86>
    715a:	b7 fe       	sbrs	r11, 7
    715c:	32 c0       	rjmp	.+100    	; 0x71c2 <ihex_load+0xfe>
    715e:	10 e0       	ldi	r17, 0x00	; 0
    7160:	b1 2e       	mov	r11, r17
    7162:	41 e0       	ldi	r20, 0x01	; 1
    7164:	e1 2f       	mov	r30, r17
    7166:	ff 27       	eor	r31, r31
    7168:	e4 56       	subi	r30, 0x64	; 100
    716a:	ff 4f       	sbci	r31, 0xFF	; 255
    716c:	80 81       	ld	r24, Z
    716e:	99 27       	eor	r25, r25
    7170:	21 81       	ldd	r18, Z+1	; 0x01
    7172:	33 27       	eor	r19, r19
    7174:	32 2f       	mov	r19, r18
    7176:	22 27       	eor	r18, r18
    7178:	82 2b       	or	r24, r18
    717a:	93 2b       	or	r25, r19
    717c:	0c 01       	movw	r0, r24
    717e:	f6 01       	movw	r30, r12
    7180:	40 93 57 00 	sts	0x0057, r20
    7184:	e8 95       	spm
    7186:	11 24       	eor	r1, r1
    7188:	82 e0       	ldi	r24, 0x02	; 2
    718a:	90 e0       	ldi	r25, 0x00	; 0
    718c:	a0 e0       	ldi	r26, 0x00	; 0
    718e:	b0 e0       	ldi	r27, 0x00	; 0
    7190:	c8 0e       	add	r12, r24
    7192:	d9 1e       	adc	r13, r25
    7194:	ea 1e       	adc	r14, r26
    7196:	fb 1e       	adc	r15, r27
    7198:	1e 5f       	subi	r17, 0xFE	; 254
    719a:	17 ff       	sbrs	r17, 7
    719c:	e3 cf       	rjmp	.-58     	; 0x7164 <ihex_load+0xa0>
    719e:	25 e0       	ldi	r18, 0x05	; 5
    71a0:	c6 01       	movw	r24, r12
    71a2:	80 58       	subi	r24, 0x80	; 128
    71a4:	90 40       	sbci	r25, 0x00	; 0
    71a6:	fc 01       	movw	r30, r24
    71a8:	20 93 57 00 	sts	0x0057, r18
    71ac:	e8 95       	spm
    71ae:	07 b6       	in	r0, 0x37	; 55
    71b0:	00 fc       	sbrc	r0, 0
    71b2:	fd cf       	rjmp	.-6      	; 0x71ae <ihex_load+0xea>
    71b4:	81 e1       	ldi	r24, 0x11	; 17
    71b6:	80 93 57 00 	sts	0x0057, r24
    71ba:	e8 95       	spm
    71bc:	8a e2       	ldi	r24, 0x2A	; 42
    71be:	0e 94 b6 39 	call	0x736c <uart_write_char>
    71c2:	91 e0       	ldi	r25, 0x01	; 1
    71c4:	a9 16       	cp	r10, r25
    71c6:	09 f0       	breq	.+2      	; 0x71ca <ihex_load+0x106>
    71c8:	8a cf       	rjmp	.-236    	; 0x70de <ihex_load+0x1a>
    71ca:	85 e4       	ldi	r24, 0x45	; 69
    71cc:	0e 94 b6 39 	call	0x736c <uart_write_char>
    71d0:	80 e0       	ldi	r24, 0x00	; 0
    71d2:	90 e0       	ldi	r25, 0x00	; 0
    71d4:	cf 91       	pop	r28
    71d6:	1f 91       	pop	r17
    71d8:	0f 91       	pop	r16
    71da:	ff 90       	pop	r15
    71dc:	ef 90       	pop	r14
    71de:	df 90       	pop	r13
    71e0:	cf 90       	pop	r12
    71e2:	bf 90       	pop	r11
    71e4:	af 90       	pop	r10
    71e6:	08 95       	ret

000071e8 <main>:
    71e8:	cf e5       	ldi	r28, 0x5F	; 95
    71ea:	d8 e0       	ldi	r29, 0x08	; 8
    71ec:	de bf       	out	0x3e, r29	; 62
    71ee:	cd bf       	out	0x3d, r28	; 61
    71f0:	f8 94       	cli
    71f2:	11 e0       	ldi	r17, 0x01	; 1
    71f4:	1b bf       	out	0x3b, r17	; 59
    71f6:	82 e0       	ldi	r24, 0x02	; 2
    71f8:	8b bf       	out	0x3b, r24	; 59
    71fa:	49 e1       	ldi	r20, 0x19	; 25
    71fc:	50 e0       	ldi	r21, 0x00	; 0
    71fe:	66 e8       	ldi	r22, 0x86	; 134
    7200:	88 e9       	ldi	r24, 0x98	; 152
    7202:	0e 94 2e 3a 	call	0x745c <uart_init>
    7206:	e0 e0       	ldi	r30, 0x00	; 0
    7208:	f0 e0       	ldi	r31, 0x00	; 0
    720a:	84 91       	lpm	r24, Z
    720c:	8f 3f       	cpi	r24, 0xFF	; 255
    720e:	09 f0       	breq	.+2      	; 0x7212 <main+0x2a>
    7210:	10 e0       	ldi	r17, 0x00	; 0
    7212:	0e 94 40 3a 	call	0x7480 <uart_read>
    7216:	88 23       	and	r24, r24
    7218:	e1 f3       	breq	.-8      	; 0x7212 <main+0x2a>
    721a:	82 36       	cpi	r24, 0x62	; 98
    721c:	09 f4       	brne	.+2      	; 0x7220 <main+0x38>
    721e:	11 e0       	ldi	r17, 0x01	; 1
    7220:	80 e6       	ldi	r24, 0x60	; 96
    7222:	90 e0       	ldi	r25, 0x00	; 0
    7224:	0e 94 44 3a 	call	0x7488 <uart_write_str>
    7228:	80 e3       	ldi	r24, 0x30	; 48
    722a:	0e 94 b6 39 	call	0x736c <uart_write_char>
    722e:	81 e3       	ldi	r24, 0x31	; 49
    7230:	0e 94 b6 39 	call	0x736c <uart_write_char>
    7234:	89 e6       	ldi	r24, 0x69	; 105
    7236:	90 e0       	ldi	r25, 0x00	; 0
    7238:	0e 94 44 3a 	call	0x7488 <uart_write_str>
    723c:	11 23       	and	r17, r17
    723e:	09 f4       	brne	.+2      	; 0x7242 <main+0x5a>
    7240:	6f c0       	rjmp	.+222    	; 0x7320 <main+0x138>
    7242:	0e 94 40 3a 	call	0x7480 <uart_read>
    7246:	88 23       	and	r24, r24
    7248:	c9 f3       	breq	.-14     	; 0x723c <main+0x54>
    724a:	28 2f       	mov	r18, r24
    724c:	33 27       	eor	r19, r19
    724e:	25 37       	cpi	r18, 0x75	; 117
    7250:	31 05       	cpc	r19, r1
    7252:	69 f0       	breq	.+26     	; 0x726e <main+0x86>
    7254:	26 37       	cpi	r18, 0x76	; 118
    7256:	31 05       	cpc	r19, r1
    7258:	2c f4       	brge	.+10     	; 0x7264 <main+0x7c>
    725a:	2f 33       	cpi	r18, 0x3F	; 63
    725c:	31 05       	cpc	r19, r1
    725e:	09 f4       	brne	.+2      	; 0x7262 <main+0x7a>
    7260:	59 c0       	rjmp	.+178    	; 0x7314 <main+0x12c>
    7262:	5b c0       	rjmp	.+182    	; 0x731a <main+0x132>
    7264:	28 37       	cpi	r18, 0x78	; 120
    7266:	31 05       	cpc	r19, r1
    7268:	09 f4       	brne	.+2      	; 0x726c <main+0x84>
    726a:	49 c0       	rjmp	.+146    	; 0x72fe <main+0x116>
    726c:	56 c0       	rjmp	.+172    	; 0x731a <main+0x132>
    726e:	10 92 1c 01 	sts	0x011C, r1
    7272:	10 92 1d 01 	sts	0x011D, r1
    7276:	10 92 1e 01 	sts	0x011E, r1
    727a:	10 92 1f 01 	sts	0x011F, r1
    727e:	23 e0       	ldi	r18, 0x03	; 3
    7280:	80 91 1c 01 	lds	r24, 0x011C
    7284:	90 91 1d 01 	lds	r25, 0x011D
    7288:	fc 01       	movw	r30, r24
    728a:	20 93 57 00 	sts	0x0057, r18
    728e:	e8 95       	spm
    7290:	07 b6       	in	r0, 0x37	; 55
    7292:	00 fc       	sbrc	r0, 0
    7294:	fd cf       	rjmp	.-6      	; 0x7290 <main+0xa8>
    7296:	80 91 1c 01 	lds	r24, 0x011C
    729a:	90 91 1d 01 	lds	r25, 0x011D
    729e:	a0 91 1e 01 	lds	r26, 0x011E
    72a2:	b0 91 1f 01 	lds	r27, 0x011F
    72a6:	80 58       	subi	r24, 0x80	; 128
    72a8:	9f 4f       	sbci	r25, 0xFF	; 255
    72aa:	af 4f       	sbci	r26, 0xFF	; 255
    72ac:	bf 4f       	sbci	r27, 0xFF	; 255
    72ae:	80 93 1c 01 	sts	0x011C, r24
    72b2:	90 93 1d 01 	sts	0x011D, r25
    72b6:	a0 93 1e 01 	sts	0x011E, r26
    72ba:	b0 93 1f 01 	sts	0x011F, r27
    72be:	80 50       	subi	r24, 0x00	; 0
    72c0:	90 47       	sbci	r25, 0x70	; 112
    72c2:	a0 40       	sbci	r26, 0x00	; 0
    72c4:	b0 40       	sbci	r27, 0x00	; 0
    72c6:	e0 f2       	brcs	.-72     	; 0x7280 <main+0x98>
    72c8:	10 92 1c 01 	sts	0x011C, r1
    72cc:	10 92 1d 01 	sts	0x011D, r1
    72d0:	10 92 1e 01 	sts	0x011E, r1
    72d4:	10 92 1f 01 	sts	0x011F, r1
    72d8:	8c e6       	ldi	r24, 0x6C	; 108
    72da:	90 e0       	ldi	r25, 0x00	; 0
    72dc:	0e 94 44 3a 	call	0x7488 <uart_write_str>
    72e0:	0e 94 62 38 	call	0x70c4 <ihex_load>
    72e4:	c8 2f       	mov	r28, r24
    72e6:	88 23       	and	r24, r24
    72e8:	d9 f0       	breq	.+54     	; 0x7320 <main+0x138>
    72ea:	84 e7       	ldi	r24, 0x74	; 116
    72ec:	90 e0       	ldi	r25, 0x00	; 0
    72ee:	0e 94 44 3a 	call	0x7488 <uart_write_str>
    72f2:	8c 2f       	mov	r24, r28
    72f4:	80 5d       	subi	r24, 0xD0	; 208
    72f6:	0e 94 b6 39 	call	0x736c <uart_write_char>
    72fa:	8a e0       	ldi	r24, 0x0A	; 10
    72fc:	0e c0       	rjmp	.+28     	; 0x731a <main+0x132>
    72fe:	81 e0       	ldi	r24, 0x01	; 1
    7300:	8b bf       	out	0x3b, r24	; 59
    7302:	8b b7       	in	r24, 0x3b	; 59
    7304:	8c 7f       	andi	r24, 0xFC	; 252
    7306:	8b bf       	out	0x3b, r24	; 59
    7308:	e0 91 98 00 	lds	r30, 0x0098
    730c:	f0 91 99 00 	lds	r31, 0x0099
    7310:	09 95       	icall
    7312:	94 cf       	rjmp	.-216    	; 0x723c <main+0x54>
    7314:	89 e7       	ldi	r24, 0x79	; 121
    7316:	90 e0       	ldi	r25, 0x00	; 0
    7318:	8f cf       	rjmp	.-226    	; 0x7238 <main+0x50>
    731a:	0e 94 b6 39 	call	0x736c <uart_write_char>
    731e:	8e cf       	rjmp	.-228    	; 0x723c <main+0x54>
    7320:	81 e0       	ldi	r24, 0x01	; 1
    7322:	8b bf       	out	0x3b, r24	; 59
    7324:	8b b7       	in	r24, 0x3b	; 59
    7326:	8c 7f       	andi	r24, 0xFC	; 252
    7328:	8b bf       	out	0x3b, r24	; 59
    732a:	e0 91 98 00 	lds	r30, 0x0098
    732e:	f0 91 99 00 	lds	r31, 0x0099
    7332:	09 95       	icall
    7334:	80 e0       	ldi	r24, 0x00	; 0
    7336:	90 e0       	ldi	r25, 0x00	; 0
    7338:	0c 94 c1 3a 	jmp	0x7582 <_exit>

0000733c <uart_put_TX>:
	\author wichai tossamartvorakul  wichi@geartronics.net
	\sa	 <see also two name joined by ::>
*/     
uint8_t uart_put_TX ( uint8_t ch)
{
    733c:	98 2f       	mov	r25, r24
// If exceed buffer do nothing until buffer is flushed
    if ((g_tx_ptr > (MAX_BUFF-1))) 
    733e:	80 91 9a 00 	lds	r24, 0x009A
    7342:	8a 3f       	cpi	r24, 0xFA	; 250
    7344:	18 f0       	brcs	.+6      	; 0x734c <uart_put_TX+0x10>
    {
		return UART_BUFFER_FULL;   // No increase pointer
    7346:	82 e0       	ldi	r24, 0x02	; 2
    7348:	90 e0       	ldi	r25, 0x00	; 0
    734a:	08 95       	ret
    }
	g_tx_buff[g_tx_ptr]= ch;
    734c:	e8 2f       	mov	r30, r24
    734e:	ff 27       	eor	r31, r31
    7350:	e6 5e       	subi	r30, 0xE6	; 230
    7352:	fd 4f       	sbci	r31, 0xFD	; 253
    7354:	90 83       	st	Z, r25
	g_tx_ptr++;
    7356:	8f 5f       	subi	r24, 0xFF	; 255
    7358:	80 93 9a 00 	sts	0x009A, r24
	g_tx_buff[g_tx_ptr] = 0;    // Put null character at the end
    735c:	e8 2f       	mov	r30, r24
    735e:	ff 27       	eor	r31, r31
    7360:	e6 5e       	subi	r30, 0xE6	; 230
    7362:	fd 4f       	sbci	r31, 0xFD	; 253
    7364:	10 82       	st	Z, r1
	return 0;
    7366:	80 e0       	ldi	r24, 0x00	; 0
    7368:	90 e0       	ldi	r25, 0x00	; 0
}
    736a:	08 95       	ret

0000736c <uart_write_char>:


/*!	\brief  Get character from TX buffer to send and shift left all characters
	\param  None  
	\return Character to send 
	\par Port/Periheral Usage 
	\n   TX,RX
	\par Theory of Operation   
	\n   Get characters from buffer(FIFO) and shift all characters to left 
 	\par Pseudo code
	\n   Check whether there is data in TX buffer
	\n	 If yes  get characters  from TX buffer
	\n
	\note   Internal function  Do not call from outside
	\bug    <bug to fix>
	\author wichai tossamartvorakul  wichi@geartronics.net
	\sa	 <see also two name joined by ::>
*/     
 
uint8_t uart_get_TX (void)
{
   uint8_t i,j,ch =0;
   
   if ( g_tx_ptr)   // There are data in TX buffer
   {
		i  =  g_tx_ptr;
		g_tx_ptr--;
		ch =  g_tx_buff[0];   // Start from 0 FIFO
		j = 0;
// Move left all characters Need to rewrite !!!
        while (i)
		{
	      g_tx_buff[j] =  g_tx_buff[j+1];
	      j++;
	 	  i--;
		}
		return ch;
   }
   return 0;
}



 

/*!	\brief  Show debug value for short integer
	\param  Value to show (16 bits)
	\n		radix to show 10, 16,2	
	\return none
	\par Port/Periheral Usage 
	\n   TX,RX
	\par Theory of Operation   
	\n   Convert value to string and show on UART port
	\par Pseudo code
	\n   Convert long integer to string with  
	\note    
	\bug    <bug to fix>

	\author wichai tossamartvorakul  wichi@geartronics.net
	\sa	 <see also two name joined by ::>
*/ 
#ifdef DEBUG    
void  debug_value ( int16_t value, uint8_t radix)
{
   uint8_t  buff[20];
  
   itoa (value,buff, radix);
   uart_write_str ( buff);
}

 
/*!	\brief  Show debug value in long format
	\param  Value to show (32 bits)
	\n		radix  to show  10, 16,2
	\return None
	\par Port/Periheral Usage 
	\n  TX,RX
	\par Theory of Operation   
	\n   Convert value to string and show on UART port
	\par Pseudo code
	\n   Convert long integer to string with radix specified
	\n	 Write string to UART port
	\note   (Pseudo code)
	\bug    <bug to fix>

	\author wichai tossamartvorakul  wichi@geartronics.net
	\sa	 <see also two name joined by ::>
*/     
 
void  debug_lvalue ( int32_t value, uint8_t radix)
{
   uint8_t  buff[40];
   
   ltoa (value,buff, radix);
   uart_write_str ( buff);
}
 
#endif 

/*!	\brief  Initial serial Port UART
	\param  mode  =  TX/RX  Mode of operation  (Intrrupt/Polling) Enable RX, TX
			frame =  Set Data frame  8 bits  parity bits, stop bit
			baud  =  Baud rate 
			These parameter are predefined in avr_serial.h for easy set up
 	\return None
	\par Port/Periheral Usage 
	\n   TX, RX
	\par Theory of Operation   
	\n    Initial control register to set up for baud rate, data frame and mode of operations
	\n    For receive we are using interrupt for RX and TX 
	\par Pseudo code
	\n    Set and initial register for UART mode
	\note Future enhancement for error checking and overrun detect 
	\bug    <bug to fix>

	\author wichai tossamartvorakul  wichi@geartronics.net
	\sa	 <see also two name joined by ::>
*/     
void uart_init(uint8_t mode,uint8_t frame, uint16_t baud)
{
 
// Initialize UART  
    
    UCSRC  = frame;    // 8 bit non parity  1 stop bit
    UCSRB  = mode;    // Enable RX Interrupt and Enable TX, RX pin
	UBRRL  = (uint8_t) baud;
	UBRRH  = (uint8_t)(baud >>8); 
	g_rx_ptr = 0;
	g_tx_ptr = 0;
	receive_flag = ON;
    send_flag = ON;
    sei();
}


/*!	\brief  Get character from RX buffer
	\param  None  
	\return Read character from buffer  0 if none characters
	\par Port/Periheral Usage 
	\n   TX,RX
	\par Theory of Operation   
	\n    Read character from RX buffer reside inside this module
	\par Pseudo code
	\n
	\note 
	\bug    <bug to fix>

	\author wichai tossamartvorakul  wichi@geartronics.net
	\sa	 <see also two name joined by ::>
*/     
uint8_t uart_read(void)
{
    uint8_t ch;
	ch = uart_get_RX();
    return ch ;
}


/*!	\brief  Write character
	\param  None  
	\return None
	\par Port/Periheral Usage 
	\n   E_PB0,E_PB3
	\par Theory of Operation   
	\n
	\par Pseudo code
	\n
	\note   (Pseudo code)
	\bug    <bug to fix>

	\author wichai tossamartvorakul  wichi@geartronics.net
	\sa	 <see also two name joined by ::>
*/     
uint8_t uart_write_char(uint8_t c)
{
    736c:	cf 93       	push	r28
    736e:	c8 2f       	mov	r28, r24
   while (UART_BUFFER_FULL == uart_put_TX(c));  //If buffer full wait until buffer clear
    7370:	8c 2f       	mov	r24, r28
    7372:	0e 94 9e 39 	call	0x733c <uart_put_TX>
    7376:	82 30       	cpi	r24, 0x02	; 2
    7378:	d9 f3       	breq	.-10     	; 0x7370 <uart_write_char+0x4>
// Enable interrupt UART Data Register empty
  UCSRB  |=  (1<<UDRIE);	
    737a:	55 9a       	sbi	0x0a, 5	; 10
   return 0;
}
    737c:	80 e0       	ldi	r24, 0x00	; 0
    737e:	90 e0       	ldi	r25, 0x00	; 0
    7380:	cf 91       	pop	r28
    7382:	08 95       	ret

00007384 <uart_get_RX>:
    7384:	cf 93       	push	r28
    7386:	80 91 9b 00 	lds	r24, 0x009B
    738a:	88 23       	and	r24, r24
    738c:	19 f1       	breq	.+70     	; 0x73d4 <uart_get_RX+0x50>
    738e:	c0 91 20 01 	lds	r28, 0x0120
    7392:	98 2f       	mov	r25, r24
    7394:	91 50       	subi	r25, 0x01	; 1
    7396:	90 93 9b 00 	sts	0x009B, r25
    739a:	9f 5f       	subi	r25, 0xFF	; 255
    739c:	20 e0       	ldi	r18, 0x00	; 0
    739e:	e2 2f       	mov	r30, r18
    73a0:	ff 27       	eor	r31, r31
    73a2:	e0 5e       	subi	r30, 0xE0	; 224
    73a4:	fe 4f       	sbci	r31, 0xFE	; 254
    73a6:	81 81       	ldd	r24, Z+1	; 0x01
    73a8:	80 83       	st	Z, r24
    73aa:	2f 5f       	subi	r18, 0xFF	; 255
    73ac:	91 50       	subi	r25, 0x01	; 1
    73ae:	b9 f7       	brne	.-18     	; 0x739e <uart_get_RX+0x1a>
    73b0:	80 91 9b 00 	lds	r24, 0x009B
    73b4:	8a 30       	cpi	r24, 0x0A	; 10
    73b6:	58 f4       	brcc	.+22     	; 0x73ce <uart_get_RX+0x4a>
    73b8:	80 91 97 00 	lds	r24, 0x0097
    73bc:	88 23       	and	r24, r24
    73be:	39 f4       	brne	.+14     	; 0x73ce <uart_get_RX+0x4a>
    73c0:	81 e0       	ldi	r24, 0x01	; 1
    73c2:	80 93 97 00 	sts	0x0097, r24
    73c6:	81 e1       	ldi	r24, 0x11	; 17
    73c8:	0e 94 b6 39 	call	0x736c <uart_write_char>
    73cc:	57 9a       	sbi	0x0a, 7	; 10
    73ce:	8c 2f       	mov	r24, r28
    73d0:	99 27       	eor	r25, r25
    73d2:	02 c0       	rjmp	.+4      	; 0x73d8 <uart_get_RX+0x54>
    73d4:	80 e0       	ldi	r24, 0x00	; 0
    73d6:	90 e0       	ldi	r25, 0x00	; 0
    73d8:	cf 91       	pop	r28
    73da:	08 95       	ret

000073dc <uart_put_RX>:
    73dc:	98 2f       	mov	r25, r24
    73de:	80 91 9b 00 	lds	r24, 0x009B
    73e2:	8a 3f       	cpi	r24, 0xFA	; 250
    73e4:	68 f4       	brcc	.+26     	; 0x7400 <uart_put_RX+0x24>
    73e6:	e8 2f       	mov	r30, r24
    73e8:	ff 27       	eor	r31, r31
    73ea:	e0 5e       	subi	r30, 0xE0	; 224
    73ec:	fe 4f       	sbci	r31, 0xFE	; 254
    73ee:	90 83       	st	Z, r25
    73f0:	8f 5f       	subi	r24, 0xFF	; 255
    73f2:	80 93 9b 00 	sts	0x009B, r24
    73f6:	e8 2f       	mov	r30, r24
    73f8:	ff 27       	eor	r31, r31
    73fa:	e0 5e       	subi	r30, 0xE0	; 224
    73fc:	fe 4f       	sbci	r31, 0xFE	; 254
    73fe:	10 82       	st	Z, r1
    7400:	80 91 9b 00 	lds	r24, 0x009B
    7404:	88 3c       	cpi	r24, 0xC8	; 200
    7406:	18 f4       	brcc	.+6      	; 0x740e <uart_put_RX+0x32>
    7408:	80 e0       	ldi	r24, 0x00	; 0
    740a:	90 e0       	ldi	r25, 0x00	; 0
    740c:	08 95       	ret
    740e:	80 91 97 00 	lds	r24, 0x0097
    7412:	81 30       	cpi	r24, 0x01	; 1
    7414:	29 f4       	brne	.+10     	; 0x7420 <uart_put_RX+0x44>
    7416:	83 e1       	ldi	r24, 0x13	; 19
    7418:	0e 94 b6 39 	call	0x736c <uart_write_char>
    741c:	10 92 97 00 	sts	0x0097, r1
    7420:	82 e0       	ldi	r24, 0x02	; 2
    7422:	90 e0       	ldi	r25, 0x00	; 0
    7424:	08 95       	ret

00007426 <uart_get_TX>:
    7426:	80 91 9a 00 	lds	r24, 0x009A
    742a:	88 23       	and	r24, r24
    742c:	a1 f0       	breq	.+40     	; 0x7456 <uart_get_TX+0x30>
    742e:	28 2f       	mov	r18, r24
    7430:	21 50       	subi	r18, 0x01	; 1
    7432:	20 93 9a 00 	sts	0x009A, r18
    7436:	2f 5f       	subi	r18, 0xFF	; 255
    7438:	90 91 1a 02 	lds	r25, 0x021A
    743c:	30 e0       	ldi	r19, 0x00	; 0
    743e:	e3 2f       	mov	r30, r19
    7440:	ff 27       	eor	r31, r31
    7442:	e6 5e       	subi	r30, 0xE6	; 230
    7444:	fd 4f       	sbci	r31, 0xFD	; 253
    7446:	81 81       	ldd	r24, Z+1	; 0x01
    7448:	80 83       	st	Z, r24
    744a:	3f 5f       	subi	r19, 0xFF	; 255
    744c:	21 50       	subi	r18, 0x01	; 1
    744e:	b9 f7       	brne	.-18     	; 0x743e <uart_get_TX+0x18>
    7450:	89 2f       	mov	r24, r25
    7452:	99 27       	eor	r25, r25
    7454:	08 95       	ret
    7456:	80 e0       	ldi	r24, 0x00	; 0
    7458:	90 e0       	ldi	r25, 0x00	; 0
    745a:	08 95       	ret

0000745c <uart_init>:
    745c:	38 2f       	mov	r19, r24
    745e:	60 bd       	out	0x20, r22	; 32
    7460:	3a b9       	out	0x0a, r19	; 10
    7462:	49 b9       	out	0x09, r20	; 9
    7464:	85 2f       	mov	r24, r21
    7466:	99 27       	eor	r25, r25
    7468:	80 bd       	out	0x20, r24	; 32
    746a:	10 92 9b 00 	sts	0x009B, r1
    746e:	10 92 9a 00 	sts	0x009A, r1
    7472:	81 e0       	ldi	r24, 0x01	; 1
    7474:	80 93 97 00 	sts	0x0097, r24
    7478:	80 93 96 00 	sts	0x0096, r24
    747c:	78 94       	sei
    747e:	08 95       	ret

00007480 <uart_read>:
    7480:	0e 94 c2 39 	call	0x7384 <uart_get_RX>
    7484:	99 27       	eor	r25, r25
    7486:	08 95       	ret

00007488 <uart_write_str>:



/*!	\brief   Transmit string to UART1
	\param   Pointer to String  
	\return None
	\par Port/Periheral Usage 
	\n   TX,RX
	\par Theory of Operation   
	\n   Write each characters pointed by string pointer to UART until end of string
	\par Pseudo code
	\n    Write each char until NULL string found
	\n	  Send CR + LF for new line
	\note    
	\bug    <bug to fix>

	\author wichai tossamartvorakul  wichi@geartronics.net
	\sa	 <see also two name joined by ::>
*/     
void uart_write_str(const uint8_t *s)
{
    7488:	cf 93       	push	r28
    748a:	df 93       	push	r29
    748c:	ec 01       	movw	r28, r24
 
    while (*s) 
    {
		uart_write_char(*s);
	    if (*s ==  0x0A)
		{
			uart_write_char(0x0D); // CR
//			uart_write_char(0x0A); // LF
		}
		s++;
    748e:	88 81       	ld	r24, Y
    7490:	88 23       	and	r24, r24
    7492:	69 f0       	breq	.+26     	; 0x74ae <uart_write_str+0x26>
    7494:	88 81       	ld	r24, Y
    7496:	0e 94 b6 39 	call	0x736c <uart_write_char>
    749a:	88 81       	ld	r24, Y
    749c:	8a 30       	cpi	r24, 0x0A	; 10
    749e:	19 f4       	brne	.+6      	; 0x74a6 <uart_write_str+0x1e>
    74a0:	8d e0       	ldi	r24, 0x0D	; 13
    74a2:	0e 94 b6 39 	call	0x736c <uart_write_char>
    74a6:	21 96       	adiw	r28, 0x01	; 1
    74a8:	88 81       	ld	r24, Y
    74aa:	88 23       	and	r24, r24
    74ac:	99 f7       	brne	.-26     	; 0x7494 <uart_write_str+0xc>
    74ae:	df 91       	pop	r29
    74b0:	cf 91       	pop	r28
    74b2:	08 95       	ret

000074b4 <__vector_13>:
	}
	
}


/*!	\brief  Interrupt handler for RX 
	\param     
	\return Rx characters put in buffer
	\par Port/Periheral Usage 
	\n   TX,RX
	\par Theory of Operation   
	\n    
	\par Pseudo code
	\n   Put each received characters in buffer
	\note  
	\bug  <bug to fix>

	\author wichai tossamartvorakul  wichi@geartronics.net
	\sa	 <see also two name joined by ::>
*/     
/* UART receiver ready
*/

SIGNAL(SIG_UART_RECV)
{  
    74b4:	1f 92       	push	r1
    74b6:	0f 92       	push	r0
    74b8:	0f b6       	in	r0, 0x3f	; 63
    74ba:	0f 92       	push	r0
    74bc:	11 24       	eor	r1, r1
    74be:	2f 93       	push	r18
    74c0:	3f 93       	push	r19
    74c2:	4f 93       	push	r20
    74c4:	5f 93       	push	r21
    74c6:	6f 93       	push	r22
    74c8:	7f 93       	push	r23
    74ca:	8f 93       	push	r24
    74cc:	9f 93       	push	r25
    74ce:	af 93       	push	r26
    74d0:	bf 93       	push	r27
    74d2:	ef 93       	push	r30
    74d4:	ff 93       	push	r31
   uint8_t ch;
   uint8_t status;
   
   
   ch =  UDR;
    74d6:	8c b1       	in	r24, 0x0c	; 12
   if (ch == XOFF)
    74d8:	83 31       	cpi	r24, 0x13	; 19
    74da:	19 f4       	brne	.+6      	; 0x74e2 <__vector_13+0x2e>
   {
      send_flag = OFF;
    74dc:	10 92 96 00 	sts	0x0096, r1
	  return;
    74e0:	12 c0       	rjmp	.+36     	; 0x7506 <__vector_13+0x52>
   }
   if (ch == XON)
    74e2:	81 31       	cpi	r24, 0x11	; 17
    74e4:	21 f4       	brne	.+8      	; 0x74ee <__vector_13+0x3a>
   {
      send_flag = ON;
    74e6:	81 e0       	ldi	r24, 0x01	; 1
    74e8:	80 93 96 00 	sts	0x0096, r24
	  return;
    74ec:	0c c0       	rjmp	.+24     	; 0x7506 <__vector_13+0x52>
   }
   status = uart_put_RX (ch);    // Should not use UDR here to avoid characters missing
    74ee:	0e 94 ee 39 	call	0x73dc <uart_put_RX>
   if (status == UART_BUFFER_FULL)
    74f2:	82 30       	cpi	r24, 0x02	; 2
    74f4:	41 f4       	brne	.+16     	; 0x7506 <__vector_13+0x52>
   {
   // Flush data
 
      while ( UCSRA & (1 << RXC))
	   {
	      ch = UDR;
		  uart_put_RX(ch);
    74f6:	5f 9b       	sbis	0x0b, 7	; 11
    74f8:	05 c0       	rjmp	.+10     	; 0x7504 <__vector_13+0x50>
    74fa:	8c b1       	in	r24, 0x0c	; 12
    74fc:	0e 94 ee 39 	call	0x73dc <uart_put_RX>
    7500:	5f 99       	sbic	0x0b, 7	; 11
    7502:	fb cf       	rjmp	.-10     	; 0x74fa <__vector_13+0x46>
	   }
   // Disable RX interrupt
		UCSRB &=  ~(1<< RXCIE);
    7504:	57 98       	cbi	0x0a, 7	; 10
    7506:	ff 91       	pop	r31
    7508:	ef 91       	pop	r30
    750a:	bf 91       	pop	r27
    750c:	af 91       	pop	r26
    750e:	9f 91       	pop	r25
    7510:	8f 91       	pop	r24
    7512:	7f 91       	pop	r23
    7514:	6f 91       	pop	r22
    7516:	5f 91       	pop	r21
    7518:	4f 91       	pop	r20
    751a:	3f 91       	pop	r19
    751c:	2f 91       	pop	r18
    751e:	0f 90       	pop	r0
    7520:	0f be       	out	0x3f, r0	; 63
    7522:	0f 90       	pop	r0
    7524:	1f 90       	pop	r1
    7526:	18 95       	reti

00007528 <__vector_14>:

//      uart_write_char ('*'); 
   }

}
 
 

/*!	\brief   Interrupt service routine for UART TX Data Register Empty interrupt
	\n		 Called when the UART is ready to transmit the next byte
	\param   Pointer to String  
	\return None
	\par Port/Periheral Usage 
	\n   TX,RX
	\par Theory of Operation   
	\n   When TX data register is empty to send the next characters. This routine will
	\n   activate and the characters will be read from TX buffer until end of text. 
	\n   If end of characers, this interrupt will be disable.
	\par Pseudo code
	\n   Send characters from TX buffer. If null char had found disable interrupt to avoid 
	\n   repeat interrupt call
	\note    
	\bug    Send too fast get garbage

	\author wichai tossamartvorakul  wichi@geartronics.net
	\sa	 <see also two name joined by ::>
*/     
 
SIGNAL(SIG_UART_DATA)
{ 
    7528:	1f 92       	push	r1
    752a:	0f 92       	push	r0
    752c:	0f b6       	in	r0, 0x3f	; 63
    752e:	0f 92       	push	r0
    7530:	11 24       	eor	r1, r1
    7532:	2f 93       	push	r18
    7534:	3f 93       	push	r19
    7536:	4f 93       	push	r20
    7538:	5f 93       	push	r21
    753a:	6f 93       	push	r22
    753c:	7f 93       	push	r23
    753e:	8f 93       	push	r24
    7540:	9f 93       	push	r25
    7542:	af 93       	push	r26
    7544:	bf 93       	push	r27
    7546:	ef 93       	push	r30
    7548:	ff 93       	push	r31
    uint8_t  ch;
	if ( send_flag == ON)
    754a:	80 91 96 00 	lds	r24, 0x0096
    754e:	81 30       	cpi	r24, 0x01	; 1
    7550:	39 f4       	brne	.+14     	; 0x7560 <__vector_14+0x38>
	{
		if ((ch = uart_get_TX()))  //Send until end of TX
    7552:	0e 94 13 3a 	call	0x7426 <uart_get_TX>
    7556:	88 23       	and	r24, r24
    7558:	11 f0       	breq	.+4      	; 0x755e <__vector_14+0x36>
		{
			UDR = ch;
    755a:	8c b9       	out	0x0c, r24	; 12
    755c:	01 c0       	rjmp	.+2      	; 0x7560 <__vector_14+0x38>
		}	
		else 
// If there are no character,  disable interrupt to avoid repeat call again 
		{
			UCSRB &=  ~(1<<UDRIE);
    755e:	55 98       	cbi	0x0a, 5	; 10
    7560:	ff 91       	pop	r31
    7562:	ef 91       	pop	r30
    7564:	bf 91       	pop	r27
    7566:	af 91       	pop	r26
    7568:	9f 91       	pop	r25
    756a:	8f 91       	pop	r24
    756c:	7f 91       	pop	r23
    756e:	6f 91       	pop	r22
    7570:	5f 91       	pop	r21
    7572:	4f 91       	pop	r20
    7574:	3f 91       	pop	r19
    7576:	2f 91       	pop	r18
    7578:	0f 90       	pop	r0
    757a:	0f be       	out	0x3f, r0	; 63
    757c:	0f 90       	pop	r0
    757e:	1f 90       	pop	r1
    7580:	18 95       	reti

00007582 <_exit>:
    7582:	ff cf       	rjmp	.-2      	; 0x7582 <_exit>
