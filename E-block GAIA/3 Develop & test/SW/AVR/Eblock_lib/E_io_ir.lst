   1               		.file	"E_io_ir.c"
   2               		.arch atmega32
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  76               	.global	io_ir_init
  78               	io_ir_init:
   1:../../Eblock_lib/E_io_ir.c **** /*!  
   2:../../Eblock_lib/E_io_ir.c **** 	\file   	E_io_ir.c
   3:../../Eblock_lib/E_io_ir.c **** 	\brief  	IR rx module for E_IO block
   4:../../Eblock_lib/E_io_ir.c **** 	\ingroup	E_io_ir
   5:../../Eblock_lib/E_io_ir.c **** 	\par  		Support only Sony or remote which use  Pulse width for 1,0  ex PANASONIC
   6:../../Eblock_lib/E_io_ir.c ****         \n  	
   7:../../Eblock_lib/E_io_ir.c ****  	\n Original written for 	:   \b for bold ATMEGA32
   8:../../Eblock_lib/E_io_ir.c ****  	\n CPU port/tested		:   ATMEGA32
   9:../../Eblock_lib/E_io_ir.c ****  	\n Hardware use			:   E_IO with RX  TSOP4838 ??
  10:../../Eblock_lib/E_io_ir.c ****  	\n Port use				:   E_PB7 (Need to set Jumper J1 to connect to E_PB7
  11:../../Eblock_lib/E_io_ir.c **** 	\n							TIMER1, ICP mode  ICP pin ( map to E_PB7 with J1)
  12:../../Eblock_lib/E_io_ir.c ****  	\n Memory	FLASH		:   XXX
  13:../../Eblock_lib/E_io_ir.c ****  	\n			RAM			:   XXX
  14:../../Eblock_lib/E_io_ir.c ****  	\n			EEPROM		:   XXX
  15:../../Eblock_lib/E_io_ir.c ****  	\n Reference Document	:   Document describe algorithm
  16:../../Eblock_lib/E_io_ir.c **** 
  17:../../Eblock_lib/E_io_ir.c **** 	\version 0.1
  18:../../Eblock_lib/E_io_ir.c ****  	\author  Wichai Tossamartvorakul / wichai@geartronics.net
  19:../../Eblock_lib/E_io_ir.c **** 	\date 	 22/8/2008
  20:../../Eblock_lib/E_io_ir.c **** 
  21:../../Eblock_lib/E_io_ir.c **** 	\par Update History
  22:../../Eblock_lib/E_io_ir.c ****  	\nDate			By 					Comments
  23:../../Eblock_lib/E_io_ir.c ****  	\n----			--					--------
  24:../../Eblock_lib/E_io_ir.c **** 	\n 
  25:../../Eblock_lib/E_io_ir.c **** 	\note   IR Module may report many repeat IR code if you hold. Need to add algorithm to check relea
  26:../../Eblock_lib/E_io_ir.c **** 	
  27:../../Eblock_lib/E_io_ir.c ****  
  28:../../Eblock_lib/E_io_ir.c **** */
  29:../../Eblock_lib/E_io_ir.c **** 
  30:../../Eblock_lib/E_io_ir.c **** 
  31:../../Eblock_lib/E_io_ir.c **** 
  32:../../Eblock_lib/E_io_ir.c **** 
  33:../../Eblock_lib/E_io_ir.c **** 
  34:../../Eblock_lib/E_io_ir.c **** 
  35:../../Eblock_lib/E_io_ir.c **** // Include file
  36:../../Eblock_lib/E_io_ir.c ****  
  37:../../Eblock_lib/E_io_ir.c **** #include <avr/interrupt.h>
  38:../../Eblock_lib/E_io_ir.c **** #include "E_io_ir.h"
  39:../../Eblock_lib/E_io_ir.c **** #include "avr_timer.h"
  40:../../Eblock_lib/E_io_ir.c **** 
  41:../../Eblock_lib/E_io_ir.c **** 
  42:../../Eblock_lib/E_io_ir.c **** 
  43:../../Eblock_lib/E_io_ir.c **** // Start routine here
  44:../../Eblock_lib/E_io_ir.c **** 
  45:../../Eblock_lib/E_io_ir.c **** 
  46:../../Eblock_lib/E_io_ir.c ****  
  47:../../Eblock_lib/E_io_ir.c **** 
  48:../../Eblock_lib/E_io_ir.c **** /*!	\brief  Initial IR Module by initial TIMER1 to ICP mode on  
  49:../../Eblock_lib/E_io_ir.c **** 	\param  none	  
  50:../../Eblock_lib/E_io_ir.c **** 	\return none
  51:../../Eblock_lib/E_io_ir.c **** 	\n		   
  52:../../Eblock_lib/E_io_ir.c **** 	\par Port/Periheral Usage 
  53:../../Eblock_lib/E_io_ir.c **** 	\n   E_TIMER0   ( OC2 for timer2 on ATMEGA32)
  54:../../Eblock_lib/E_io_ir.c **** 	\par Theory of Operation   
  55:../../Eblock_lib/E_io_ir.c **** 	\n   Initial timer0 to measure the lenght of pulse on TIMER0 pin by counting the time between
  56:../../Eblock_lib/E_io_ir.c **** 	\n	 falling -> Rising for Start bit. And Rising ->Another Rising for data. The logic 1 and 0 will 
  57:../../Eblock_lib/E_io_ir.c **** 	\n	 have different pulse width 
  58:../../Eblock_lib/E_io_ir.c **** 	\n    
  59:../../Eblock_lib/E_io_ir.c **** 	\par Pseudo Code
  60:../../Eblock_lib/E_io_ir.c **** 	\n	 	Set ICP pin on E_PB7 to input
  61:../../Eblock_lib/E_io_ir.c **** 	\n   	Initial timer1B for ICP triggle on FALLING EDGE
  62:../../Eblock_lib/E_io_ir.c **** 	\n	    Enable Interrupt  for ICP_CAPTURE
  63:../../Eblock_lib/E_io_ir.c **** 	\note	
  64:../../Eblock_lib/E_io_ir.c **** 	\bug    <bug to fix>
  65:../../Eblock_lib/E_io_ir.c **** 
  66:../../Eblock_lib/E_io_ir.c **** 	\author wichai tossamartvorakul  wichi@geartronics.net
  67:../../Eblock_lib/E_io_ir.c **** 	\sa	 <see also two name joined by ::>
  68:../../Eblock_lib/E_io_ir.c **** */       
  69:../../Eblock_lib/E_io_ir.c **** 
  70:../../Eblock_lib/E_io_ir.c **** void io_ir_init(void)
  71:../../Eblock_lib/E_io_ir.c **** {
  80               	.LM1:
  81               	/* prologue: frame size=0 */
  82               	/* prologue end (size=0) */
  72:../../Eblock_lib/E_io_ir.c ****  //Set Direction for input 
  73:../../Eblock_lib/E_io_ir.c ****  	E_DIR_PB7(INPUT);
  84               	.LM2:
  85 0000 8E98      		cbi 49-0x20,6
  74:../../Eblock_lib/E_io_ir.c **** 	set_timer_mode (TIMER1B,ICP_FALLING, OC_DISCONNECT, CLK_BY_8);  // It use as input not output
  87               	.LM3:
  88 0002 22E0      		ldi r18,lo8(2)
  89 0004 40E0      		ldi r20,lo8(0)
  90 0006 60E8      		ldi r22,lo8(-128)
  91 0008 822F      		mov r24,r18
  92 000a 0E94 0000 		call set_timer_mode
  75:../../Eblock_lib/E_io_ir.c **** 	TIMSK   |= _BV(TICIE1);   				// Enable Interrupt for INPUT CAPTURE, Detect for IR signal
  94               	.LM4:
  95 000e 89B7      		in r24,89-0x20
  96 0010 8062      		ori r24,lo8(32)
  97 0012 89BF      		out 89-0x20,r24
  76:../../Eblock_lib/E_io_ir.c **** 	sei();
  99               	.LM5:
 100               	/* #APP */
 101 0014 7894      		sei
 102               	/* #NOAPP */
 103               	/* epilogue: frame size=0 */
 104 0016 0895      		ret
 105               	/* epilogue end (size=1) */
 106               	/* function io_ir_init size 13 (12) */
 108               	.Lscope0:
 109               		.lcomm prev_capture_counter.2,2
 110               		.lcomm stop_bit.3,1
 111               		.lcomm ir_code.4,2
 114               	.global	io_ir_decode
 116               	io_ir_decode:
  77:../../Eblock_lib/E_io_ir.c **** }
  78:../../Eblock_lib/E_io_ir.c **** 
  79:../../Eblock_lib/E_io_ir.c **** 
  80:../../Eblock_lib/E_io_ir.c **** 
  81:../../Eblock_lib/E_io_ir.c **** 
  82:../../Eblock_lib/E_io_ir.c **** 
  83:../../Eblock_lib/E_io_ir.c **** /*!	\brief  Decode IR signal with help of interrupt INPUT CAPTURE
  84:../../Eblock_lib/E_io_ir.c **** 	\n       Support SONY at other with  Pulse width Modulation
  85:../../Eblock_lib/E_io_ir.c **** 	\param  Input  Input capture counter 16 bit register
  86:../../Eblock_lib/E_io_ir.c **** 	\n	    	  
  87:../../Eblock_lib/E_io_ir.c **** 	\return   	0  			= no code detect
  88:../../Eblock_lib/E_io_ir.c **** 	\n			ir_decode   = detect IR code 
  89:../../Eblock_lib/E_io_ir.c **** 	\n		   
  90:../../Eblock_lib/E_io_ir.c **** 	\par Port/Periheral Usage 
  91:../../Eblock_lib/E_io_ir.c **** 	\n   E_TIMER0   ( OC2 for timer2 on ATMEGA32)
  92:../../Eblock_lib/E_io_ir.c **** 	\par Theory of Operation   
  93:../../Eblock_lib/E_io_ir.c **** 	\n   Measure the pulse width between falling -> Rising for startbit.  Start bit = 4T Bit 1 = 3T ot
  94:../../Eblock_lib/E_io_ir.c **** 	\n   T= Normal pulse width depend on remote type. Sony = XX  If detect start bit, then detect for
  95:../../Eblock_lib/E_io_ir.c **** 	\n  data 1 or 0 until reach 12 bits. Then return the IR code. 
  96:../../Eblock_lib/E_io_ir.c **** 	\n	 
  97:../../Eblock_lib/E_io_ir.c **** 	\par Pseudo Code
  98:../../Eblock_lib/E_io_ir.c **** 	\n	 	Calculate pulse width by substract ICP counter. from pulse width
  99:../../Eblock_lib/E_io_ir.c **** 	\n		can determine whether it is  START BIT 		 =  4T
 100:../../Eblock_lib/E_io_ir.c **** 	\n						  			 BIT1 			 =  3T
 101:../../Eblock_lib/E_io_ir.c **** 	\n									 BIT0            =  2T
 102:../../Eblock_lib/E_io_ir.c **** 	\n									 T				 =  550 us	(1/2 of Wave's Period)
 103:../../Eblock_lib/E_io_ir.c **** 	\n		until 12 bits then return ir code					
 104:../../Eblock_lib/E_io_ir.c **** 	\note	
 105:../../Eblock_lib/E_io_ir.c **** 	\n		Only support Sony and Panasonic or other which use Pulse width Modulation and have same
 106:../../Eblock_lib/E_io_ir.c **** 	\n		T as Sony and Panasonic
 107:../../Eblock_lib/E_io_ir.c **** 	\bug    <bug to fix>
 108:../../Eblock_lib/E_io_ir.c **** 
 109:../../Eblock_lib/E_io_ir.c **** 	\author wichai tossamartvorakul  wichi@geartronics.net
 110:../../Eblock_lib/E_io_ir.c **** 	\sa	 <see also two name joined by ::>
 111:../../Eblock_lib/E_io_ir.c **** */       
 112:../../Eblock_lib/E_io_ir.c **** 
 113:../../Eblock_lib/E_io_ir.c **** uint16_t io_ir_decode ( uint16_t capture_counter)
 114:../../Eblock_lib/E_io_ir.c **** {
 118               	.LM6:
 119               	/* prologue: frame size=0 */
 120               	/* prologue end (size=0) */
 121 0018 BC01      		movw r22,r24
 115:../../Eblock_lib/E_io_ir.c ****   static 	uint16_t  	prev_capture_counter = 0;
 116:../../Eblock_lib/E_io_ir.c ****   static 	uint8_t   	stop_bit = 0;
 117:../../Eblock_lib/E_io_ir.c ****   static	uint16_t	ir_code = 0;
 118:../../Eblock_lib/E_io_ir.c ****  			uint16_t	width  = 0;	  
 119:../../Eblock_lib/E_io_ir.c **** 			
 120:../../Eblock_lib/E_io_ir.c **** // Calculate width of pulse by compare with the prev counter
 121:../../Eblock_lib/E_io_ir.c ****       if ( capture_counter > prev_capture_counter)
 123               	.LM7:
 124 001a 8091 0000 		lds r24,prev_capture_counter.2
 125 001e 9091 0000 		lds r25,(prev_capture_counter.2)+1
 126 0022 9B01      		movw r18,r22
 127 0024 281B      		sub r18,r24
 128 0026 390B      		sbc r19,r25
 122:../../Eblock_lib/E_io_ir.c **** 			width = capture_counter - prev_capture_counter;
 123:../../Eblock_lib/E_io_ir.c **** 	  else  // Counter had pass counter
 124:../../Eblock_lib/E_io_ir.c **** 			width = capture_counter+(MAX_INT16 - prev_capture_counter);
 125:../../Eblock_lib/E_io_ir.c **** 			
 126:../../Eblock_lib/E_io_ir.c **** //Check for start bit
 127:../../Eblock_lib/E_io_ir.c ****      if ( width > IR_TV_PULSE_WIDTH)
 130               	.LM8:
 131 0028 54E0      		ldi r21,hi8(1201)
 132 002a 213B      		cpi r18,lo8(1201)
 133 002c 3507      		cpc r19,r21
 134 002e 28F1      		brlo .L5
 128:../../Eblock_lib/E_io_ir.c **** 	 {
 129:../../Eblock_lib/E_io_ir.c **** 		  if (width > IR_TV_START_BIT)  			//  Found Start bit (4T)
 136               	.LM9:
 137 0030 82E1      		ldi r24,hi8(4801)
 138 0032 213C      		cpi r18,lo8(4801)
 139 0034 3807      		cpc r19,r24
 140 0036 58F0      		brlo .L6
 130:../../Eblock_lib/E_io_ir.c **** 			    {
 131:../../Eblock_lib/E_io_ir.c **** 				  stop_bit = 0;
 142               	.LM10:
 143 0038 1092 0000 		sts stop_bit.3,__zero_reg__
 132:../../Eblock_lib/E_io_ir.c **** 				  prev_capture_counter = 0;
 145               	.LM11:
 146 003c 1092 0000 		sts (prev_capture_counter.2)+1,__zero_reg__
 147 0040 1092 0000 		sts prev_capture_counter.2,__zero_reg__
 133:../../Eblock_lib/E_io_ir.c **** 				  ir_code = 0;     			// New code
 149               	.LM12:
 150 0044 1092 0000 		sts (ir_code.4)+1,__zero_reg__
 151 0048 1092 0000 		sts ir_code.4,__zero_reg__
 152 004c 16C0      		rjmp .L5
 153               	.L6:
 154 004e 8091 0000 		lds r24,ir_code.4
 155 0052 9091 0000 		lds r25,(ir_code.4)+1
 156 0056 4091 0000 		lds r20,stop_bit.3
 134:../../Eblock_lib/E_io_ir.c **** 				}
 135:../../Eblock_lib/E_io_ir.c **** 		  else if (width > IR_TV_BIT1)	  		// bit 1 (3T)
 158               	.LM13:
 159 005a 2158      		subi r18,lo8(3201)
 160 005c 3C40      		sbci r19,hi8(3201)
 161 005e 20F0      		brlo .L8
 136:../../Eblock_lib/E_io_ir.c **** 				{
 137:../../Eblock_lib/E_io_ir.c **** 				   ir_code <<= 1;    			//Shift right
 163               	.LM14:
 164 0060 880F      		lsl r24
 165 0062 991F      		rol r25
 138:../../Eblock_lib/E_io_ir.c **** 				   ir_code  |= 1;    			// Or 1
 167               	.LM15:
 168 0064 8160      		ori r24,lo8(1)
 169 0066 02C0      		rjmp .L12
 170               	.L8:
 139:../../Eblock_lib/E_io_ir.c **** 				    stop_bit++;
 140:../../Eblock_lib/E_io_ir.c **** 				}
 141:../../Eblock_lib/E_io_ir.c **** 		        else 	  // bit 0
 142:../../Eblock_lib/E_io_ir.c **** 				{
 143:../../Eblock_lib/E_io_ir.c **** 					ir_code  <<=  1;  //Shift right
 172               	.LM16:
 173 0068 880F      		lsl r24
 174 006a 991F      		rol r25
 175               	.L12:
 176 006c 9093 0000 		sts (ir_code.4)+1,r25
 177 0070 8093 0000 		sts ir_code.4,r24
 144:../../Eblock_lib/E_io_ir.c **** 					stop_bit++;
 179               	.LM17:
 180 0074 4F5F      		subi r20,lo8(-(1))
 181 0076 4093 0000 		sts stop_bit.3,r20
 182               	.L5:
 145:../../Eblock_lib/E_io_ir.c **** 				}
 146:../../Eblock_lib/E_io_ir.c **** 	}
 147:../../Eblock_lib/E_io_ir.c **** 	prev_capture_counter = capture_counter;
 184               	.LM18:
 185 007a 7093 0000 		sts (prev_capture_counter.2)+1,r23
 186 007e 6093 0000 		sts prev_capture_counter.2,r22
 148:../../Eblock_lib/E_io_ir.c **** 	if (stop_bit == IR_TV_STOP_BIT)
 188               	.LM19:
 189 0082 8091 0000 		lds r24,stop_bit.3
 190 0086 8C30      		cpi r24,lo8(12)
 191 0088 39F4      		brne .L10
 149:../../Eblock_lib/E_io_ir.c **** 	{       //End code dispatch command
 150:../../Eblock_lib/E_io_ir.c ****   	    stop_bit = 0;
 193               	.LM20:
 194 008a 1092 0000 		sts stop_bit.3,__zero_reg__
 151:../../Eblock_lib/E_io_ir.c **** 		return ir_code;
 196               	.LM21:
 197 008e 8091 0000 		lds r24,ir_code.4
 198 0092 9091 0000 		lds r25,(ir_code.4)+1
 199 0096 0895      		ret
 200               	.L10:
 152:../../Eblock_lib/E_io_ir.c **** 			
 153:../../Eblock_lib/E_io_ir.c **** //Note if  SELFTEST is selected g_irint = 0;
 154:../../Eblock_lib/E_io_ir.c **** 	}   
 155:../../Eblock_lib/E_io_ir.c **** 	else
 156:../../Eblock_lib/E_io_ir.c **** 		return 0;		// No code detect yet
 202               	.LM22:
 203 0098 80E0      		ldi r24,lo8(0)
 204 009a 90E0      		ldi r25,hi8(0)
 157:../../Eblock_lib/E_io_ir.c **** }
 206               	.LM23:
 207 009c 0895      		ret
 208               	/* epilogue: frame size=0 */
 209               	/* epilogue: noreturn */
 210               	/* epilogue end (size=0) */
 211               	/* function io_ir_decode size 68 (68) */
 218               	.Lscope1:
 219               		.lcomm ir_code.1,2
 222               	.global	io_ir_read
 224               	io_ir_read:
 158:../../Eblock_lib/E_io_ir.c **** 
 159:../../Eblock_lib/E_io_ir.c **** 
 160:../../Eblock_lib/E_io_ir.c **** /*!	\brief  Read or update the IR Signal  
 161:../../Eblock_lib/E_io_ir.c **** 	\param  code       = 0 (READ_IR)
 162:../../Eblock_lib/E_io_ir.c **** 	\n				   > 0  IR_CODE TO WRITE
 163:../../Eblock_lib/E_io_ir.c **** 	\return IR code 0  mean No code detect
 164:../../Eblock_lib/E_io_ir.c **** 	\n		   
 165:../../Eblock_lib/E_io_ir.c **** 	\par Port/Periheral Usage 
 166:../../Eblock_lib/E_io_ir.c **** 	\n   E_TIMER0   ( OC2 for timer2 on ATMEGA32)
 167:../../Eblock_lib/E_io_ir.c **** 	\par Theory of Operation   
 168:../../Eblock_lib/E_io_ir.c **** 	\n   Read of Write the IR code into  static variable. Avoid to use global variable
 169:../../Eblock_lib/E_io_ir.c **** 	\n	 
 170:../../Eblock_lib/E_io_ir.c **** 	\par Pseudo Code
 171:../../Eblock_lib/E_io_ir.c **** 	\n	 	 If code detect return code  and clear the code. This mode code will be read once only
 172:../../Eblock_lib/E_io_ir.c **** 	\n       If it does not detect anything return 0 
 173:../../Eblock_lib/E_io_ir.c **** 	\n       Update the internal code when IR code detected 
 174:../../Eblock_lib/E_io_ir.c **** 	\note	
 175:../../Eblock_lib/E_io_ir.c **** 	\bug    <bug to fix>
 176:../../Eblock_lib/E_io_ir.c **** 
 177:../../Eblock_lib/E_io_ir.c **** 	\author wichai tossamartvorakul  wichi@geartronics.net
 178:../../Eblock_lib/E_io_ir.c **** 	\sa	 <see also two name joined by ::>
 179:../../Eblock_lib/E_io_ir.c **** */       
 180:../../Eblock_lib/E_io_ir.c **** 
 181:../../Eblock_lib/E_io_ir.c **** uint16_t  io_ir_read( uint16_t code)
 182:../../Eblock_lib/E_io_ir.c **** {
 226               	.LM24:
 227               	/* prologue: frame size=0 */
 228               	/* prologue end (size=0) */
 183:../../Eblock_lib/E_io_ir.c **** 	static uint16_t ir_code = 0 ;   // IR code 
 184:../../Eblock_lib/E_io_ir.c ****     if (code)  //  Write IR 
 230               	.LM25:
 231 009e 0097      		sbiw r24,0
 232 00a0 39F0      		breq .L14
 185:../../Eblock_lib/E_io_ir.c **** 	{
 186:../../Eblock_lib/E_io_ir.c ****         ir_code = code;
 234               	.LM26:
 235 00a2 9093 0000 		sts (ir_code.1)+1,r25
 236 00a6 8093 0000 		sts ir_code.1,r24
 187:../../Eblock_lib/E_io_ir.c **** 	    return 0;
 238               	.LM27:
 239 00aa 80E0      		ldi r24,lo8(0)
 240 00ac 90E0      		ldi r25,hi8(0)
 241 00ae 0895      		ret
 242               	.L14:
 188:../../Eblock_lib/E_io_ir.c **** 	}
 189:../../Eblock_lib/E_io_ir.c **** 	else
 190:../../Eblock_lib/E_io_ir.c **** 	{
 191:../../Eblock_lib/E_io_ir.c **** 	    code = ir_code;
 244               	.LM28:
 245 00b0 8091 0000 		lds r24,ir_code.1
 246 00b4 9091 0000 		lds r25,(ir_code.1)+1
 192:../../Eblock_lib/E_io_ir.c **** 		ir_code = 0;     // Clear value after read
 248               	.LM29:
 249 00b8 1092 0000 		sts (ir_code.1)+1,__zero_reg__
 250 00bc 1092 0000 		sts ir_code.1,__zero_reg__
 193:../../Eblock_lib/E_io_ir.c **** 	    return code;
 194:../../Eblock_lib/E_io_ir.c **** 	}
 195:../../Eblock_lib/E_io_ir.c **** }
 252               	.LM30:
 253 00c0 0895      		ret
 254               	/* epilogue: frame size=0 */
 255               	/* epilogue: noreturn */
 256               	/* epilogue end (size=0) */
 257               	/* function io_ir_read size 18 (18) */
 262               	.Lscope2:
 263               		.lcomm ir_code.0,2
 265               	.global	__vector_6
 267               	__vector_6:
 196:../../Eblock_lib/E_io_ir.c **** 
 197:../../Eblock_lib/E_io_ir.c **** 
 198:../../Eblock_lib/E_io_ir.c **** 
 199:../../Eblock_lib/E_io_ir.c **** /*!	\brief  This routine will detect/ process the Sony IR remote command. Protocol using Sony remot
 200:../../Eblock_lib/E_io_ir.c **** 	\param  Infrared signal from  ICP pin	  
 201:../../Eblock_lib/E_io_ir.c **** 	\return none
 202:../../Eblock_lib/E_io_ir.c **** 	\n		   
 203:../../Eblock_lib/E_io_ir.c **** 	\par Port/Periheral Usage 
 204:../../Eblock_lib/E_io_ir.c **** 	\n   E_TIMER0   ( OC2 for timer2 on ATMEGA32)
 205:../../Eblock_lib/E_io_ir.c **** 	\par Theory of Operation   
 206:../../Eblock_lib/E_io_ir.c **** 	\n   Measure the pulse length by get the value of ICR1 (16 bits) Input capture register. ICR1 
 207:../../Eblock_lib/E_io_ir.c **** 	\n   will continuously count. When the pulse go to falling edge we keep the value of ICR1 and when
 208:../../Eblock_lib/E_io_ir.c **** 	\n   the pulse go to rising edge. We capture the value of ICR1 again and substrate 2 values, then 
 209:../../Eblock_lib/E_io_ir.c **** 	\n	 we get the pulse width  for start bit.  But for check on bit 1 or 0 we measure the entire
 210:../../Eblock_lib/E_io_ir.c **** 	\n   wave form  Pulse on-off period. This is a lot of easier than measure only pulse on period.
 211:../../Eblock_lib/E_io_ir.c **** 	\n   Because we can set interrupt at rising edge only.
 212:../../Eblock_lib/E_io_ir.c **** 	\n	 
 213:../../Eblock_lib/E_io_ir.c **** 	\par Pseudo Code
 214:../../Eblock_lib/E_io_ir.c **** 	\n   - Set to rising edge to calculage for start bit
 215:../../Eblock_lib/E_io_ir.c **** 	\n	 - Sent the ICR1 value to decode the remote signal
 216:../../Eblock_lib/E_io_ir.c **** 	\n   - If IR complete code detect save the ir_code and set trigger to falling edge again
 217:../../Eblock_lib/E_io_ir.c **** 	\n		(Wait for start bit)
 218:../../Eblock_lib/E_io_ir.c **** 	\note   
 219:../../Eblock_lib/E_io_ir.c **** 	\bug    <bug to fix>
 220:../../Eblock_lib/E_io_ir.c **** 
 221:../../Eblock_lib/E_io_ir.c **** 	\author wichai tossamartvorakul  wichi@geartronics.net
 222:../../Eblock_lib/E_io_ir.c **** 	\sa	 <see also two name joined by ::>
 223:../../Eblock_lib/E_io_ir.c **** */     
 224:../../Eblock_lib/E_io_ir.c ****  
 225:../../Eblock_lib/E_io_ir.c ****  SIGNAL(SIG_INPUT_CAPTURE1)
 226:../../Eblock_lib/E_io_ir.c **** {
 269               	.LM31:
 270               	/* prologue: frame size=0 */
 271 00c2 1F92      		push __zero_reg__
 272 00c4 0F92      		push __tmp_reg__
 273 00c6 0FB6      		in __tmp_reg__,__SREG__
 274 00c8 0F92      		push __tmp_reg__
 275 00ca 1124      		clr __zero_reg__
 276 00cc 2F93      		push r18
 277 00ce 3F93      		push r19
 278 00d0 4F93      		push r20
 279 00d2 5F93      		push r21
 280 00d4 6F93      		push r22
 281 00d6 7F93      		push r23
 282 00d8 8F93      		push r24
 283 00da 9F93      		push r25
 284 00dc AF93      		push r26
 285 00de BF93      		push r27
 286 00e0 EF93      		push r30
 287 00e2 FF93      		push r31
 288               	/* prologue end (size=17) */
 227:../../Eblock_lib/E_io_ir.c **** 	static uint16_t  ir_code;   // Save time to allocate memory
 228:../../Eblock_lib/E_io_ir.c **** 	ir_code = ICR1;  // Need to get ICR1 first before any operation
 290               	.LM32:
 291 00e4 86B5      		in r24,70-0x20
 292 00e6 97B5      		in r25,(70)+1-0x20
 293 00e8 9093 0000 		sts (ir_code.0)+1,r25
 294 00ec 8093 0000 		sts ir_code.0,r24
 229:../../Eblock_lib/E_io_ir.c ****     set_timer_mode (TIMER1B,ICP_RISING, OC_DISCONNECT, CLK_BY_8);
 296               	.LM33:
 297 00f0 22E0      		ldi r18,lo8(2)
 298 00f2 40E0      		ldi r20,lo8(0)
 299 00f4 60EC      		ldi r22,lo8(-64)
 300 00f6 822F      		mov r24,r18
 301 00f8 0E94 0000 		call set_timer_mode
 230:../../Eblock_lib/E_io_ir.c ****     cli();  
 303               	.LM34:
 304               	/* #APP */
 305 00fc F894      		cli
 231:../../Eblock_lib/E_io_ir.c **** 	ir_code  = io_ir_decode(ir_code);
 307               	.LM35:
 308               	/* #NOAPP */
 309 00fe 8091 0000 		lds r24,ir_code.0
 310 0102 9091 0000 		lds r25,(ir_code.0)+1
 311 0106 0E94 0000 		call io_ir_decode
 312 010a 9093 0000 		sts (ir_code.0)+1,r25
 313 010e 8093 0000 		sts ir_code.0,r24
 232:../../Eblock_lib/E_io_ir.c **** 	if (ir_code)
 315               	.LM36:
 316 0112 0097      		sbiw r24,0
 317 0114 41F0      		breq .L17
 233:../../Eblock_lib/E_io_ir.c **** 	{       
 234:../../Eblock_lib/E_io_ir.c ****         io_ir_read( ir_code);    //End code dispatch command send ir_code to keep in buffer
 319               	.LM37:
 320 0116 0E94 0000 		call io_ir_read
 235:../../Eblock_lib/E_io_ir.c **** // Change to falling edge to wait for start bit 
 236:../../Eblock_lib/E_io_ir.c **** 		set_timer_mode (TIMER1B,ICP_FALLING, OC_DISCONNECT, CLK_BY_8);	
 322               	.LM38:
 323 011a 22E0      		ldi r18,lo8(2)
 324 011c 40E0      		ldi r20,lo8(0)
 325 011e 60E8      		ldi r22,lo8(-128)
 326 0120 822F      		mov r24,r18
 327 0122 0E94 0000 		call set_timer_mode
 328               	.L17:
 237:../../Eblock_lib/E_io_ir.c **** 	}   
 238:../../Eblock_lib/E_io_ir.c **** 	sei();
 330               	.LM39:
 331               	/* #APP */
 332 0126 7894      		sei
 333               	/* #NOAPP */
 334               	/* epilogue: frame size=0 */
 335 0128 FF91      		pop r31
 336 012a EF91      		pop r30
 337 012c BF91      		pop r27
 338 012e AF91      		pop r26
 339 0130 9F91      		pop r25
 340 0132 8F91      		pop r24
 341 0134 7F91      		pop r23
 342 0136 6F91      		pop r22
 343 0138 5F91      		pop r21
 344 013a 4F91      		pop r20
 345 013c 3F91      		pop r19
 346 013e 2F91      		pop r18
 347 0140 0F90      		pop __tmp_reg__
 348 0142 0FBE      		out __SREG__,__tmp_reg__
 349 0144 0F90      		pop __tmp_reg__
 350 0146 1F90      		pop __zero_reg__
 351 0148 1895      		reti
 352               	/* epilogue end (size=17) */
 353               	/* function __vector_6 size 70 (36) */
 358               	.Lscope3:
 359               		.text
 361               	Letext:
 362               	/* File "../../Eblock_lib/E_io_ir.c": code  169 = 0x00a9 ( 134), prologues  17, epilogues  18 */
DEFINED SYMBOLS
                            *ABS*:00000000 E_io_ir.c
C:\DOCUME~1\tos\LOCALS~1\Temp/ccmsaaaa.s:3      *ABS*:0000003f __SREG__
C:\DOCUME~1\tos\LOCALS~1\Temp/ccmsaaaa.s:4      *ABS*:0000003e __SP_H__
C:\DOCUME~1\tos\LOCALS~1\Temp/ccmsaaaa.s:5      *ABS*:0000003d __SP_L__
C:\DOCUME~1\tos\LOCALS~1\Temp/ccmsaaaa.s:6      *ABS*:00000000 __tmp_reg__
C:\DOCUME~1\tos\LOCALS~1\Temp/ccmsaaaa.s:7      *ABS*:00000001 __zero_reg__
C:\DOCUME~1\tos\LOCALS~1\Temp/ccmsaaaa.s:78     .text:00000000 io_ir_init
                             .bss:00000000 prev_capture_counter.2
C:\DOCUME~1\tos\LOCALS~1\Temp/ccmsaaaa.s:109    .bss:00000002 stop_bit.3
C:\DOCUME~1\tos\LOCALS~1\Temp/ccmsaaaa.s:110    .bss:00000003 ir_code.4
C:\DOCUME~1\tos\LOCALS~1\Temp/ccmsaaaa.s:116    .text:00000018 io_ir_decode
C:\DOCUME~1\tos\LOCALS~1\Temp/ccmsaaaa.s:111    .bss:00000005 ir_code.1
C:\DOCUME~1\tos\LOCALS~1\Temp/ccmsaaaa.s:224    .text:0000009e io_ir_read
C:\DOCUME~1\tos\LOCALS~1\Temp/ccmsaaaa.s:219    .bss:00000007 ir_code.0
C:\DOCUME~1\tos\LOCALS~1\Temp/ccmsaaaa.s:267    .text:000000c2 __vector_6
C:\DOCUME~1\tos\LOCALS~1\Temp/ccmsaaaa.s:361    .text:0000014a Letext

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
set_timer_mode
