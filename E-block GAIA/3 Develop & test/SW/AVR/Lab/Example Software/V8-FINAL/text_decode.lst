   1               		.file	"text_decode.c"
   2               		.arch atmega32
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  73               	.global	delimiter
  74               		.section	.progmem.data,"a",@progbits
  77               	delimiter:
  78 0000 3D        		.byte	61
  79 0001 22        		.byte	34
  80 0002 20        		.byte	32
  81 0003 09        		.byte	9
  82 0004 2C        		.byte	44
  83 0005 0D        		.byte	13
  84 0006 0A        		.byte	10
  85 0007 00        		.byte	0
  86               	.global	text_cmd
  89               	text_cmd:
  90 0008 6D6F 746F 		.string	"motor"
  90      7200 
  91 000e 0000 0000 		.skip 4,0
  92 0012 7370 6565 		.string	"speed"
  92      6400 
  93 0018 0000 0000 		.skip 4,0
  94 001c 616E 676C 		.string	"angle"
  94      6500 
  95 0022 0000 0000 		.skip 4,0
  96 0026 7072 6F67 		.string	"program"
  96      7261 6D00 
  97 002e 0000      		.skip 2,0
  98 0030 7361 7665 		.string	"save"
  98      00
  99 0035 0000 0000 		.skip 5,0
  99      00
 100 003a 7275 6E00 		.string	"run"
 101 003e 0000 0000 		.skip 6,0
 101      0000 
 102 0044 00        		.string	""
 103 0045 0000 0000 		.skip 9,0
 103      0000 0000 
 103      00
 104               		.lcomm i.0,2
 105               		.text
 109               	.global	text_decode
 111               	text_decode:
   1:text_decode.c **** /* Text command decode 
   2:text_decode.c ****     
   3:text_decode.c **** 	
   4:text_decode.c **** */
   5:text_decode.c **** #include <stdlib.h>
   6:text_decode.c **** #include <string.h>
   7:text_decode.c **** #include "text_decode.h"
   8:text_decode.c **** 
   9:text_decode.c **** 
  10:text_decode.c **** 
  11:text_decode.c **** /* Command decode from g_rcv_buffer will decode and action according to command in buffer
  12:text_decode.c **** Delimeter  {=, SPACE,  ", Comma, Carriage return, Tab, Line Feed}
  13:text_decode.c **** 
  14:text_decode.c **** FORMAT  =  {Cmd =  Argument} Seperate command with Delimiter
  15:text_decode.c **** 		   End line with CR, LF
  16:text_decode.c **** 		   Text " " will be ignores for white space etc. until pair of " found 
  17:text_decode.c **** 		   
  18:text_decode.c **** 
  19:text_decode.c **** 
  20:text_decode.c **** */
  21:text_decode.c **** 
  22:text_decode.c **** 
  23:text_decode.c **** // ENd with NULL to end of checking
  24:text_decode.c **** const uint8_t text_cmd[CMD_NUM][CMD_LENGTH] PROGMEM  = {"motor","speed","angle","program","save","r
  25:text_decode.c **** 
  26:text_decode.c **** const uint8_t delimiter[] PROGMEM = {0x3D,0x22,0x20,0x09,0x2C,0x0D,0x0A,0x00};  
  27:text_decode.c **** //const uint8_t white_space[] PROGMEM = {0x20,0x09,0x00}; // TAke this out got problems ??????
  28:text_decode.c **** 
  29:text_decode.c **** /*  
  30:text_decode.c **** Decode text to command number and command arguments. Can called repeatly until end of buffer found 
  31:text_decode.c **** (Return 0xFF)
  32:text_decode.c ****   INPUT : Pointer start buffer to decode
  33:text_decode.c ****         : Pointer of command argument
  34:text_decode.c ****   OUTPUT: cmd number  0 = not found 
  35:text_decode.c **** 	    : Pointer to command argument in buffer
  36:text_decode.c **** 		: Pointer for next char to decode in buffer
  37:text_decode.c **** Will read data in buffer and put the argumnet in start of buffer
  38:text_decode.c **** 
  39:text_decode.c **** */ 
  40:text_decode.c **** 
  41:text_decode.c **** uint8_t text_decode (uint8_t *buffer, uint8_t *cmd_argument)
  42:text_decode.c **** {
 113               	.LM1:
 114               	/* prologue: frame size=0 */
 115 0000 CF92      		push r12
 116 0002 DF92      		push r13
 117 0004 EF92      		push r14
 118 0006 FF92      		push r15
 119 0008 0F93      		push r16
 120 000a 1F93      		push r17
 121 000c CF93      		push r28
 122               	/* prologue end (size=7) */
 123 000e 7C01      		movw r14,r24
  43:text_decode.c **** 
  44:text_decode.c ****  uint8_t  found,ch,ch2,cmd_no,j,k,index,cmd_complete;
  45:text_decode.c ****  uint8_t  state = WAIT_CMD_STATE, quote  = 0;
 125               	.LM2:
 126 0010 51E0      		ldi r21,lo8(1)
  46:text_decode.c ****  static uint16_t i=0; // Keep pointer for next command decode
  47:text_decode.c ****  cmd_complete = 0;
 128               	.LM3:
 129 0012 CC24      		clr r12
  48:text_decode.c ****  cmd_no 	= 0;
 131               	.LM4:
 132 0014 DC2C      		mov r13,r12
  49:text_decode.c ****  index 		= 0;
 134               	.LM5:
 135 0016 4C2D      		mov r20,r12
  50:text_decode.c ****  
  51:text_decode.c ****  cmd_argument  = buffer;
  52:text_decode.c ****  
  53:text_decode.c ****  while (*(buffer+i))	  		//End with NULL
  54:text_decode.c ****  {
  55:text_decode.c **** // Check with delimiter
  56:text_decode.c **** 
  57:text_decode.c ****  	 j = 0;
  58:text_decode.c **** 	 found = 0;
  59:text_decode.c **** 	
  60:text_decode.c **** 	switch (state)
  61:text_decode.c **** 	{
  62:text_decode.c **** 	  case WAIT_CMD_STATE:   // If found first character in command table  then go to get_cmd state
  63:text_decode.c ****  		j = 0;
  64:text_decode.c **** 		while ((ch = pgm_read_byte(&text_cmd[j][0])))     //Check first charaters in cmd table
  65:text_decode.c **** 		{ 
  66:text_decode.c **** 		  if (*(buffer+i) == ch)
  67:text_decode.c **** 		  {
  68:text_decode.c **** 			state = GET_CMD_STATE;   // Found delimiter
  69:text_decode.c **** 			*(cmd_argument) = ch;
  70:text_decode.c **** 			index = 1;
  71:text_decode.c **** 			break; 
  72:text_decode.c **** 		  }
  73:text_decode.c **** 		 j++;
  74:text_decode.c **** 		}  
  75:text_decode.c **** 	    break;
  76:text_decode.c **** 	  case GET_CMD_STATE:
  77:text_decode.c **** 	    ch = *(buffer+i);
  78:text_decode.c ****         j = 0; 
  79:text_decode.c **** 		found = 0;
  80:text_decode.c **** 	  	while ((ch2 = pgm_read_byte(&delimiter[j])))   //Check delimiter End with NULL
  81:text_decode.c **** 		{  
  82:text_decode.c **** 		   if ( ch == ch2)
  83:text_decode.c **** 		   {
  84:text_decode.c ****               found = 1;
  85:text_decode.c ****               break;
  86:text_decode.c **** 		   } 	 
  87:text_decode.c ****            j++;	
  88:text_decode.c **** 		}
  89:text_decode.c **** 		if (found)
  90:text_decode.c **** 		{
  91:text_decode.c ****         	*(cmd_argument+index) = 0x00;
  92:text_decode.c **** 		     if (ch == '=')
  93:text_decode.c **** 			 {
  94:text_decode.c **** // Check command number 
  95:text_decode.c ****   				for (k = 0; k < CMD_NUM ; k++)
  96:text_decode.c **** 				{
  97:text_decode.c **** 					if (!(strcasecmp_P(cmd_argument,&text_cmd[k][0])))  // Found then keep command
  98:text_decode.c **** 					{
  99:text_decode.c **** 						cmd_no  = k+1;   // Start from 0 
 100:text_decode.c **** 						break;
 101:text_decode.c **** 					}
 102:text_decode.c **** 				}
 103:text_decode.c **** // clear index
 104:text_decode.c ****   				index = 0;
 105:text_decode.c **** 			    state = WAIT_ARG_STATE;	
 106:text_decode.c **** 			 }	
 107:text_decode.c **** 		}
 108:text_decode.c **** 		else
 109:text_decode.c **** 		{
 110:text_decode.c **** 			*(cmd_argument+index) = ch;
 111:text_decode.c **** 			index++;		
 112:text_decode.c **** 		}
 113:text_decode.c **** 		break;
 114:text_decode.c **** 		
 115:text_decode.c **** 	  case WAIT_ARG_STATE:
 116:text_decode.c **** 		ch = *(buffer+i);
 117:text_decode.c ****         j = 0; 
 118:text_decode.c **** 		found = 0;
 119:text_decode.c **** 	  	while ((ch2 = pgm_read_byte(&delimiter[j])))   //Check delimiter End with NULL
 120:text_decode.c **** 		{  
 121:text_decode.c **** 		   if ( ch == ch2)
 122:text_decode.c **** 		   {
 123:text_decode.c ****               found = 1;
 124:text_decode.c ****               break;
 125:text_decode.c **** 		   } 	 
 126:text_decode.c ****            j++;	
 127:text_decode.c **** 		}
 128:text_decode.c **** 				
 129:text_decode.c **** 		if ( ch == '"')   // Start quote
 130:text_decode.c **** 		{
 131:text_decode.c **** 			quote ^= 1;   // Toggle quote	
 132:text_decode.c **** 			state = GET_ARG_STATE;   
 133:text_decode.c ****  			index = 0;
 134:text_decode.c **** 		}
 135:text_decode.c **** 		
 136:text_decode.c **** 		if (!found)    // Not delimiter start get Argument
 137:text_decode.c **** 		{
 138:text_decode.c **** 			state = GET_ARG_STATE;   
 139:text_decode.c **** 			*(cmd_argument) = ch;
 140:text_decode.c **** 			index = 1;
 141:text_decode.c **** 		}
 142:text_decode.c **** 		break;	
 143:text_decode.c **** 	  case	GET_ARG_STATE:
 144:text_decode.c **** 	  	ch = *(buffer+i);
 145:text_decode.c ****         j = 0; 
 146:text_decode.c **** 		found = 0;
 147:text_decode.c **** 	  	while ((ch2 = pgm_read_byte(&delimiter[j])))   //Check delimiter End with NULL
 148:text_decode.c **** 		{  
 149:text_decode.c **** 		   if ( ch == ch2)
 150:text_decode.c **** 		   {
 151:text_decode.c ****               found = 1;
 152:text_decode.c ****               break;
 153:text_decode.c **** 		   } 	 
 154:text_decode.c ****            j++;	
 155:text_decode.c **** 		}
 156:text_decode.c ****  		if ( ch == '"')     // End quote
 157:text_decode.c **** 		{
 158:text_decode.c **** 			quote ^= 1;   // Toggle quote	
 159:text_decode.c ****    		}
 160:text_decode.c **** 		if ( quote)
 161:text_decode.c **** 		{
 162:text_decode.c ****          	found = 0; //  ignore all characters after the quote until found quote again
 163:text_decode.c **** // Cancel quote
 164:text_decode.c ****             
 165:text_decode.c **** 		}	
 166:text_decode.c **** 		if (found)
 167:text_decode.c **** 		{	
 168:text_decode.c ****             cmd_complete = 1;
 169:text_decode.c **** 			*(cmd_argument+index) = 0;
 170:text_decode.c **** 		    state = WAIT_CMD_STATE;
 171:text_decode.c **** 		}
 172:text_decode.c **** 		else
 173:text_decode.c **** 		{
 174:text_decode.c **** 			*(cmd_argument+index) = ch;
 175:text_decode.c **** 			index++;		
 176:text_decode.c **** 		}  
 177:text_decode.c **** 		break;
 178:text_decode.c **** 	}
 179:text_decode.c **** 	
 180:text_decode.c **** 	if(cmd_complete)   // COmmand both cmd number and argument
 181:text_decode.c **** 	{
 182:text_decode.c **** 		return cmd_no;	 	 
 183:text_decode.c **** 	}
 184:text_decode.c **** 	i++;
 137               	.LM6:
 138 0018 E091 0000 		lds r30,i.0
 139 001c F091 0000 		lds r31,(i.0)+1
 140               	.L55:
 142               	.LM7:
 143 0020 EE0D      		add r30,r14
 144 0022 FF1D      		adc r31,r15
 145 0024 8081      		ld r24,Z
 146 0026 8823      		tst r24
 147 0028 09F4      		brne .+2
 148 002a C1C0      		rjmp .L43
 150               	.LM8:
 151 002c 30E0      		ldi r19,lo8(0)
 153               	.LM9:
 154 002e 852F      		mov r24,r21
 155 0030 9927      		clr r25
 156 0032 8230      		cpi r24,2
 157 0034 9105      		cpc r25,__zero_reg__
 158 0036 79F1      		breq .L10
 159 0038 8330      		cpi r24,3
 160 003a 9105      		cpc r25,__zero_reg__
 161 003c 1CF4      		brge .L39
 162 003e 0197      		sbiw r24,1
 163 0040 59F0      		breq .L5
 164 0042 ABC0      		rjmp .L40
 165               	.L39:
 166 0044 8330      		cpi r24,3
 167 0046 9105      		cpc r25,__zero_reg__
 168 0048 09F4      		brne .+2
 169 004a 5AC0      		rjmp .L23
 170 004c 0497      		sbiw r24,4
 171 004e 09F4      		brne .+2
 172 0050 7BC0      		rjmp .L30
 173 0052 A3C0      		rjmp .L40
 174               	.L49:
 176               	.LM10:
 177 0054 52E0      		ldi r21,lo8(2)
 178 0056 72C0      		rjmp .L59
 179               	.L5:
 181               	.LM11:
 182 0058 232F      		mov r18,r19
 183               	.LBB2:
 185               	.LM12:
 186 005a E0E0      		ldi r30,lo8(text_cmd)
 187 005c F0E0      		ldi r31,hi8(text_cmd)
 188               	/* #APP */
 189 005e 9491      		lpm r25, Z
 190               		
 191               	/* #NOAPP */
 192               	.LBE2:
 193 0060 9923      		tst r25
 194 0062 09F4      		brne .+2
 195 0064 9AC0      		rjmp .L40
 196 0066 E091 0000 		lds r30,i.0
 197 006a F091 0000 		lds r31,(i.0)+1
 198 006e EE0D      		add r30,r14
 199 0070 FF1D      		adc r31,r15
 200 0072 8081      		ld r24,Z
 201 0074 3AE0      		ldi r19,lo8(10)
 202               	.L9:
 204               	.LM13:
 205 0076 8917      		cp r24,r25
 206 0078 69F3      		breq .L49
 208               	.LM14:
 209 007a 2F5F      		subi r18,lo8(-(1))
 210               	.LBB3:
 211 007c 239F      		mul r18,r19
 212 007e F001      		movw r30,r0
 213 0080 1124      		clr r1
 214 0082 E050      		subi r30,lo8(-(text_cmd))
 215 0084 F040      		sbci r31,hi8(-(text_cmd))
 216               	/* #APP */
 217 0086 9491      		lpm r25, Z
 218               		
 219               	/* #NOAPP */
 220               	.LBE3:
 221 0088 9923      		tst r25
 222 008a A9F7      		brne .L9
 224               	.LM15:
 225 008c 86C0      		rjmp .L40
 226               	.L50:
 228               	.LM16:
 229 008e 31E0      		ldi r19,lo8(1)
 231               	.LM17:
 232 0090 17C0      		rjmp .L12
 233               	.L51:
 235               	.LM18:
 236 0092 C22E      		mov r12,r18
 238               	.LM19:
 239 0094 30C0      		rjmp .L18
 240               	.L10:
 242               	.LM20:
 243 0096 E091 0000 		lds r30,i.0
 244 009a F091 0000 		lds r31,(i.0)+1
 245 009e EE0D      		add r30,r14
 246 00a0 FF1D      		adc r31,r15
 247 00a2 9081      		ld r25,Z
 249               	.LM21:
 250 00a4 232F      		mov r18,r19
 251               	.LBB4:
 253               	.LM22:
 254 00a6 E0E0      		ldi r30,lo8(delimiter)
 255 00a8 F0E0      		ldi r31,hi8(delimiter)
 256               	.L56:
 257               	/* #APP */
 258 00aa 8491      		lpm r24, Z
 259               		
 260               	/* #NOAPP */
 261               	.LBE4:
 262 00ac 8823      		tst r24
 263 00ae 41F0      		breq .L12
 265               	.LM23:
 266 00b0 9817      		cp r25,r24
 267 00b2 69F3      		breq .L50
 269               	.LM24:
 270 00b4 2F5F      		subi r18,lo8(-(1))
 271               	.LBB5:
 272 00b6 E22F      		mov r30,r18
 273 00b8 FF27      		clr r31
 274 00ba E050      		subi r30,lo8(-(delimiter))
 275 00bc F040      		sbci r31,hi8(-(delimiter))
 276 00be F5CF      		rjmp .L56
 277               	.L12:
 278 00c0 E42F      		mov r30,r20
 279 00c2 FF27      		clr r31
 280               	.LBE5:
 282               	.LM25:
 283 00c4 3323      		tst r19
 284 00c6 09F4      		brne .+2
 285 00c8 64C0      		rjmp .L37
 287               	.LM26:
 288 00ca EE0D      		add r30,r14
 289 00cc FF1D      		adc r31,r15
 290 00ce 1082      		st Z,__zero_reg__
 292               	.LM27:
 293 00d0 9D33      		cpi r25,lo8(61)
 294 00d2 09F0      		breq .+2
 295 00d4 62C0      		rjmp .L40
 297               	.LM28:
 298 00d6 C081      		ld r28,Z
 299 00d8 00E0      		ldi r16,lo8(text_cmd)
 300 00da 10E0      		ldi r17,hi8(text_cmd)
 301               	.L21:
 303               	.LM29:
 304 00dc B801      		movw r22,r16
 305 00de C701      		movw r24,r14
 306 00e0 0E94 0000 		call strcasecmp_P
 307 00e4 2C2F      		mov r18,r28
 308 00e6 2F5F      		subi r18,lo8(-(1))
 309 00e8 892B      		or r24,r25
 310 00ea 99F2      		breq .L51
 312               	.LM30:
 313 00ec C22F      		mov r28,r18
 314 00ee 065F      		subi r16,lo8(-(10))
 315 00f0 1F4F      		sbci r17,hi8(-(10))
 316 00f2 2730      		cpi r18,lo8(7)
 317 00f4 98F3      		brlo .L21
 318               	.L18:
 320               	.LM31:
 321 00f6 40E0      		ldi r20,lo8(0)
 323               	.LM32:
 324 00f8 53E0      		ldi r21,lo8(3)
 325 00fa 4FC0      		rjmp .L40
 326               	.L52:
 328               	.LM33:
 329 00fc 31E0      		ldi r19,lo8(1)
 331               	.LM34:
 332 00fe 15C0      		rjmp .L25
 333               	.L23:
 335               	.LM35:
 336 0100 E091 0000 		lds r30,i.0
 337 0104 F091 0000 		lds r31,(i.0)+1
 338 0108 EE0D      		add r30,r14
 339 010a FF1D      		adc r31,r15
 340 010c 9081      		ld r25,Z
 342               	.LM36:
 343 010e 232F      		mov r18,r19
 344               	.LBB6:
 346               	.LM37:
 347 0110 E0E0      		ldi r30,lo8(delimiter)
 348 0112 F0E0      		ldi r31,hi8(delimiter)
 349               	.L57:
 350               	/* #APP */
 351 0114 8491      		lpm r24, Z
 352               		
 353               	/* #NOAPP */
 354               	.LBE6:
 355 0116 8823      		tst r24
 356 0118 41F0      		breq .L25
 358               	.LM38:
 359 011a 9817      		cp r25,r24
 360 011c 79F3      		breq .L52
 362               	.LM39:
 363 011e 2F5F      		subi r18,lo8(-(1))
 364               	.LBB7:
 365 0120 E22F      		mov r30,r18
 366 0122 FF27      		clr r31
 367 0124 E050      		subi r30,lo8(-(delimiter))
 368 0126 F040      		sbci r31,hi8(-(delimiter))
 369 0128 F5CF      		rjmp .L57
 370               	.L25:
 371               	.LBE7:
 373               	.LM40:
 374 012a 9232      		cpi r25,lo8(34)
 375 012c 21F4      		brne .L28
 377               	.LM41:
 378 012e 81E0      		ldi r24,lo8(1)
 379 0130 D826      		eor r13,r24
 381               	.LM42:
 382 0132 54E0      		ldi r21,lo8(4)
 384               	.LM43:
 385 0134 40E0      		ldi r20,lo8(0)
 386               	.L28:
 388               	.LM44:
 389 0136 3323      		tst r19
 390 0138 81F5      		brne .L40
 392               	.LM45:
 393 013a 54E0      		ldi r21,lo8(4)
 394               	.L59:
 396               	.LM46:
 397 013c F701      		movw r30,r14
 398 013e 9083      		st Z,r25
 400               	.LM47:
 401 0140 41E0      		ldi r20,lo8(1)
 403               	.LM48:
 404 0142 2BC0      		rjmp .L40
 405               	.L53:
 407               	.LM49:
 408 0144 31E0      		ldi r19,lo8(1)
 410               	.LM50:
 411 0146 15C0      		rjmp .L32
 412               	.L30:
 414               	.LM51:
 415 0148 E091 0000 		lds r30,i.0
 416 014c F091 0000 		lds r31,(i.0)+1
 417 0150 EE0D      		add r30,r14
 418 0152 FF1D      		adc r31,r15
 419 0154 9081      		ld r25,Z
 421               	.LM52:
 422 0156 232F      		mov r18,r19
 423               	.LBB8:
 425               	.LM53:
 426 0158 E0E0      		ldi r30,lo8(delimiter)
 427 015a F0E0      		ldi r31,hi8(delimiter)
 428               	.L58:
 429               	/* #APP */
 430 015c 8491      		lpm r24, Z
 431               		
 432               	/* #NOAPP */
 433               	.LBE8:
 434 015e 8823      		tst r24
 435 0160 41F0      		breq .L32
 437               	.LM54:
 438 0162 9817      		cp r25,r24
 439 0164 79F3      		breq .L53
 441               	.LM55:
 442 0166 2F5F      		subi r18,lo8(-(1))
 443               	.LBB9:
 444 0168 E22F      		mov r30,r18
 445 016a FF27      		clr r31
 446 016c E050      		subi r30,lo8(-(delimiter))
 447 016e F040      		sbci r31,hi8(-(delimiter))
 448 0170 F5CF      		rjmp .L58
 449               	.L32:
 450               	.LBE9:
 452               	.LM56:
 453 0172 9232      		cpi r25,lo8(34)
 454 0174 11F4      		brne .L35
 456               	.LM57:
 457 0176 81E0      		ldi r24,lo8(1)
 458 0178 D826      		eor r13,r24
 459               	.L35:
 461               	.LM58:
 462 017a D110      		cpse r13,__zero_reg__
 464               	.LM59:
 465 017c 30E0      		ldi r19,lo8(0)
 466               	.L36:
 467 017e E42F      		mov r30,r20
 468 0180 FF27      		clr r31
 470               	.LM60:
 471 0182 3323      		tst r19
 472 0184 31F0      		breq .L37
 474               	.LM61:
 475 0186 EE0D      		add r30,r14
 476 0188 FF1D      		adc r31,r15
 477 018a 1082      		st Z,__zero_reg__
 479               	.LM62:
 480 018c 8C2D      		mov r24,r12
 481 018e 9927      		clr r25
 482 0190 14C0      		rjmp .L1
 483               	.L37:
 485               	.LM63:
 486 0192 EE0D      		add r30,r14
 487 0194 FF1D      		adc r31,r15
 488 0196 9083      		st Z,r25
 490               	.LM64:
 491 0198 4F5F      		subi r20,lo8(-(1))
 492               	.L40:
 494               	.LM65:
 495 019a E091 0000 		lds r30,i.0
 496 019e F091 0000 		lds r31,(i.0)+1
 497 01a2 3196      		adiw r30,1
 498 01a4 F093 0000 		sts (i.0)+1,r31
 499 01a8 E093 0000 		sts i.0,r30
 500 01ac 39CF      		rjmp .L55
 501               	.L43:
 185:text_decode.c ****  }
 186:text_decode.c ****   i = 0;
 503               	.LM66:
 504 01ae 1092 0000 		sts (i.0)+1,__zero_reg__
 505 01b2 1092 0000 		sts i.0,__zero_reg__
 187:text_decode.c ****   return 0xFF;  // End of Buffer
 507               	.LM67:
 508 01b6 8FEF      		ldi r24,lo8(255)
 509 01b8 90E0      		ldi r25,hi8(255)
 510               	.L1:
 511               	/* epilogue: frame size=0 */
 512 01ba CF91      		pop r28
 513 01bc 1F91      		pop r17
 514 01be 0F91      		pop r16
 515 01c0 FF90      		pop r15
 516 01c2 EF90      		pop r14
 517 01c4 DF90      		pop r13
 518 01c6 CF90      		pop r12
 519 01c8 0895      		ret
 520               	/* epilogue end (size=8) */
 521               	/* function text_decode size 247 (232) */
 541               	.Lscope0:
 544               		.text
 546               	Letext:
 547               	/* File "text_decode.c": code  247 = 0x00f7 ( 232), prologues   7, epilogues   8 */
DEFINED SYMBOLS
                            *ABS*:00000000 text_decode.c
                            *ABS*:0000003f __SREG__
                            *ABS*:0000003e __SP_H__
                            *ABS*:0000003d __SP_L__
                            *ABS*:00000000 __tmp_reg__
                            *ABS*:00000001 __zero_reg__
C:\DOCUME~1\tos\LOCALS~1\Temp/cc4abaaa.s:77     .progmem.data:00000000 delimiter
C:\DOCUME~1\tos\LOCALS~1\Temp/cc4abaaa.s:89     .progmem.data:00000008 text_cmd
                             .bss:00000000 i.0
C:\DOCUME~1\tos\LOCALS~1\Temp/cc4abaaa.s:111    .text:00000000 text_decode
C:\DOCUME~1\tos\LOCALS~1\Temp/cc4abaaa.s:546    .text:000001ca Letext

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
strcasecmp_P
