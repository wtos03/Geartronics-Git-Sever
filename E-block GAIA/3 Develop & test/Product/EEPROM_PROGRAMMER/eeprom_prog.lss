
eeprom_prog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007b2  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000007b2  00000846  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001f7  00800060  00800060  00000846  2**0
                  ALLOC
  3 .noinit       00000000  00800257  00800257  00000846  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000846  2**0
                  CONTENTS
  5 .stab         00001d7c  00000000  00000000  00000848  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00001043  00000000  00000000  000025c4  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54 <__ctors_end>
   4:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
   8:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  10:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  14:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  24:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  28:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  2c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  30:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e <__vector_13>
  38:	0c 94 6c 00 	jmp	0xd8 <__vector_14>
  3c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  50:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 eb       	ldi	r30, 0xB2	; 178
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	12 e0       	ldi	r17, 0x02	; 2
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 35       	cpi	r26, 0x57	; 87
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0c 94 95 00 	jmp	0x12a <main>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0x0 <__vectors>

0000008e <__vector_13>:



SIGNAL(SIG_UART_RECV)
{  
  8e:	1f 92       	push	r1
  90:	0f 92       	push	r0
  92:	0f b6       	in	r0, 0x3f	; 63
  94:	0f 92       	push	r0
  96:	11 24       	eor	r1, r1
  98:	2f 93       	push	r18
  9a:	3f 93       	push	r19
  9c:	4f 93       	push	r20
  9e:	5f 93       	push	r21
  a0:	6f 93       	push	r22
  a2:	7f 93       	push	r23
  a4:	8f 93       	push	r24
  a6:	9f 93       	push	r25
  a8:	af 93       	push	r26
  aa:	bf 93       	push	r27
  ac:	ef 93       	push	r30
  ae:	ff 93       	push	r31
   uint8_t ch;
   ch =  UDR;
  b0:	8c b1       	in	r24, 0x0c	; 12
   uart_put_RX (ch);    // Should not use UDR here to avoid characters missing
  b2:	0e 94 71 02 	call	0x4e2 <uart_put_RX>
  b6:	ff 91       	pop	r31
  b8:	ef 91       	pop	r30
  ba:	bf 91       	pop	r27
  bc:	af 91       	pop	r26
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	7f 91       	pop	r23
  c4:	6f 91       	pop	r22
  c6:	5f 91       	pop	r21
  c8:	4f 91       	pop	r20
  ca:	3f 91       	pop	r19
  cc:	2f 91       	pop	r18
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <__vector_14>:
}
 
 

/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/

SIGNAL(SIG_UART_DATA)
{ 
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	2f 93       	push	r18
  e4:	3f 93       	push	r19
  e6:	4f 93       	push	r20
  e8:	5f 93       	push	r21
  ea:	6f 93       	push	r22
  ec:	7f 93       	push	r23
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	af 93       	push	r26
  f4:	bf 93       	push	r27
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31
    uint8_t  ch;
	if ((ch = uart_get_TX()))
  fa:	0e 94 bc 02 	call	0x578 <uart_get_TX>
  fe:	88 23       	and	r24, r24
 100:	11 f0       	breq	.+4      	; 0x106 <__vector_14+0x2e>
	{
 		UDR = ch;
 102:	8c b9       	out	0x0c, r24	; 12
 104:	01 c0       	rjmp	.+2      	; 0x108 <__vector_14+0x30>
	}	
	else 
// No character disable  interrupt to avoid repetable call Enable again when
//	send character in putc procedure
	{
	    UCSRB &=  ~(1<<UDRIE);
 106:	55 98       	cbi	0x0a, 5	; 10
 108:	ff 91       	pop	r31
 10a:	ef 91       	pop	r30
 10c:	bf 91       	pop	r27
 10e:	af 91       	pop	r26
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	7f 91       	pop	r23
 116:	6f 91       	pop	r22
 118:	5f 91       	pop	r21
 11a:	4f 91       	pop	r20
 11c:	3f 91       	pop	r19
 11e:	2f 91       	pop	r18
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <main>:
	}
	
}
 
 
/*
This program read the data from master eeprom and copy to slave eeprom by copy from master eeprom into master
and copy from buffer to slave eeprom 

*/

void main()
{
 12a:	cf e5       	ldi	r28, 0x5F	; 95
 12c:	d8 e0       	ldi	r29, 0x08	; 8
 12e:	de bf       	out	0x3e, r29	; 62
 130:	cd bf       	out	0x3d, r28	; 61
  uint8_t sw1,sw2;
  uint16_t  memaddr = 0;   // Start memory Address
  uint8_t  dat,c,i;
  
 /*
 *  Initialize UART library, pass baudrate and AVR cpu clock
 *  with the macro 
 *  UART_BAUD_SELECT() (normal speed mode )
 *  or 
 *  UART_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
*/
  DDRC = 0xFC;
 132:	8c ef       	ldi	r24, 0xFC	; 252
 134:	84 bb       	out	0x14, r24	; 20
  uart_init(); 
 136:	0e 94 65 02 	call	0x4ca <uart_init>
 
  
  d7segment_init();
 13a:	0e 94 4e 01 	call	0x29c <d7segment_init>
  i2ceeprom_init();
 13e:	0e 94 0b 02 	call	0x416 <i2ceeprom_init>
//  i2c_set_localdeviceaddr(I2C_EEPROM_MASTER_ADDR,FALSE);
//  i2c_set_localdeviceaddr(I2C_EEPROM_SLAVE_ADDR,FALSE);

  sei();
 142:	78 94       	sei
// To Wrie and read the same device. Need to delay. Maybe the wait state is not correct.... 
//  dat = 0x44;
//  memaddr = 0;
//  i2ceeprom_write_byte(I2C_EEPROM_SLAVE_ADDR, memaddr,dat);
//  debug_value (dat,16); 
//  	_delay_ms(20);
//  dat = i2ceeprom_read_byte(I2C_EEPROM_SLAVE_ADDR,memaddr);
//  debug_value (dat,16); 
 			

		
 
  while (1)
  {
 		
		
   sw1 = _7SEGMENT_SW1_IN_PORT & _7SEGMENT_SW1; 
 144:	83 b3       	in	r24, 0x13	; 19
   sw2 = _7SEGMENT_SW2_IN_PORT & _7SEGMENT_SW2; 
 146:	93 b3       	in	r25, 0x13	; 19
     
  
 // Delay
   
   if (!sw1) // Start copy eeprom 
 148:	98 2f       	mov	r25, r24
 14a:	90 72       	andi	r25, 0x20	; 32
 14c:	85 fd       	sbrc	r24, 5
 14e:	3c c0       	rjmp	.+120    	; 0x1c8 <main+0x9e>
    {   	
        i = 0;
 150:	b9 2e       	mov	r11, r25
 152:	cc 24       	eor	r12, r12
 154:	dd 24       	eor	r13, r13
 156:	76 01       	movw	r14, r12
 158:	cf ef       	ldi	r28, 0xFF	; 255
 15a:	d7 e0       	ldi	r29, 0x07	; 7
		for (memaddr = 0  ; memaddr < E_24LC32_MEM_ADDR ;memaddr++)
		{
   
			dat = i2ceeprom_read_byte(I2C_EEPROM_MASTER_ADDR,memaddr);
 15c:	b7 01       	movw	r22, r14
 15e:	a6 01       	movw	r20, r12
 160:	82 ea       	ldi	r24, 0xA2	; 162
 162:	0e 94 0e 02 	call	0x41c <i2ceeprom_read_byte>
 166:	18 2f       	mov	r17, r24

			debug_value (dat,16); 
 168:	60 e1       	ldi	r22, 0x10	; 16
 16a:	99 27       	eor	r25, r25
 16c:	0e 94 f4 02 	call	0x5e8 <debug_value>
 			i2ceeprom_write_byte(I2C_EEPROM_SLAVE_ADDR, memaddr,dat);
 170:	21 2f       	mov	r18, r17
 172:	b7 01       	movw	r22, r14
 174:	a6 01       	movw	r20, r12
 176:	80 ea       	ldi	r24, 0xA0	; 160
 178:	0e 94 40 02 	call	0x480 <i2ceeprom_write_byte>
//			_delay_ms( EEPROM_DELAY);
	          
			if (i < 100)
 17c:	83 e6       	ldi	r24, 0x63	; 99
 17e:	8b 15       	cp	r24, r11
 180:	08 f0       	brcs	.+2      	; 0x184 <main+0x5a>
			{
				c =0;
 182:	aa 24       	eor	r10, r10
			}
			if (i > 100) 
 184:	84 e6       	ldi	r24, 0x64	; 100
 186:	8b 15       	cp	r24, r11
 188:	10 f4       	brcc	.+4      	; 0x18e <main+0x64>
			{
				c ='-';			
 18a:	8d e2       	ldi	r24, 0x2D	; 45
 18c:	a8 2e       	mov	r10, r24
            }			
			if (i > 200)
 18e:	88 ec       	ldi	r24, 0xC8	; 200
 190:	8b 15       	cp	r24, r11
 192:	08 f4       	brcc	.+2      	; 0x196 <main+0x6c>
				i = 0;
 194:	bb 24       	eor	r11, r11
			
			d7segment_display(c,1);
 196:	61 e0       	ldi	r22, 0x01	; 1
 198:	8a 2d       	mov	r24, r10
 19a:	0e 94 f5 00 	call	0x1ea <d7segment_display>
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
 19e:	00 e4       	ldi	r16, 0x40	; 64
 1a0:	1f e1       	ldi	r17, 0x1F	; 31
 1a2:	c8 01       	movw	r24, r16
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <main+0x7a>
			_delay_ms(2);
			d7segment_display(c,2);
 1a8:	62 e0       	ldi	r22, 0x02	; 2
 1aa:	8a 2d       	mov	r24, r10
 1ac:	0e 94 f5 00 	call	0x1ea <d7segment_display>
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1b0:	c8 01       	movw	r24, r16
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <main+0x88>
			_delay_ms(2);
			
		    i++;
 1b6:	b3 94       	inc	r11
 1b8:	21 97       	sbiw	r28, 0x01	; 1
 1ba:	08 94       	sec
 1bc:	c1 1c       	adc	r12, r1
 1be:	d1 1c       	adc	r13, r1
 1c0:	e1 1c       	adc	r14, r1
 1c2:	f1 1c       	adc	r15, r1
 1c4:	d7 ff       	sbrs	r29, 7
 1c6:	ca cf       	rjmp	.-108    	; 0x15c <main+0x32>
   
		}  

//	

	}
// Finish copy   	
   	d7segment_display(0,2);
 1c8:	62 e0       	ldi	r22, 0x02	; 2
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	0e 94 f5 00 	call	0x1ea <d7segment_display>
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
 1d0:	00 e4       	ldi	r16, 0x40	; 64
 1d2:	1c e9       	ldi	r17, 0x9C	; 156
 1d4:	c8 01       	movw	r24, r16
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <main+0xac>
	_delay_ms( 10);
	d7segment_display(0,1);
 1da:	61 e0       	ldi	r22, 0x01	; 1
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 f5 00 	call	0x1ea <d7segment_display>
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1e2:	c8 01       	movw	r24, r16
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <main+0xba>
 1e8:	ad cf       	rjmp	.-166    	; 0x144 <main+0x1a>

000001ea <d7segment_display>:
#include "Dual_7Segment.h"

void d7segment_display( int8_t num, uint8_t digit)
{
 switch (num)
 1ea:	99 27       	eor	r25, r25
 1ec:	87 fd       	sbrc	r24, 7
 1ee:	90 95       	com	r25
 1f0:	86 30       	cpi	r24, 0x06	; 6
 1f2:	91 05       	cpc	r25, r1
 1f4:	09 f4       	brne	.+2      	; 0x1f8 <d7segment_display+0xe>
 1f6:	41 c0       	rjmp	.+130    	; 0x27a <d7segment_display+0x90>
 1f8:	87 30       	cpi	r24, 0x07	; 7
 1fa:	91 05       	cpc	r25, r1
 1fc:	8c f4       	brge	.+34     	; 0x220 <d7segment_display+0x36>
 1fe:	82 30       	cpi	r24, 0x02	; 2
 200:	91 05       	cpc	r25, r1
 202:	59 f1       	breq	.+86     	; 0x25a <d7segment_display+0x70>
 204:	83 30       	cpi	r24, 0x03	; 3
 206:	91 05       	cpc	r25, r1
 208:	2c f4       	brge	.+10     	; 0x214 <d7segment_display+0x2a>
 20a:	00 97       	sbiw	r24, 0x00	; 0
 20c:	11 f1       	breq	.+68     	; 0x252 <d7segment_display+0x68>
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	11 f1       	breq	.+68     	; 0x256 <d7segment_display+0x6c>
 212:	39 c0       	rjmp	.+114    	; 0x286 <d7segment_display+0x9c>
 214:	84 30       	cpi	r24, 0x04	; 4
 216:	91 05       	cpc	r25, r1
 218:	21 f1       	breq	.+72     	; 0x262 <d7segment_display+0x78>
 21a:	05 97       	sbiw	r24, 0x05	; 5
 21c:	24 f5       	brge	.+72     	; 0x266 <d7segment_display+0x7c>
 21e:	1f c0       	rjmp	.+62     	; 0x25e <d7segment_display+0x74>
 220:	8a 30       	cpi	r24, 0x0A	; 10
 222:	91 05       	cpc	r25, r1
 224:	71 f1       	breq	.+92     	; 0x282 <d7segment_display+0x98>
 226:	8b 30       	cpi	r24, 0x0B	; 11
 228:	91 05       	cpc	r25, r1
 22a:	34 f4       	brge	.+12     	; 0x238 <d7segment_display+0x4e>
 22c:	88 30       	cpi	r24, 0x08	; 8
 22e:	91 05       	cpc	r25, r1
 230:	f1 f0       	breq	.+60     	; 0x26e <d7segment_display+0x84>
 232:	09 97       	sbiw	r24, 0x09	; 9
 234:	f4 f4       	brge	.+60     	; 0x272 <d7segment_display+0x88>
 236:	19 c0       	rjmp	.+50     	; 0x26a <d7segment_display+0x80>
 238:	82 36       	cpi	r24, 0x62	; 98
 23a:	91 05       	cpc	r25, r1
 23c:	f1 f0       	breq	.+60     	; 0x27a <d7segment_display+0x90>
 23e:	83 36       	cpi	r24, 0x63	; 99
 240:	91 05       	cpc	r25, r1
 242:	1c f4       	brge	.+6      	; 0x24a <d7segment_display+0x60>
 244:	8d 97       	sbiw	r24, 0x2d	; 45
 246:	d9 f0       	breq	.+54     	; 0x27e <d7segment_display+0x94>
 248:	1e c0       	rjmp	.+60     	; 0x286 <d7segment_display+0x9c>
 24a:	86 36       	cpi	r24, 0x66	; 102
 24c:	91 05       	cpc	r25, r1
 24e:	99 f0       	breq	.+38     	; 0x276 <d7segment_display+0x8c>
 250:	1a c0       	rjmp	.+52     	; 0x286 <d7segment_display+0x9c>
 {
	case 0:
		_7SEGMENT_PORT = _7SEGMENT_0;
 252:	8f e3       	ldi	r24, 0x3F	; 63
 254:	17 c0       	rjmp	.+46     	; 0x284 <d7segment_display+0x9a>
		break;
	case 1:
		_7SEGMENT_PORT = _7SEGMENT_1;
 256:	86 e0       	ldi	r24, 0x06	; 6
 258:	15 c0       	rjmp	.+42     	; 0x284 <d7segment_display+0x9a>
		break;
	case 2:
		_7SEGMENT_PORT = _7SEGMENT_2;
 25a:	8b e5       	ldi	r24, 0x5B	; 91
 25c:	13 c0       	rjmp	.+38     	; 0x284 <d7segment_display+0x9a>
		break;
	case 3:
		_7SEGMENT_PORT = _7SEGMENT_3;
 25e:	8f e4       	ldi	r24, 0x4F	; 79
 260:	11 c0       	rjmp	.+34     	; 0x284 <d7segment_display+0x9a>
		break;
	case 4:
		_7SEGMENT_PORT = _7SEGMENT_4;
 262:	86 e6       	ldi	r24, 0x66	; 102
 264:	0f c0       	rjmp	.+30     	; 0x284 <d7segment_display+0x9a>
		break;
	case 5:
		_7SEGMENT_PORT = _7SEGMENT_5;
 266:	8d e6       	ldi	r24, 0x6D	; 109
 268:	0d c0       	rjmp	.+26     	; 0x284 <d7segment_display+0x9a>
		break;
	case 6:
		_7SEGMENT_PORT = _7SEGMENT_6;
		break;
	case 7:
		_7SEGMENT_PORT = _7SEGMENT_7;
 26a:	87 e0       	ldi	r24, 0x07	; 7
 26c:	0b c0       	rjmp	.+22     	; 0x284 <d7segment_display+0x9a>
		break;
	case 8:
		_7SEGMENT_PORT = _7SEGMENT_8;
 26e:	8f e7       	ldi	r24, 0x7F	; 127
 270:	09 c0       	rjmp	.+18     	; 0x284 <d7segment_display+0x9a>
		break;
	case 9:
		_7SEGMENT_PORT = _7SEGMENT_9;
 272:	87 e6       	ldi	r24, 0x67	; 103
 274:	07 c0       	rjmp	.+14     	; 0x284 <d7segment_display+0x9a>
	    break;
	case 'f':
	    _7SEGMENT_PORT = _7SEGMENT_C_F;
 276:	81 e7       	ldi	r24, 0x71	; 113
 278:	05 c0       	rjmp	.+10     	; 0x284 <d7segment_display+0x9a>
		break;
	case 'b':
	    _7SEGMENT_PORT = _7SEGMENT_C_B;
 27a:	8c e7       	ldi	r24, 0x7C	; 124
 27c:	03 c0       	rjmp	.+6      	; 0x284 <d7segment_display+0x9a>
		break;
	case '-':
	    _7SEGMENT_PORT = _7SEGMENT_DASH;
 27e:	80 e4       	ldi	r24, 0x40	; 64
 280:	01 c0       	rjmp	.+2      	; 0x284 <d7segment_display+0x9a>
		break;
	case DOT:
		_7SEGMENT_PORT = _7SEGMENT_DOT;
 282:	80 e8       	ldi	r24, 0x80	; 128
 284:	88 bb       	out	0x18, r24	; 24
		break;
 
 }
// Out digit
	 
    if ( digit == 1 )
 286:	61 30       	cpi	r22, 0x01	; 1
 288:	19 f4       	brne	.+6      	; 0x290 <d7segment_display+0xa6>
	{  // ON Digit 1 OFF  ( 1 Off  0 On)
		_7SEGMENT_DIGIT_PORT &= ~(_7SEGMENT_DIGIT1);
 28a:	ab 98       	cbi	0x15, 3	; 21
	   // OFF Digit 2 
	   _7SEGMENT_DIGIT_PORT |= _7SEGMENT_DIGIT2;
 28c:	ac 9a       	sbi	0x15, 4	; 21
 28e:	08 95       	ret
	}
	if ( digit == 2 )
 290:	62 30       	cpi	r22, 0x02	; 2
 292:	11 f4       	brne	.+4      	; 0x298 <d7segment_display+0xae>
	{  // ON Digit 2 OFF  ( 1 Off  0 On)
		_7SEGMENT_DIGIT_PORT &= ~(_7SEGMENT_DIGIT2);
 294:	ac 98       	cbi	0x15, 4	; 21
	   // OFF Digit 1
	   _7SEGMENT_DIGIT_PORT |= _7SEGMENT_DIGIT1;
 296:	ab 9a       	sbi	0x15, 3	; 21
 298:	08 95       	ret
 29a:	08 95       	ret

0000029c <d7segment_init>:
	}	

}	


/* Initial 7 Segments. Set port to output before use 
*/
void d7segment_init (void)
{
// Set direction for output for 7 Segment
	_7SEGMENT_DIGIT_DIR   = 0xFF;
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	87 bb       	out	0x17, r24	; 23
	_7SEGMENT_PORT_DIR	  |= _7SEGMENT_DIGIT1 | _7SEGMENT_DIGIT2;
 2a0:	84 b3       	in	r24, 0x14	; 20
 2a2:	88 61       	ori	r24, 0x18	; 24
 2a4:	84 bb       	out	0x14, r24	; 20
 
// Set direction for input for SW 
	_7SEGMENT_SW1_DIR	&=  ~(_7SEGMENT_SW1);
 2a6:	a5 98       	cbi	0x14, 5	; 20
	_7SEGMENT_SW2_DIR	&=  ~(_7SEGMENT_SW2);
 2a8:	a2 98       	cbi	0x14, 2	; 20

// Enable pull up
    _7SEGMENT_SW1_PORT   |= _7SEGMENT_SW1;
 2aa:	ad 9a       	sbi	0x15, 5	; 21
    _7SEGMENT_SW2_PORT   |= _7SEGMENT_SW2;
 2ac:	aa 9a       	sbi	0x15, 2	; 21
 2ae:	08 95       	ret

000002b0 <i2c_set_bitrate>:
//	sei();
}

void i2c_set_bitrate(uint16_t bitrateKHz)
{
 2b0:	9c 01       	movw	r18, r24
	uint8_t bitrate_div;
	// set i2c bitrate
	// SCL freq = F_CPU/(16+2*TWBR))
//	
//	#ifdef TWPS0
		// for processors with additional bitrate division (mega128)
		// SCL freq = F_CPU/(16+2*TWBR*4^TWPS)
		// set TWPS to zero
//		cbi(TWSR, TWPS0);
//		cbi(TWSR, TWPS1);
//	#endif
	// calculate bitrate division	
	bitrate_div = ((F_CPU/1000l)/bitrateKHz);
 2b2:	80 e8       	ldi	r24, 0x80	; 128
 2b4:	9e e3       	ldi	r25, 0x3E	; 62
 2b6:	b9 01       	movw	r22, r18
 2b8:	0e 94 a3 03 	call	0x746 <__udivmodhi4>
 2bc:	cb 01       	movw	r24, r22
	if(bitrate_div >= 16)
 2be:	60 31       	cpi	r22, 0x10	; 16
 2c0:	50 f0       	brcs	.+20     	; 0x2d6 <i2c_set_bitrate+0x26>
		bitrate_div = (bitrate_div-16)/2;
 2c2:	26 2f       	mov	r18, r22
 2c4:	33 27       	eor	r19, r19
 2c6:	c9 01       	movw	r24, r18
 2c8:	40 97       	sbiw	r24, 0x10	; 16
 2ca:	97 ff       	sbrs	r25, 7
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <i2c_set_bitrate+0x22>
 2ce:	c9 01       	movw	r24, r18
 2d0:	0f 97       	sbiw	r24, 0x0f	; 15
 2d2:	95 95       	asr	r25
 2d4:	87 95       	ror	r24
//	outb(TWBR, bitrate_div);
	TWBR = bitrate_div;
 2d6:	80 b9       	out	0x00, r24	; 0
 2d8:	08 95       	ret

000002da <i2c_init>:
 2da:	a8 9a       	sbi	0x15, 0	; 21
 2dc:	a9 9a       	sbi	0x15, 1	; 21
 2de:	84 e6       	ldi	r24, 0x64	; 100
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 58 01 	call	0x2b0 <i2c_set_bitrate>
 2e6:	86 b7       	in	r24, 0x36	; 54
 2e8:	84 60       	ori	r24, 0x04	; 4
 2ea:	86 bf       	out	0x36, r24	; 54
 2ec:	10 92 60 00 	sts	0x0060, r1
 2f0:	86 b7       	in	r24, 0x36	; 54
 2f2:	80 64       	ori	r24, 0x40	; 64
 2f4:	86 bf       	out	0x36, r24	; 54
 2f6:	08 95       	ret

000002f8 <i2c_set_localdeviceaddr>:
}

void i2c_set_localdeviceaddr(uint8_t deviceAddr, uint8_t genCallEn)
{
	// set local device address (used in slave mode only)
//	outb(TWAR, ((deviceAddr&0xFE) | (genCallEn?1:0)) );
	TWAR  =  (((deviceAddr&0xFE) | (genCallEn?1:0)) );
 2f8:	28 2f       	mov	r18, r24
 2fa:	33 27       	eor	r19, r19
 2fc:	2e 7f       	andi	r18, 0xFE	; 254
 2fe:	30 70       	andi	r19, 0x00	; 0
 300:	61 11       	cpse	r22, r1
 302:	21 60       	ori	r18, 0x01	; 1
 304:	22 b9       	out	0x02, r18	; 2
 306:	08 95       	ret

00000308 <i2c_send_start>:

}
 
 

inline void i2c_send_start(void)
{
	// send start condition	
//	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)| _BV(TWINT)|BV(TWSTA));
    TWCR  =  ((TWCR&TWCR_CMD_MASK)| _BV(TWINT)|_BV(TWSTA));
 308:	86 b7       	in	r24, 0x36	; 54
 30a:	8f 70       	andi	r24, 0x0F	; 15
 30c:	80 6a       	ori	r24, 0xA0	; 160
 30e:	86 bf       	out	0x36, r24	; 54
 310:	08 95       	ret

00000312 <i2c_send_stop>:
}

inline void i2c_send_stop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
//	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)| _BV(TWINT)|BV(TWEA)|BV(TWSTO));
	TWCR =  ((TWCR & TWCR_CMD_MASK)| _BV(TWINT)| _BV(TWEA) | _BV(TWSTO));
 312:	86 b7       	in	r24, 0x36	; 54
 314:	8f 70       	andi	r24, 0x0F	; 15
 316:	80 6d       	ori	r24, 0xD0	; 208
 318:	86 bf       	out	0x36, r24	; 54
 31a:	08 95       	ret

0000031c <i2c_wait_for_complete>:
}

inline void i2c_wait_for_complete(void)
{
	// wait for i2c interface to complete operation
	while( !( TWCR & _BV(TWINT)) );
 31c:	06 b6       	in	r0, 0x36	; 54
 31e:	07 fe       	sbrs	r0, 7
 320:	fd cf       	rjmp	.-6      	; 0x31c <i2c_wait_for_complete>
 322:	08 95       	ret

00000324 <i2c_send_byte>:
}

inline void i2c_send_byte(uint8_t data)
{
	// save data to the TWDR
//	outb(TWDR, data);
	TWDR = data;
 324:	83 b9       	out	0x03, r24	; 3
	// begin send
//	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)| _BV(TWINT));
	TWCR  = ((TWCR&TWCR_CMD_MASK) | _BV(TWINT));
 326:	86 b7       	in	r24, 0x36	; 54
 328:	8f 70       	andi	r24, 0x0F	; 15
 32a:	80 68       	ori	r24, 0x80	; 128
 32c:	86 bf       	out	0x36, r24	; 54
 32e:	08 95       	ret

00000330 <i2c_receive_byte>:
}

inline void i2c_receive_byte(uint8_t ackFlag)
{
	// begin receive over i2c
	if( ackFlag )
 330:	88 23       	and	r24, r24
 332:	21 f0       	breq	.+8      	; 0x33c <i2c_receive_byte+0xc>
	{
		// ackFlag = TRUE: ACK the recevied data
//		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|_BV(TWINT)|_BV(TWEA));
	TWCR = ((TWCR & TWCR_CMD_MASK) | _BV(TWINT)| _BV(TWEA));
 334:	86 b7       	in	r24, 0x36	; 54
 336:	8f 70       	andi	r24, 0x0F	; 15
 338:	80 6c       	ori	r24, 0xC0	; 192
 33a:	03 c0       	rjmp	.+6      	; 0x342 <i2c_receive_byte+0x12>
	
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
//		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)| _BV(TWINT));
		TWCR = ((TWCR & TWCR_CMD_MASK) | _BV(TWINT));
 33c:	86 b7       	in	r24, 0x36	; 54
 33e:	8f 70       	andi	r24, 0x0F	; 15
 340:	80 68       	ori	r24, 0x80	; 128
 342:	86 bf       	out	0x36, r24	; 54
 344:	08 95       	ret
 346:	08 95       	ret

00000348 <i2c_master_sendni>:
	}
}

 

/* I2C Master send Not using interrupt

*/
uint8_t i2c_master_sendni(uint8_t deviceAddr, uint8_t length, uint8_t* data)
{
 348:	28 2f       	mov	r18, r24
 34a:	fa 01       	movw	r30, r20
	uint8_t retval = I2C_OK;
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	86 b7       	in	r24, 0x36	; 54
 350:	8f 70       	andi	r24, 0x0F	; 15
 352:	80 6a       	ori	r24, 0xA0	; 160
 354:	86 bf       	out	0x36, r24	; 54
 356:	06 b6       	in	r0, 0x36	; 54
 358:	07 fe       	sbrs	r0, 7
 35a:	fd cf       	rjmp	.-6      	; 0x356 <i2c_master_sendni+0xe>
 35c:	2e 7f       	andi	r18, 0xFE	; 254
 35e:	23 b9       	out	0x03, r18	; 3
 360:	86 b7       	in	r24, 0x36	; 54
 362:	8f 70       	andi	r24, 0x0F	; 15
 364:	80 68       	ori	r24, 0x80	; 128
 366:	86 bf       	out	0x36, r24	; 54
 368:	06 b6       	in	r0, 0x36	; 54
 36a:	07 fe       	sbrs	r0, 7
 36c:	fd cf       	rjmp	.-6      	; 0x368 <i2c_master_sendni+0x20>

 	// send start condition
	i2c_send_start();
	i2c_wait_for_complete();

	// send device address with write
	i2c_send_byte( deviceAddr & 0xFE );
	i2c_wait_for_complete();

	// check if device is present and live
	if( TWSR == TW_MT_SLA_ACK)
 36e:	81 b1       	in	r24, 0x01	; 1
 370:	88 31       	cpi	r24, 0x18	; 24
 372:	69 f4       	brne	.+26     	; 0x38e <i2c_master_sendni+0x46>
	{
		// send data
		while(length)
		{
			i2c_send_byte( *data++ );
			i2c_wait_for_complete();
			length--;
 374:	66 23       	and	r22, r22
 376:	61 f0       	breq	.+24     	; 0x390 <i2c_master_sendni+0x48>
 378:	81 91       	ld	r24, Z+
 37a:	83 b9       	out	0x03, r24	; 3
 37c:	86 b7       	in	r24, 0x36	; 54
 37e:	8f 70       	andi	r24, 0x0F	; 15
 380:	80 68       	ori	r24, 0x80	; 128
 382:	86 bf       	out	0x36, r24	; 54
 384:	06 b6       	in	r0, 0x36	; 54
 386:	07 fe       	sbrs	r0, 7
 388:	fd cf       	rjmp	.-6      	; 0x384 <i2c_master_sendni+0x3c>
 38a:	61 50       	subi	r22, 0x01	; 1
 38c:	f3 cf       	rjmp	.-26     	; 0x374 <i2c_master_sendni+0x2c>
		}
	}
	else
	{
		// device did not ACK it's address,
		// data will not be transferred
		// return error
		retval = I2C_ERROR_NODEV;
 38e:	91 e0       	ldi	r25, 0x01	; 1
 390:	86 b7       	in	r24, 0x36	; 54
 392:	8f 70       	andi	r24, 0x0F	; 15
 394:	80 6d       	ori	r24, 0xD0	; 208
 396:	86 bf       	out	0x36, r24	; 54
	}

	// transmit stop condition
	// leave with TWEA on for slave receiving
	i2c_send_stop();
	while( !(TWCR & _BV(TWSTO)) );
 398:	06 b6       	in	r0, 0x36	; 54
 39a:	04 fe       	sbrs	r0, 4
 39c:	fd cf       	rjmp	.-6      	; 0x398 <i2c_master_sendni+0x50>
 
	return retval;
}
 39e:	89 2f       	mov	r24, r25
 3a0:	99 27       	eor	r25, r25
 3a2:	08 95       	ret

000003a4 <i2c_master_receiveni>:

uint8_t i2c_master_receiveni(uint8_t deviceAddr, uint8_t length, uint8_t *data)
{
 3a4:	28 2f       	mov	r18, r24
 3a6:	fa 01       	movw	r30, r20
	uint8_t retval = I2C_OK;
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	86 b7       	in	r24, 0x36	; 54
 3ac:	8f 70       	andi	r24, 0x0F	; 15
 3ae:	80 6a       	ori	r24, 0xA0	; 160
 3b0:	86 bf       	out	0x36, r24	; 54
 3b2:	06 b6       	in	r0, 0x36	; 54
 3b4:	07 fe       	sbrs	r0, 7
 3b6:	fd cf       	rjmp	.-6      	; 0x3b2 <i2c_master_receiveni+0xe>
 3b8:	21 60       	ori	r18, 0x01	; 1
 3ba:	23 b9       	out	0x03, r18	; 3
 3bc:	86 b7       	in	r24, 0x36	; 54
 3be:	8f 70       	andi	r24, 0x0F	; 15
 3c0:	80 68       	ori	r24, 0x80	; 128
 3c2:	86 bf       	out	0x36, r24	; 54
 3c4:	06 b6       	in	r0, 0x36	; 54
 3c6:	07 fe       	sbrs	r0, 7
 3c8:	fd cf       	rjmp	.-6      	; 0x3c4 <i2c_master_receiveni+0x20>

	// send start condition
	i2c_send_start();
	i2c_wait_for_complete();

	// send device address with read
	i2c_send_byte( deviceAddr | 0x01 );
	i2c_wait_for_complete();

	// check if device is present and live
	if( TWSR == TW_MR_SLA_ACK)
 3ca:	81 b1       	in	r24, 0x01	; 1
 3cc:	80 34       	cpi	r24, 0x40	; 64
 3ce:	b9 f4       	brne	.+46     	; 0x3fe <i2c_master_receiveni+0x5a>
	{
		// accept receive data and ack it
		while(length > 1)
		{
			i2c_receive_byte(TRUE);
			i2c_wait_for_complete();
	 		*data++ = TWDR;
			// decrement length
			length--;
 3d0:	62 30       	cpi	r22, 0x02	; 2
 3d2:	58 f0       	brcs	.+22     	; 0x3ea <i2c_master_receiveni+0x46>
 3d4:	86 b7       	in	r24, 0x36	; 54
 3d6:	8f 70       	andi	r24, 0x0F	; 15
 3d8:	80 6c       	ori	r24, 0xC0	; 192
 3da:	86 bf       	out	0x36, r24	; 54
 3dc:	06 b6       	in	r0, 0x36	; 54
 3de:	07 fe       	sbrs	r0, 7
 3e0:	fd cf       	rjmp	.-6      	; 0x3dc <i2c_master_receiveni+0x38>
 3e2:	83 b1       	in	r24, 0x03	; 3
 3e4:	81 93       	st	Z+, r24
 3e6:	61 50       	subi	r22, 0x01	; 1
 3e8:	f3 cf       	rjmp	.-26     	; 0x3d0 <i2c_master_receiveni+0x2c>
 3ea:	86 b7       	in	r24, 0x36	; 54
 3ec:	8f 70       	andi	r24, 0x0F	; 15
 3ee:	80 68       	ori	r24, 0x80	; 128
 3f0:	86 bf       	out	0x36, r24	; 54
 3f2:	06 b6       	in	r0, 0x36	; 54
 3f4:	07 fe       	sbrs	r0, 7
 3f6:	fd cf       	rjmp	.-6      	; 0x3f2 <i2c_master_receiveni+0x4e>
		}

		// accept receive data and nack it (last-byte signal)
		i2c_receive_byte(FALSE);
		i2c_wait_for_complete();
		*data++ = TWDR;
 3f8:	83 b1       	in	r24, 0x03	; 3
 3fa:	80 83       	st	Z, r24
 3fc:	01 c0       	rjmp	.+2      	; 0x400 <i2c_master_receiveni+0x5c>
	}
	else
	{
		// device did not ACK it's address,
		// data will not be transferred
		// return error
		retval = I2C_ERROR_NODEV;
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	86 b7       	in	r24, 0x36	; 54
 402:	8f 70       	andi	r24, 0x0F	; 15
 404:	80 6d       	ori	r24, 0xD0	; 208
 406:	86 bf       	out	0x36, r24	; 54
	}

	// transmit stop condition
	// leave with TWEA on for slave receiving
	i2c_send_stop();
 
	return retval;
}
 408:	89 2f       	mov	r24, r25
 40a:	99 27       	eor	r25, r25
 40c:	08 95       	ret

0000040e <i2cGetState>:



eI2cStateType i2cGetState(void)
{
	return I2cState;
 40e:	80 91 60 00 	lds	r24, 0x0060
}
 412:	99 27       	eor	r25, r25
 414:	08 95       	ret

00000416 <i2ceeprom_init>:
void i2ceeprom_init(void)
{
	// although there is no code here
	// don't forget to initialize the I2C interface itself
	  i2c_init();
 416:	0e 94 6d 01 	call	0x2da <i2c_init>
 41a:	08 95       	ret

0000041c <i2ceeprom_read_byte>:
}

uint8_t i2ceeprom_read_byte(uint8_t i2cAddr, uint32_t memAddr)
{
 41c:	ff 92       	push	r15
 41e:	0f 93       	push	r16
 420:	1f 93       	push	r17
 422:	cf 93       	push	r28
 424:	df 93       	push	r29
 426:	cd b7       	in	r28, 0x3d	; 61
 428:	de b7       	in	r29, 0x3e	; 62
 42a:	22 97       	sbiw	r28, 0x02	; 2
 42c:	0f b6       	in	r0, 0x3f	; 63
 42e:	f8 94       	cli
 430:	de bf       	out	0x3e, r29	; 62
 432:	0f be       	out	0x3f, r0	; 63
 434:	cd bf       	out	0x3d, r28	; 61
 436:	f8 2e       	mov	r15, r24
 438:	9a 01       	movw	r18, r20
 43a:	ab 01       	movw	r20, r22
	uint8_t packet[2];
	// prepare address
	packet[0] = (memAddr>>8);
 43c:	bb 27       	eor	r27, r27
 43e:	a5 2f       	mov	r26, r21
 440:	94 2f       	mov	r25, r20
 442:	83 2f       	mov	r24, r19
 444:	89 83       	std	Y+1, r24	; 0x01
	packet[1] = (memAddr&0x00FF);
 446:	8e 01       	movw	r16, r28
 448:	0f 5f       	subi	r16, 0xFF	; 255
 44a:	1f 4f       	sbci	r17, 0xFF	; 255
 44c:	f8 01       	movw	r30, r16
 44e:	21 83       	std	Z+1, r18	; 0x01
	// send memory address we wish to access to the memory chip
	i2c_master_sendni(i2cAddr, 2, packet);
 450:	a8 01       	movw	r20, r16
 452:	62 e0       	ldi	r22, 0x02	; 2
 454:	8f 2d       	mov	r24, r15
 456:	0e 94 a4 01 	call	0x348 <i2c_master_sendni>
	// retrieve the data at this memory address
	i2c_master_receiveni(i2cAddr, 1, packet);
 45a:	a8 01       	movw	r20, r16
 45c:	61 e0       	ldi	r22, 0x01	; 1
 45e:	8f 2d       	mov	r24, r15
 460:	0e 94 d2 01 	call	0x3a4 <i2c_master_receiveni>
	// return data
	return packet[0];
 464:	89 81       	ldd	r24, Y+1	; 0x01
}
 466:	99 27       	eor	r25, r25
 468:	22 96       	adiw	r28, 0x02	; 2
 46a:	0f b6       	in	r0, 0x3f	; 63
 46c:	f8 94       	cli
 46e:	de bf       	out	0x3e, r29	; 62
 470:	0f be       	out	0x3f, r0	; 63
 472:	cd bf       	out	0x3d, r28	; 61
 474:	df 91       	pop	r29
 476:	cf 91       	pop	r28
 478:	1f 91       	pop	r17
 47a:	0f 91       	pop	r16
 47c:	ff 90       	pop	r15
 47e:	08 95       	ret

00000480 <i2ceeprom_write_byte>:

void i2ceeprom_write_byte(uint8_t i2cAddr, uint32_t memAddr, uint8_t data)
{
 480:	0f 93       	push	r16
 482:	1f 93       	push	r17
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	cd b7       	in	r28, 0x3d	; 61
 48a:	de b7       	in	r29, 0x3e	; 62
 48c:	23 97       	sbiw	r28, 0x03	; 3
 48e:	0f b6       	in	r0, 0x3f	; 63
 490:	f8 94       	cli
 492:	de bf       	out	0x3e, r29	; 62
 494:	0f be       	out	0x3f, r0	; 63
 496:	cd bf       	out	0x3d, r28	; 61
 498:	92 2f       	mov	r25, r18
	uint8_t packet[3];
	// prepare address + data
	packet[0] = (memAddr>>8);
 49a:	05 2f       	mov	r16, r21
 49c:	16 2f       	mov	r17, r22
 49e:	27 2f       	mov	r18, r23
 4a0:	33 27       	eor	r19, r19
 4a2:	09 83       	std	Y+1, r16	; 0x01
	packet[1] = (memAddr&0x00FF);
 4a4:	4a 83       	std	Y+2, r20	; 0x02
	packet[2] = data;
 4a6:	9b 83       	std	Y+3, r25	; 0x03
	// send memory address we wish to access to the memory chip
	// along with the data we wish to write
	i2c_master_sendni(i2cAddr, 3, packet);
 4a8:	ae 01       	movw	r20, r28
 4aa:	4f 5f       	subi	r20, 0xFF	; 255
 4ac:	5f 4f       	sbci	r21, 0xFF	; 255
 4ae:	63 e0       	ldi	r22, 0x03	; 3
 4b0:	0e 94 a4 01 	call	0x348 <i2c_master_sendni>
 4b4:	23 96       	adiw	r28, 0x03	; 3
 4b6:	0f b6       	in	r0, 0x3f	; 63
 4b8:	f8 94       	cli
 4ba:	de bf       	out	0x3e, r29	; 62
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	cd bf       	out	0x3d, r28	; 61
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	1f 91       	pop	r17
 4c6:	0f 91       	pop	r16
 4c8:	08 95       	ret

000004ca <uart_init>:
{
 
// Initialize UART  
    
    UCSRC  = 0x86;    // 8 bit non parity  1 stop bit
 4ca:	86 e8       	ldi	r24, 0x86	; 134
 4cc:	80 bd       	out	0x20, r24	; 32
     UCSRB  = 0x98;    // Enable RX Interrupt and Enable TX, RX pin
 4ce:	88 e9       	ldi	r24, 0x98	; 152
 4d0:	8a b9       	out	0x0a, r24	; 10
//    UCSRB  = 0B8;    // Enable RX Interrupt, Data registerempty interrupt enable and Enable TX, RX pin 1011-1000
	UBRRL  = 0x67;    // Speed 9600 UBRR = 103 at 16 MHZ
 4d2:	87 e6       	ldi	r24, 0x67	; 103
 4d4:	89 b9       	out	0x09, r24	; 9
//	UBRRL  = 51;      // Speed = 19.2 K at 16 Mhz
	UBRRH  = 0;
 4d6:	10 bc       	out	0x20, r1	; 32
//    DDRD = 0x00;	 
 
	g_rx_ptr = 0;
 4d8:	10 92 62 00 	sts	0x0062, r1
	g_tx_ptr = 0;
 4dc:	10 92 61 00 	sts	0x0061, r1
 4e0:	08 95       	ret

000004e2 <uart_put_RX>:
 /* Set baud rate */
 
}

/*
Put character into Rx buffer

Return  = Success 0
        = Fail   Buffer Full
		
*/
uint8_t uart_put_RX ( uint8_t ch)
{
 4e2:	98 2f       	mov	r25, r24
   if ((g_rx_ptr < MAX_BUFF)) 
 4e4:	80 91 62 00 	lds	r24, 0x0062
 4e8:	8a 3f       	cpi	r24, 0xFA	; 250
 4ea:	80 f4       	brcc	.+32     	; 0x50c <uart_put_RX+0x2a>
   {
//  End with Null
		g_rx_buff[g_rx_ptr] = ch;
 4ec:	e8 2f       	mov	r30, r24
 4ee:	ff 27       	eor	r31, r31
 4f0:	ed 59       	subi	r30, 0x9D	; 157
 4f2:	ff 4f       	sbci	r31, 0xFF	; 255
 4f4:	90 83       	st	Z, r25
		g_rx_ptr++;
 4f6:	8f 5f       	subi	r24, 0xFF	; 255
 4f8:	80 93 62 00 	sts	0x0062, r24
		g_rx_buff[g_rx_ptr] = 0;   // End with null characters
 4fc:	e8 2f       	mov	r30, r24
 4fe:	ff 27       	eor	r31, r31
 500:	ed 59       	subi	r30, 0x9D	; 157
 502:	ff 4f       	sbci	r31, 0xFF	; 255
 504:	10 82       	st	Z, r1
		return 0;
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	08 95       	ret
    }
   else  // Buffer full do nothing  return error
   {
        return UART_BUFFER_FULL;
 50c:	82 e0       	ldi	r24, 0x02	; 2
 50e:	90 e0       	ldi	r25, 0x00	; 0
   }
}
 510:	08 95       	ret

00000512 <uart_get_RX>:

// Get character from RX buffer

uint8_t uart_get_RX (void)
{
   uint8_t  i,j,ch;
   if (g_rx_ptr)
 512:	80 91 62 00 	lds	r24, 0x0062
 516:	88 23       	and	r24, r24
 518:	a1 f0       	breq	.+40     	; 0x542 <uart_get_RX+0x30>
   {
		ch = g_rx_buff[0];
 51a:	90 91 63 00 	lds	r25, 0x0063
        i =  g_rx_ptr;
 51e:	28 2f       	mov	r18, r24
        g_rx_ptr--;
 520:	21 50       	subi	r18, 0x01	; 1
 522:	20 93 62 00 	sts	0x0062, r18
 526:	2f 5f       	subi	r18, 0xFF	; 255
		j = 0;
 528:	30 e0       	ldi	r19, 0x00	; 0
// Move left all characters
        while (i)
		{
	      g_rx_buff[j] =  g_rx_buff[j+1];
 52a:	e3 2f       	mov	r30, r19
 52c:	ff 27       	eor	r31, r31
 52e:	ed 59       	subi	r30, 0x9D	; 157
 530:	ff 4f       	sbci	r31, 0xFF	; 255
 532:	81 81       	ldd	r24, Z+1	; 0x01
 534:	80 83       	st	Z, r24
	      j++;
 536:	3f 5f       	subi	r19, 0xFF	; 255
	 	  i--;
 538:	21 50       	subi	r18, 0x01	; 1
 53a:	b9 f7       	brne	.-18     	; 0x52a <uart_get_RX+0x18>
		}
		return ch;
 53c:	89 2f       	mov	r24, r25
 53e:	99 27       	eor	r25, r25
 540:	08 95       	ret
   }
   return 0;
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	90 e0       	ldi	r25, 0x00	; 0
}
 546:	08 95       	ret

00000548 <uart_put_TX>:

/* Put character into g_tx_buff
    INPUT  : Character to put in buffer
	Output : 0  OK
		   : UART_BUFFER_FULL  Buffer full
*/

uint8_t uart_put_TX ( uint8_t ch)
{
 548:	98 2f       	mov	r25, r24
// If exceed buffer do nothing until buffer is flushed
    if ((g_tx_ptr > MAX_BUFF)) 
 54a:	80 91 61 00 	lds	r24, 0x0061
 54e:	8b 3f       	cpi	r24, 0xFB	; 251
 550:	18 f0       	brcs	.+6      	; 0x558 <uart_put_TX+0x10>
    {
		return UART_BUFFER_FULL;   // No increase pointer
 552:	82 e0       	ldi	r24, 0x02	; 2
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	08 95       	ret
    }
	g_tx_buff[g_tx_ptr]= ch;
 558:	e8 2f       	mov	r30, r24
 55a:	ff 27       	eor	r31, r31
 55c:	e3 5a       	subi	r30, 0xA3	; 163
 55e:	fe 4f       	sbci	r31, 0xFE	; 254
 560:	90 83       	st	Z, r25
	g_tx_ptr++;
 562:	8f 5f       	subi	r24, 0xFF	; 255
 564:	80 93 61 00 	sts	0x0061, r24
	g_tx_buff[g_tx_ptr] = 0;    // Put null character at the end
 568:	e8 2f       	mov	r30, r24
 56a:	ff 27       	eor	r31, r31
 56c:	e3 5a       	subi	r30, 0xA3	; 163
 56e:	fe 4f       	sbci	r31, 0xFE	; 254
 570:	10 82       	st	Z, r1
	return 0;
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	90 e0       	ldi	r25, 0x00	; 0
}
 576:	08 95       	ret

00000578 <uart_get_TX>:


// Get character from TX buffer
uint8_t uart_get_TX (void)
{
   uint8_t i,j,ch =0;
   
   if ( g_tx_ptr)
 578:	80 91 61 00 	lds	r24, 0x0061
 57c:	88 23       	and	r24, r24
 57e:	a1 f0       	breq	.+40     	; 0x5a8 <uart_get_TX+0x30>
   {
		i  =  g_tx_ptr;
 580:	28 2f       	mov	r18, r24
		g_tx_ptr--;
 582:	21 50       	subi	r18, 0x01	; 1
 584:	20 93 61 00 	sts	0x0061, r18
 588:	2f 5f       	subi	r18, 0xFF	; 255
		ch =  g_tx_buff[0];   // Start from 0 FIFO
 58a:	90 91 5d 01 	lds	r25, 0x015D
		j = 0;
 58e:	30 e0       	ldi	r19, 0x00	; 0
// Move left all characters
        while (i)
		{
	      g_tx_buff[j] =  g_tx_buff[j+1];
 590:	e3 2f       	mov	r30, r19
 592:	ff 27       	eor	r31, r31
 594:	e3 5a       	subi	r30, 0xA3	; 163
 596:	fe 4f       	sbci	r31, 0xFE	; 254
 598:	81 81       	ldd	r24, Z+1	; 0x01
 59a:	80 83       	st	Z, r24
	      j++;
 59c:	3f 5f       	subi	r19, 0xFF	; 255
	 	  i--;
 59e:	21 50       	subi	r18, 0x01	; 1
 5a0:	b9 f7       	brne	.-18     	; 0x590 <uart_get_TX+0x18>
		}
		return ch;
 5a2:	89 2f       	mov	r24, r25
 5a4:	99 27       	eor	r25, r25
 5a6:	08 95       	ret
   }
   return 0;
 5a8:	80 e0       	ldi	r24, 0x00	; 0
 5aa:	90 e0       	ldi	r25, 0x00	; 0
}
 5ac:	08 95       	ret

000005ae <uart_getc>:


uint8_t uart_getc(void)
{
    uint8_t ch;
	ch = uart_get_RX();
 5ae:	0e 94 89 02 	call	0x512 <uart_get_RX>
    return ch ;
}
 5b2:	99 27       	eor	r25, r25
 5b4:	08 95       	ret

000005b6 <uart_putc>:

uint8_t uart_putc(uint8_t c)
{
  
  uart_put_TX(c);
 5b6:	0e 94 a4 02 	call	0x548 <uart_put_TX>
// Enable interrupt UART Data Register empty
  UCSRB  |=  (1<<UDRIE);	
 5ba:	55 9a       	sbi	0x0a, 5	; 10
   return 0;

}
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	08 95       	ret

000005c2 <uart_puts>:


/*************************************************************************
Function: uart_puts()
Purpose:  transmit string to UART1
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const uint8_t *s )
{
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
 5c6:	ec 01       	movw	r28, r24
    while (*s) 
      uart_putc(*s++);
 5c8:	88 81       	ld	r24, Y
 5ca:	88 23       	and	r24, r24
 5cc:	21 f0       	breq	.+8      	; 0x5d6 <uart_puts+0x14>
 5ce:	89 91       	ld	r24, Y+
 5d0:	0e 94 db 02 	call	0x5b6 <uart_putc>
 5d4:	f9 cf       	rjmp	.-14     	; 0x5c8 <uart_puts+0x6>
   uart_putc(0x0D); // CR
 5d6:	8d e0       	ldi	r24, 0x0D	; 13
 5d8:	0e 94 db 02 	call	0x5b6 <uart_putc>
	uart_putc(0x0A); // LF
 5dc:	8a e0       	ldi	r24, 0x0A	; 10
 5de:	0e 94 db 02 	call	0x5b6 <uart_putc>
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	08 95       	ret

000005e8 <debug_value>:
}

/*
Show debug value
*/

void  debug_value ( int16_t value, uint8_t radix)
{
 5e8:	cf 93       	push	r28
 5ea:	df 93       	push	r29
 5ec:	cd b7       	in	r28, 0x3d	; 61
 5ee:	de b7       	in	r29, 0x3e	; 62
 5f0:	64 97       	sbiw	r28, 0x14	; 20
 5f2:	0f b6       	in	r0, 0x3f	; 63
 5f4:	f8 94       	cli
 5f6:	de bf       	out	0x3e, r29	; 62
 5f8:	0f be       	out	0x3f, r0	; 63
 5fa:	cd bf       	out	0x3d, r28	; 61
 5fc:	26 2f       	mov	r18, r22
   uint8_t  buff[20];
   
   itoa (value,buff, radix);
 5fe:	33 27       	eor	r19, r19
 600:	a9 01       	movw	r20, r18
 602:	be 01       	movw	r22, r28
 604:	6f 5f       	subi	r22, 0xFF	; 255
 606:	7f 4f       	sbci	r23, 0xFF	; 255
 608:	0e 94 3e 03 	call	0x67c <itoa>
    uart_puts ( buff);
 60c:	ce 01       	movw	r24, r28
 60e:	01 96       	adiw	r24, 0x01	; 1
 610:	0e 94 e1 02 	call	0x5c2 <uart_puts>
 614:	64 96       	adiw	r28, 0x14	; 20
 616:	0f b6       	in	r0, 0x3f	; 63
 618:	f8 94       	cli
 61a:	de bf       	out	0x3e, r29	; 62
 61c:	0f be       	out	0x3f, r0	; 63
 61e:	cd bf       	out	0x3d, r28	; 61
 620:	df 91       	pop	r29
 622:	cf 91       	pop	r28
 624:	08 95       	ret

00000626 <debug_lvalue>:

}



void  debug_lvalue ( int32_t value, uint8_t radix)
{
 626:	ef 92       	push	r14
 628:	ff 92       	push	r15
 62a:	0f 93       	push	r16
 62c:	1f 93       	push	r17
 62e:	cf 93       	push	r28
 630:	df 93       	push	r29
 632:	cd b7       	in	r28, 0x3d	; 61
 634:	de b7       	in	r29, 0x3e	; 62
 636:	a8 97       	sbiw	r28, 0x28	; 40
 638:	0f b6       	in	r0, 0x3f	; 63
 63a:	f8 94       	cli
 63c:	de bf       	out	0x3e, r29	; 62
 63e:	0f be       	out	0x3f, r0	; 63
 640:	cd bf       	out	0x3d, r28	; 61
 642:	7b 01       	movw	r14, r22
 644:	8c 01       	movw	r16, r24
 646:	84 2f       	mov	r24, r20
   uint8_t  buff[40];
   
   ltoa (value,buff, radix);
 648:	99 27       	eor	r25, r25
 64a:	9c 01       	movw	r18, r24
 64c:	ae 01       	movw	r20, r28
 64e:	4f 5f       	subi	r20, 0xFF	; 255
 650:	5f 4f       	sbci	r21, 0xFF	; 255
 652:	c8 01       	movw	r24, r16
 654:	b7 01       	movw	r22, r14
 656:	0e 94 5f 03 	call	0x6be <ltoa>
    uart_puts ( buff);
 65a:	ce 01       	movw	r24, r28
 65c:	01 96       	adiw	r24, 0x01	; 1
 65e:	0e 94 e1 02 	call	0x5c2 <uart_puts>
 662:	a8 96       	adiw	r28, 0x28	; 40
 664:	0f b6       	in	r0, 0x3f	; 63
 666:	f8 94       	cli
 668:	de bf       	out	0x3e, r29	; 62
 66a:	0f be       	out	0x3f, r0	; 63
 66c:	cd bf       	out	0x3d, r28	; 61
 66e:	df 91       	pop	r29
 670:	cf 91       	pop	r28
 672:	1f 91       	pop	r17
 674:	0f 91       	pop	r16
 676:	ff 90       	pop	r15
 678:	ef 90       	pop	r14
 67a:	08 95       	ret

0000067c <itoa>:
 67c:	fb 01       	movw	r30, r22
 67e:	9f 01       	movw	r18, r30
 680:	e8 94       	clt
 682:	42 30       	cpi	r20, 0x02	; 2
 684:	c4 f0       	brlt	.+48     	; 0x6b6 <itoa+0x3a>
 686:	45 32       	cpi	r20, 0x25	; 37
 688:	b4 f4       	brge	.+44     	; 0x6b6 <itoa+0x3a>
 68a:	4a 30       	cpi	r20, 0x0A	; 10
 68c:	29 f4       	brne	.+10     	; 0x698 <itoa+0x1c>
 68e:	97 fb       	bst	r25, 7
 690:	1e f4       	brtc	.+6      	; 0x698 <itoa+0x1c>
 692:	90 95       	com	r25
 694:	81 95       	neg	r24
 696:	9f 4f       	sbci	r25, 0xFF	; 255
 698:	64 2f       	mov	r22, r20
 69a:	77 27       	eor	r23, r23
 69c:	0e 94 a3 03 	call	0x746 <__udivmodhi4>
 6a0:	80 5d       	subi	r24, 0xD0	; 208
 6a2:	8a 33       	cpi	r24, 0x3A	; 58
 6a4:	0c f0       	brlt	.+2      	; 0x6a8 <itoa+0x2c>
 6a6:	89 5d       	subi	r24, 0xD9	; 217
 6a8:	81 93       	st	Z+, r24
 6aa:	cb 01       	movw	r24, r22
 6ac:	00 97       	sbiw	r24, 0x00	; 0
 6ae:	a1 f7       	brne	.-24     	; 0x698 <itoa+0x1c>
 6b0:	16 f4       	brtc	.+4      	; 0x6b6 <itoa+0x3a>
 6b2:	5d e2       	ldi	r21, 0x2D	; 45
 6b4:	51 93       	st	Z+, r21
 6b6:	10 82       	st	Z, r1
 6b8:	c9 01       	movw	r24, r18
 6ba:	0c 94 93 03 	jmp	0x726 <strrev>

000006be <ltoa>:
 6be:	fa 01       	movw	r30, r20
 6c0:	cf 93       	push	r28
 6c2:	ff 93       	push	r31
 6c4:	ef 93       	push	r30
 6c6:	22 30       	cpi	r18, 0x02	; 2
 6c8:	44 f1       	brlt	.+80     	; 0x71a <ltoa+0x5c>
 6ca:	25 32       	cpi	r18, 0x25	; 37
 6cc:	34 f5       	brge	.+76     	; 0x71a <ltoa+0x5c>
 6ce:	c2 2f       	mov	r28, r18
 6d0:	e8 94       	clt
 6d2:	ca 30       	cpi	r28, 0x0A	; 10
 6d4:	49 f4       	brne	.+18     	; 0x6e8 <ltoa+0x2a>
 6d6:	97 fb       	bst	r25, 7
 6d8:	3e f4       	brtc	.+14     	; 0x6e8 <ltoa+0x2a>
 6da:	90 95       	com	r25
 6dc:	80 95       	com	r24
 6de:	70 95       	com	r23
 6e0:	61 95       	neg	r22
 6e2:	7f 4f       	sbci	r23, 0xFF	; 255
 6e4:	8f 4f       	sbci	r24, 0xFF	; 255
 6e6:	9f 4f       	sbci	r25, 0xFF	; 255
 6e8:	2c 2f       	mov	r18, r28
 6ea:	33 27       	eor	r19, r19
 6ec:	44 27       	eor	r20, r20
 6ee:	55 27       	eor	r21, r21
 6f0:	ff 93       	push	r31
 6f2:	ef 93       	push	r30
 6f4:	0e 94 b7 03 	call	0x76e <__udivmodsi4>
 6f8:	ef 91       	pop	r30
 6fa:	ff 91       	pop	r31
 6fc:	60 5d       	subi	r22, 0xD0	; 208
 6fe:	6a 33       	cpi	r22, 0x3A	; 58
 700:	0c f0       	brlt	.+2      	; 0x704 <ltoa+0x46>
 702:	69 5d       	subi	r22, 0xD9	; 217
 704:	61 93       	st	Z+, r22
 706:	b9 01       	movw	r22, r18
 708:	ca 01       	movw	r24, r20
 70a:	60 50       	subi	r22, 0x00	; 0
 70c:	70 40       	sbci	r23, 0x00	; 0
 70e:	80 40       	sbci	r24, 0x00	; 0
 710:	90 40       	sbci	r25, 0x00	; 0
 712:	51 f7       	brne	.-44     	; 0x6e8 <ltoa+0x2a>
 714:	16 f4       	brtc	.+4      	; 0x71a <ltoa+0x5c>
 716:	cd e2       	ldi	r28, 0x2D	; 45
 718:	c1 93       	st	Z+, r28
 71a:	10 82       	st	Z, r1
 71c:	8f 91       	pop	r24
 71e:	9f 91       	pop	r25
 720:	cf 91       	pop	r28
 722:	0c 94 93 03 	jmp	0x726 <strrev>

00000726 <strrev>:
 726:	dc 01       	movw	r26, r24
 728:	fc 01       	movw	r30, r24
 72a:	01 90       	ld	r0, Z+
 72c:	00 20       	and	r0, r0
 72e:	e9 f7       	brne	.-6      	; 0x72a <strrev+0x4>
 730:	32 97       	sbiw	r30, 0x02	; 2
 732:	ae 17       	cp	r26, r30
 734:	bf 07       	cpc	r27, r31
 736:	30 f4       	brcc	.+12     	; 0x744 <strrev+0x1e>
 738:	7c 91       	ld	r23, X
 73a:	60 81       	ld	r22, Z
 73c:	70 83       	st	Z, r23
 73e:	31 97       	sbiw	r30, 0x01	; 1
 740:	6d 93       	st	X+, r22
 742:	f7 cf       	rjmp	.-18     	; 0x732 <strrev+0xc>
 744:	08 95       	ret

00000746 <__udivmodhi4>:
 746:	aa 1b       	sub	r26, r26
 748:	bb 1b       	sub	r27, r27
 74a:	51 e1       	ldi	r21, 0x11	; 17
 74c:	07 c0       	rjmp	.+14     	; 0x75c <__udivmodhi4_ep>

0000074e <__udivmodhi4_loop>:
 74e:	aa 1f       	adc	r26, r26
 750:	bb 1f       	adc	r27, r27
 752:	a6 17       	cp	r26, r22
 754:	b7 07       	cpc	r27, r23
 756:	10 f0       	brcs	.+4      	; 0x75c <__udivmodhi4_ep>
 758:	a6 1b       	sub	r26, r22
 75a:	b7 0b       	sbc	r27, r23

0000075c <__udivmodhi4_ep>:
 75c:	88 1f       	adc	r24, r24
 75e:	99 1f       	adc	r25, r25
 760:	5a 95       	dec	r21
 762:	a9 f7       	brne	.-22     	; 0x74e <__udivmodhi4_loop>
 764:	80 95       	com	r24
 766:	90 95       	com	r25
 768:	bc 01       	movw	r22, r24
 76a:	cd 01       	movw	r24, r26
 76c:	08 95       	ret

0000076e <__udivmodsi4>:
 76e:	a1 e2       	ldi	r26, 0x21	; 33
 770:	1a 2e       	mov	r1, r26
 772:	aa 1b       	sub	r26, r26
 774:	bb 1b       	sub	r27, r27
 776:	fd 01       	movw	r30, r26
 778:	0d c0       	rjmp	.+26     	; 0x794 <__udivmodsi4_ep>

0000077a <__udivmodsi4_loop>:
 77a:	aa 1f       	adc	r26, r26
 77c:	bb 1f       	adc	r27, r27
 77e:	ee 1f       	adc	r30, r30
 780:	ff 1f       	adc	r31, r31
 782:	a2 17       	cp	r26, r18
 784:	b3 07       	cpc	r27, r19
 786:	e4 07       	cpc	r30, r20
 788:	f5 07       	cpc	r31, r21
 78a:	20 f0       	brcs	.+8      	; 0x794 <__udivmodsi4_ep>
 78c:	a2 1b       	sub	r26, r18
 78e:	b3 0b       	sbc	r27, r19
 790:	e4 0b       	sbc	r30, r20
 792:	f5 0b       	sbc	r31, r21

00000794 <__udivmodsi4_ep>:
 794:	66 1f       	adc	r22, r22
 796:	77 1f       	adc	r23, r23
 798:	88 1f       	adc	r24, r24
 79a:	99 1f       	adc	r25, r25
 79c:	1a 94       	dec	r1
 79e:	69 f7       	brne	.-38     	; 0x77a <__udivmodsi4_loop>
 7a0:	60 95       	com	r22
 7a2:	70 95       	com	r23
 7a4:	80 95       	com	r24
 7a6:	90 95       	com	r25
 7a8:	9b 01       	movw	r18, r22
 7aa:	ac 01       	movw	r20, r24
 7ac:	bd 01       	movw	r22, r26
 7ae:	cf 01       	movw	r24, r30
 7b0:	08 95       	ret
