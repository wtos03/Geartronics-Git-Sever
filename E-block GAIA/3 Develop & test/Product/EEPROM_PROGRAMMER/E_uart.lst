   1               		.file	"E_uart.c"
   2               		.arch atmega32
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  86               	.global	g_tx_ptr
  87               	.global	g_tx_ptr
  88               		.section .bss
  91               	g_tx_ptr:
  92 0000 00        		.skip 1,0
  93               	.global	g_rx_ptr
  94               	.global	g_rx_ptr
  97               	g_rx_ptr:
  98 0001 00        		.skip 1,0
  99               		.text
 101               	.global	uart_init
 103               	uart_init:
   1:E_uart.c      **** /*
   2:E_uart.c      ****  Module 				:   UART
   3:E_uart.c      ****  Description 			:   Universal Async Transmitter
   4:E_uart.c      ****  Original written for 	:   ATMEGA32
   5:E_uart.c      ****  CPU port/tested		:   ATMEGA32
   6:E_uart.c      ****  Hardware use			:   RS-232
   7:E_uart.c      ****  Port use				:   UART Port Tx/Rx PD0, PD1
   8:E_uart.c      ****  Memory	FLASH			:   XXX
   9:E_uart.c      **** 		RAM				:   XXX
  10:E_uart.c      **** 		EEPROM			:   XXX
  11:E_uart.c      ****  Document				:   Document describe algorithm
  12:E_uart.c      ****  Written by 			:   Wichai / wichai@geartronics.net
  13:E_uart.c      ****  Date					:   1/06/2006
  14:E_uart.c      ****   
  15:E_uart.c      ****  Update History
  16:E_uart.c      ****  
  17:E_uart.c      ****  Date			By 					Comments
  18:E_uart.c      ****  ----			--					---------
  19:E_uart.c      ****  
  20:E_uart.c      ****  
  21:E_uart.c      **** */
  22:E_uart.c      ****  
  23:E_uart.c      **** #include <stdlib.h> 
  24:E_uart.c      **** #include "E_uart.h"
  25:E_uart.c      **** 
  26:E_uart.c      **** //  Global Data for Rx/Tx
  27:E_uart.c      **** uint8_t g_rx_buff[MAX_BUFF];
  28:E_uart.c      **** uint8_t g_tx_buff[MAX_BUFF];
  29:E_uart.c      **** uint8_t g_rx_ptr = 0;
  30:E_uart.c      **** uint8_t g_tx_ptr = 0;
  31:E_uart.c      **** 
  32:E_uart.c      **** 
  33:E_uart.c      ****  
  34:E_uart.c      **** /* USART, Rx Complete */
  35:E_uart.c      **** 
  36:E_uart.c      ****  
  37:E_uart.c      **** // UART Receive interrupt
  38:E_uart.c      **** 
  39:E_uart.c      **** 
  40:E_uart.c      **** /*
  41:E_uart.c      ****  * these functions are only for ATmegas with two USART
  42:E_uart.c      ****  */
  43:E_uart.c      **** /*************************************************************************
  44:E_uart.c      **** Function: uart_init()
  45:E_uart.c      **** Purpose:  initialize UART1 and set baudrate
  46:E_uart.c      **** Input:    baudrate using macro UART_BAUD_SELECT()
  47:E_uart.c      **** Returns:  none
  48:E_uart.c      **** **************************************************************************/
  49:E_uart.c      **** void uart_init()
  50:E_uart.c      **** {
 105               	.LM1:
 106               	/* prologue: frame size=0 */
 107               	/* prologue end (size=0) */
  51:E_uart.c      ****  
  52:E_uart.c      **** // Initialize UART  
  53:E_uart.c      ****     
  54:E_uart.c      ****     UCSRC  = 0x86;    // 8 bit non parity  1 stop bit
 109               	.LM2:
 110 0000 86E8      		ldi r24,lo8(-122)
 111 0002 80BD      		out 64-0x20,r24
  55:E_uart.c      ****      UCSRB  = 0x98;    // Enable RX Interrupt and Enable TX, RX pin
 113               	.LM3:
 114 0004 88E9      		ldi r24,lo8(-104)
 115 0006 8AB9      		out 42-0x20,r24
  56:E_uart.c      **** //    UCSRB  = 0B8;    // Enable RX Interrupt, Data registerempty interrupt enable and Enable TX, R
  57:E_uart.c      **** 	UBRRL  = 0x67;    // Speed 9600 UBRR = 103 at 16 MHZ
 117               	.LM4:
 118 0008 87E6      		ldi r24,lo8(103)
 119 000a 89B9      		out 41-0x20,r24
  58:E_uart.c      **** //	UBRRL  = 51;      // Speed = 19.2 K at 16 Mhz
  59:E_uart.c      **** 	UBRRH  = 0;
 121               	.LM5:
 122 000c 10BC      		out 64-0x20,__zero_reg__
  60:E_uart.c      **** //    DDRD = 0x00;	 
  61:E_uart.c      ****  
  62:E_uart.c      **** 	g_rx_ptr = 0;
 124               	.LM6:
 125 000e 1092 0000 		sts g_rx_ptr,__zero_reg__
  63:E_uart.c      **** 	g_tx_ptr = 0;
 127               	.LM7:
 128 0012 1092 0000 		sts g_tx_ptr,__zero_reg__
 129               	/* epilogue: frame size=0 */
 130 0016 0895      		ret
 131               	/* epilogue end (size=1) */
 132               	/* function uart_init size 12 (11) */
 134               	.Lscope0:
 137               	.global	uart_put_RX
 139               	uart_put_RX:
  64:E_uart.c      ****  /* Set baud rate */
  65:E_uart.c      ****  
  66:E_uart.c      **** }
  67:E_uart.c      **** 
  68:E_uart.c      **** /*
  69:E_uart.c      **** Put character into Rx buffer
  70:E_uart.c      **** 
  71:E_uart.c      **** Return  = Success 0
  72:E_uart.c      ****         = Fail   Buffer Full
  73:E_uart.c      **** 		
  74:E_uart.c      **** */
  75:E_uart.c      **** uint8_t uart_put_RX ( uint8_t ch)
  76:E_uart.c      **** {
 141               	.LM8:
 142               	/* prologue: frame size=0 */
 143               	/* prologue end (size=0) */
 144 0018 982F      		mov r25,r24
  77:E_uart.c      ****    if ((g_rx_ptr < MAX_BUFF)) 
 146               	.LM9:
 147 001a 8091 0000 		lds r24,g_rx_ptr
 148 001e 8A3F      		cpi r24,lo8(-6)
 149 0020 80F4      		brsh .L3
  78:E_uart.c      ****    {
  79:E_uart.c      **** //  End with Null
  80:E_uart.c      **** 		g_rx_buff[g_rx_ptr] = ch;
 151               	.LM10:
 152 0022 E82F      		mov r30,r24
 153 0024 FF27      		clr r31
 154 0026 E050      		subi r30,lo8(-(g_rx_buff))
 155 0028 F040      		sbci r31,hi8(-(g_rx_buff))
 156 002a 9083      		st Z,r25
  81:E_uart.c      **** 		g_rx_ptr++;
 158               	.LM11:
 159 002c 8F5F      		subi r24,lo8(-(1))
 160 002e 8093 0000 		sts g_rx_ptr,r24
  82:E_uart.c      **** 		g_rx_buff[g_rx_ptr] = 0;   // End with null characters
 162               	.LM12:
 163 0032 E82F      		mov r30,r24
 164 0034 FF27      		clr r31
 165 0036 E050      		subi r30,lo8(-(g_rx_buff))
 166 0038 F040      		sbci r31,hi8(-(g_rx_buff))
 167 003a 1082      		st Z,__zero_reg__
  83:E_uart.c      **** 		return 0;
 169               	.LM13:
 170 003c 80E0      		ldi r24,lo8(0)
 171 003e 90E0      		ldi r25,hi8(0)
 172 0040 0895      		ret
 173               	.L3:
  84:E_uart.c      ****     }
  85:E_uart.c      ****    else  // Buffer full do nothing  return error
  86:E_uart.c      ****    {
  87:E_uart.c      ****         return UART_BUFFER_FULL;
 175               	.LM14:
 176 0042 82E0      		ldi r24,lo8(2)
 177 0044 90E0      		ldi r25,hi8(2)
  88:E_uart.c      ****    }
  89:E_uart.c      **** }
 179               	.LM15:
 180 0046 0895      		ret
 181               	/* epilogue: frame size=0 */
 182               	/* epilogue: noreturn */
 183               	/* epilogue end (size=0) */
 184               	/* function uart_put_RX size 24 (24) */
 186               	.Lscope1:
 188               	.global	uart_get_RX
 190               	uart_get_RX:
  90:E_uart.c      **** 
  91:E_uart.c      **** // Get character from RX buffer
  92:E_uart.c      **** 
  93:E_uart.c      **** uint8_t uart_get_RX (void)
  94:E_uart.c      **** {
 192               	.LM16:
 193               	/* prologue: frame size=0 */
 194               	/* prologue end (size=0) */
  95:E_uart.c      ****    uint8_t  i,j,ch;
  96:E_uart.c      ****    if (g_rx_ptr)
 196               	.LM17:
 197 0048 8091 0000 		lds r24,g_rx_ptr
 198 004c 8823      		tst r24
 199 004e A1F0      		breq .L6
  97:E_uart.c      ****    {
  98:E_uart.c      **** 		ch = g_rx_buff[0];
 201               	.LM18:
 202 0050 9091 0000 		lds r25,g_rx_buff
  99:E_uart.c      ****         i =  g_rx_ptr;
 204               	.LM19:
 205 0054 282F      		mov r18,r24
 100:E_uart.c      ****         g_rx_ptr--;
 207               	.LM20:
 208 0056 2150      		subi r18,lo8(-(-1))
 209 0058 2093 0000 		sts g_rx_ptr,r18
 210 005c 2F5F      		subi r18,lo8(-(1))
 101:E_uart.c      **** 		j = 0;
 212               	.LM21:
 213 005e 30E0      		ldi r19,lo8(0)
 214               	.L9:
 102:E_uart.c      **** // Move left all characters
 103:E_uart.c      ****         while (i)
 104:E_uart.c      **** 		{
 105:E_uart.c      **** 	      g_rx_buff[j] =  g_rx_buff[j+1];
 216               	.LM22:
 217 0060 E32F      		mov r30,r19
 218 0062 FF27      		clr r31
 219 0064 E050      		subi r30,lo8(-(g_rx_buff))
 220 0066 F040      		sbci r31,hi8(-(g_rx_buff))
 221 0068 8181      		ldd r24,Z+1
 222 006a 8083      		st Z,r24
 106:E_uart.c      **** 	      j++;
 224               	.LM23:
 225 006c 3F5F      		subi r19,lo8(-(1))
 107:E_uart.c      **** 	 	  i--;
 227               	.LM24:
 228 006e 2150      		subi r18,lo8(-(-1))
 229 0070 B9F7      		brne .L9
 108:E_uart.c      **** 		}
 109:E_uart.c      **** 		return ch;
 231               	.LM25:
 232 0072 892F      		mov r24,r25
 233 0074 9927      		clr r25
 234 0076 0895      		ret
 235               	.L6:
 110:E_uart.c      ****    }
 111:E_uart.c      ****    return 0;
 237               	.LM26:
 238 0078 80E0      		ldi r24,lo8(0)
 239 007a 90E0      		ldi r25,hi8(0)
 112:E_uart.c      **** }
 241               	.LM27:
 242 007c 0895      		ret
 243               	/* epilogue: frame size=0 */
 244               	/* epilogue: noreturn */
 245               	/* epilogue end (size=0) */
 246               	/* function uart_get_RX size 28 (28) */
 253               	.Lscope2:
 256               	.global	uart_put_TX
 258               	uart_put_TX:
 113:E_uart.c      **** 
 114:E_uart.c      **** /* Put character into g_tx_buff
 115:E_uart.c      ****     INPUT  : Character to put in buffer
 116:E_uart.c      **** 	Output : 0  OK
 117:E_uart.c      **** 		   : UART_BUFFER_FULL  Buffer full
 118:E_uart.c      **** */
 119:E_uart.c      **** 
 120:E_uart.c      **** uint8_t uart_put_TX ( uint8_t ch)
 121:E_uart.c      **** {
 260               	.LM28:
 261               	/* prologue: frame size=0 */
 262               	/* prologue end (size=0) */
 263 007e 982F      		mov r25,r24
 122:E_uart.c      **** // If exceed buffer do nothing until buffer is flushed
 123:E_uart.c      ****     if ((g_tx_ptr > MAX_BUFF)) 
 265               	.LM29:
 266 0080 8091 0000 		lds r24,g_tx_ptr
 267 0084 8B3F      		cpi r24,lo8(-5)
 268 0086 18F0      		brlo .L13
 124:E_uart.c      ****     {
 125:E_uart.c      **** 		return UART_BUFFER_FULL;   // No increase pointer
 270               	.LM30:
 271 0088 82E0      		ldi r24,lo8(2)
 272 008a 90E0      		ldi r25,hi8(2)
 273 008c 0895      		ret
 274               	.L13:
 126:E_uart.c      ****     }
 127:E_uart.c      **** 	g_tx_buff[g_tx_ptr]= ch;
 276               	.LM31:
 277 008e E82F      		mov r30,r24
 278 0090 FF27      		clr r31
 279 0092 E050      		subi r30,lo8(-(g_tx_buff))
 280 0094 F040      		sbci r31,hi8(-(g_tx_buff))
 281 0096 9083      		st Z,r25
 128:E_uart.c      **** 	g_tx_ptr++;
 283               	.LM32:
 284 0098 8F5F      		subi r24,lo8(-(1))
 285 009a 8093 0000 		sts g_tx_ptr,r24
 129:E_uart.c      **** 	g_tx_buff[g_tx_ptr] = 0;    // Put null character at the end
 287               	.LM33:
 288 009e E82F      		mov r30,r24
 289 00a0 FF27      		clr r31
 290 00a2 E050      		subi r30,lo8(-(g_tx_buff))
 291 00a4 F040      		sbci r31,hi8(-(g_tx_buff))
 292 00a6 1082      		st Z,__zero_reg__
 130:E_uart.c      **** 	return 0;
 294               	.LM34:
 295 00a8 80E0      		ldi r24,lo8(0)
 296 00aa 90E0      		ldi r25,hi8(0)
 131:E_uart.c      **** }
 298               	.LM35:
 299 00ac 0895      		ret
 300               	/* epilogue: frame size=0 */
 301               	/* epilogue: noreturn */
 302               	/* epilogue end (size=0) */
 303               	/* function uart_put_TX size 24 (24) */
 305               	.Lscope3:
 307               	.global	uart_get_TX
 309               	uart_get_TX:
 132:E_uart.c      **** 
 133:E_uart.c      **** 
 134:E_uart.c      **** // Get character from TX buffer
 135:E_uart.c      **** uint8_t uart_get_TX (void)
 136:E_uart.c      **** {
 311               	.LM36:
 312               	/* prologue: frame size=0 */
 313               	/* prologue end (size=0) */
 137:E_uart.c      ****    uint8_t i,j,ch =0;
 138:E_uart.c      ****    
 139:E_uart.c      ****    if ( g_tx_ptr)
 315               	.LM37:
 316 00ae 8091 0000 		lds r24,g_tx_ptr
 317 00b2 8823      		tst r24
 318 00b4 A1F0      		breq .L15
 140:E_uart.c      ****    {
 141:E_uart.c      **** 		i  =  g_tx_ptr;
 320               	.LM38:
 321 00b6 282F      		mov r18,r24
 142:E_uart.c      **** 		g_tx_ptr--;
 323               	.LM39:
 324 00b8 2150      		subi r18,lo8(-(-1))
 325 00ba 2093 0000 		sts g_tx_ptr,r18
 326 00be 2F5F      		subi r18,lo8(-(1))
 143:E_uart.c      **** 		ch =  g_tx_buff[0];   // Start from 0 FIFO
 328               	.LM40:
 329 00c0 9091 0000 		lds r25,g_tx_buff
 144:E_uart.c      **** 		j = 0;
 331               	.LM41:
 332 00c4 30E0      		ldi r19,lo8(0)
 333               	.L18:
 145:E_uart.c      **** // Move left all characters
 146:E_uart.c      ****         while (i)
 147:E_uart.c      **** 		{
 148:E_uart.c      **** 	      g_tx_buff[j] =  g_tx_buff[j+1];
 335               	.LM42:
 336 00c6 E32F      		mov r30,r19
 337 00c8 FF27      		clr r31
 338 00ca E050      		subi r30,lo8(-(g_tx_buff))
 339 00cc F040      		sbci r31,hi8(-(g_tx_buff))
 340 00ce 8181      		ldd r24,Z+1
 341 00d0 8083      		st Z,r24
 149:E_uart.c      **** 	      j++;
 343               	.LM43:
 344 00d2 3F5F      		subi r19,lo8(-(1))
 150:E_uart.c      **** 	 	  i--;
 346               	.LM44:
 347 00d4 2150      		subi r18,lo8(-(-1))
 348 00d6 B9F7      		brne .L18
 151:E_uart.c      **** 		}
 152:E_uart.c      **** 		return ch;
 350               	.LM45:
 351 00d8 892F      		mov r24,r25
 352 00da 9927      		clr r25
 353 00dc 0895      		ret
 354               	.L15:
 153:E_uart.c      ****    }
 154:E_uart.c      ****    return 0;
 356               	.LM46:
 357 00de 80E0      		ldi r24,lo8(0)
 358 00e0 90E0      		ldi r25,hi8(0)
 155:E_uart.c      **** }
 360               	.LM47:
 361 00e2 0895      		ret
 362               	/* epilogue: frame size=0 */
 363               	/* epilogue: noreturn */
 364               	/* epilogue end (size=0) */
 365               	/* function uart_get_TX size 28 (28) */
 372               	.Lscope4:
 374               	.global	uart_getc
 376               	uart_getc:
 156:E_uart.c      **** 
 157:E_uart.c      **** 
 158:E_uart.c      **** uint8_t uart_getc(void)
 159:E_uart.c      **** {
 378               	.LM48:
 379               	/* prologue: frame size=0 */
 380               	/* prologue end (size=0) */
 160:E_uart.c      ****     uint8_t ch;
 161:E_uart.c      **** 	ch = uart_get_RX();
 382               	.LM49:
 383 00e4 0E94 0000 		call uart_get_RX
 162:E_uart.c      ****     return ch ;
 163:E_uart.c      **** }
 385               	.LM50:
 386 00e8 9927      		clr r25
 387               	/* epilogue: frame size=0 */
 388 00ea 0895      		ret
 389               	/* epilogue end (size=1) */
 390               	/* function uart_getc size 4 (3) */
 392               	.Lscope5:
 395               	.global	uart_putc
 397               	uart_putc:
 164:E_uart.c      **** 
 165:E_uart.c      **** uint8_t uart_putc(uint8_t c)
 166:E_uart.c      **** {
 399               	.LM51:
 400               	/* prologue: frame size=0 */
 401               	/* prologue end (size=0) */
 167:E_uart.c      ****   
 168:E_uart.c      ****   uart_put_TX(c);
 403               	.LM52:
 404 00ec 0E94 0000 		call uart_put_TX
 169:E_uart.c      **** // Enable interrupt UART Data Register empty
 170:E_uart.c      ****   UCSRB  |=  (1<<UDRIE);	
 406               	.LM53:
 407 00f0 559A      		sbi 42-0x20,5
 171:E_uart.c      ****    return 0;
 172:E_uart.c      **** 
 173:E_uart.c      **** }
 409               	.LM54:
 410 00f2 80E0      		ldi r24,lo8(0)
 411 00f4 90E0      		ldi r25,hi8(0)
 412               	/* epilogue: frame size=0 */
 413 00f6 0895      		ret
 414               	/* epilogue end (size=1) */
 415               	/* function uart_putc size 6 (5) */
 417               	.Lscope6:
 420               	.global	uart_puts
 422               	uart_puts:
 174:E_uart.c      **** 
 175:E_uart.c      **** 
 176:E_uart.c      **** /*************************************************************************
 177:E_uart.c      **** Function: uart_puts()
 178:E_uart.c      **** Purpose:  transmit string to UART1
 179:E_uart.c      **** Input:    string to be transmitted
 180:E_uart.c      **** Returns:  none          
 181:E_uart.c      **** **************************************************************************/
 182:E_uart.c      **** void uart_puts(const uint8_t *s )
 183:E_uart.c      **** {
 424               	.LM55:
 425               	/* prologue: frame size=0 */
 426 00f8 CF93      		push r28
 427 00fa DF93      		push r29
 428               	/* prologue end (size=2) */
 429 00fc EC01      		movw r28,r24
 430               	.L29:
 184:E_uart.c      ****     while (*s) 
 185:E_uart.c      ****       uart_putc(*s++);
 432               	.LM56:
 433 00fe 8881      		ld r24,Y
 434 0100 8823      		tst r24
 435 0102 21F0      		breq .L28
 436 0104 8991      		ld r24,Y+
 437 0106 0E94 0000 		call uart_putc
 438 010a F9CF      		rjmp .L29
 439               	.L28:
 186:E_uart.c      ****    uart_putc(0x0D); // CR
 441               	.LM57:
 442 010c 8DE0      		ldi r24,lo8(13)
 443 010e 0E94 0000 		call uart_putc
 187:E_uart.c      **** 	uart_putc(0x0A); // LF
 445               	.LM58:
 446 0112 8AE0      		ldi r24,lo8(10)
 447 0114 0E94 0000 		call uart_putc
 448               	/* epilogue: frame size=0 */
 449 0118 DF91      		pop r29
 450 011a CF91      		pop r28
 451 011c 0895      		ret
 452               	/* epilogue end (size=3) */
 453               	/* function uart_puts size 19 (14) */
 455               	.Lscope7:
 459               	.global	debug_value
 461               	debug_value:
 188:E_uart.c      **** }
 189:E_uart.c      **** 
 190:E_uart.c      **** /*
 191:E_uart.c      **** Show debug value
 192:E_uart.c      **** */
 193:E_uart.c      **** 
 194:E_uart.c      **** void  debug_value ( int16_t value, uint8_t radix)
 195:E_uart.c      **** {
 463               	.LM59:
 464               	/* prologue: frame size=20 */
 465 011e CF93      		push r28
 466 0120 DF93      		push r29
 467 0122 CDB7      		in r28,__SP_L__
 468 0124 DEB7      		in r29,__SP_H__
 469 0126 6497      		sbiw r28,20
 470 0128 0FB6      		in __tmp_reg__,__SREG__
 471 012a F894      		cli
 472 012c DEBF      		out __SP_H__,r29
 473 012e 0FBE      		out __SREG__,__tmp_reg__
 474 0130 CDBF      		out __SP_L__,r28
 475               	/* prologue end (size=10) */
 476 0132 262F      		mov r18,r22
 196:E_uart.c      ****    uint8_t  buff[20];
 197:E_uart.c      ****    
 198:E_uart.c      ****    itoa (value,buff, radix);
 478               	.LM60:
 479 0134 3327      		clr r19
 480 0136 A901      		movw r20,r18
 481 0138 BE01      		movw r22,r28
 482 013a 6F5F      		subi r22,lo8(-(1))
 483 013c 7F4F      		sbci r23,hi8(-(1))
 484 013e 0E94 0000 		call itoa
 199:E_uart.c      ****     uart_puts ( buff);
 486               	.LM61:
 487 0142 CE01      		movw r24,r28
 488 0144 0196      		adiw r24,1
 489 0146 0E94 0000 		call uart_puts
 490               	/* epilogue: frame size=20 */
 491 014a 6496      		adiw r28,20
 492 014c 0FB6      		in __tmp_reg__,__SREG__
 493 014e F894      		cli
 494 0150 DEBF      		out __SP_H__,r29
 495 0152 0FBE      		out __SREG__,__tmp_reg__
 496 0154 CDBF      		out __SP_L__,r28
 497 0156 DF91      		pop r29
 498 0158 CF91      		pop r28
 499 015a 0895      		ret
 500               	/* epilogue end (size=9) */
 501               	/* function debug_value size 31 (12) */
 506               	.Lscope8:
 510               	.global	debug_lvalue
 512               	debug_lvalue:
 200:E_uart.c      **** 
 201:E_uart.c      **** }
 202:E_uart.c      **** 
 203:E_uart.c      **** 
 204:E_uart.c      **** 
 205:E_uart.c      **** void  debug_lvalue ( int32_t value, uint8_t radix)
 206:E_uart.c      **** {
 514               	.LM62:
 515               	/* prologue: frame size=40 */
 516 015c EF92      		push r14
 517 015e FF92      		push r15
 518 0160 0F93      		push r16
 519 0162 1F93      		push r17
 520 0164 CF93      		push r28
 521 0166 DF93      		push r29
 522 0168 CDB7      		in r28,__SP_L__
 523 016a DEB7      		in r29,__SP_H__
 524 016c A897      		sbiw r28,40
 525 016e 0FB6      		in __tmp_reg__,__SREG__
 526 0170 F894      		cli
 527 0172 DEBF      		out __SP_H__,r29
 528 0174 0FBE      		out __SREG__,__tmp_reg__
 529 0176 CDBF      		out __SP_L__,r28
 530               	/* prologue end (size=14) */
 531 0178 7B01      		movw r14,r22
 532 017a 8C01      		movw r16,r24
 533 017c 842F      		mov r24,r20
 207:E_uart.c      ****    uint8_t  buff[40];
 208:E_uart.c      ****    
 209:E_uart.c      ****    ltoa (value,buff, radix);
 535               	.LM63:
 536 017e 9927      		clr r25
 537 0180 9C01      		movw r18,r24
 538 0182 AE01      		movw r20,r28
 539 0184 4F5F      		subi r20,lo8(-(1))
 540 0186 5F4F      		sbci r21,hi8(-(1))
 541 0188 C801      		movw r24,r16
 542 018a B701      		movw r22,r14
 543 018c 0E94 0000 		call ltoa
 210:E_uart.c      ****     uart_puts ( buff);
 545               	.LM64:
 546 0190 CE01      		movw r24,r28
 547 0192 0196      		adiw r24,1
 548 0194 0E94 0000 		call uart_puts
 549               	/* epilogue: frame size=40 */
 550 0198 A896      		adiw r28,40
 551 019a 0FB6      		in __tmp_reg__,__SREG__
 552 019c F894      		cli
 553 019e DEBF      		out __SP_H__,r29
 554 01a0 0FBE      		out __SREG__,__tmp_reg__
 555 01a2 CDBF      		out __SP_L__,r28
 556 01a4 DF91      		pop r29
 557 01a6 CF91      		pop r28
 558 01a8 1F91      		pop r17
 559 01aa 0F91      		pop r16
 560 01ac FF90      		pop r15
 561 01ae EF90      		pop r14
 562 01b0 0895      		ret
 563               	/* epilogue end (size=13) */
 564               	/* function debug_lvalue size 43 (16) */
 569               	.Lscope9:
 570               		.comm g_rx_buff,250,1
 571               		.comm g_tx_buff,250,1
 576               		.text
 578               	Letext:
 579               	/* File "E_uart.c": code  219 = 0x00db ( 165), prologues  26, epilogues  28 */
DEFINED SYMBOLS
                            *ABS*:00000000 E_uart.c
C:\DOCUME~1\tos\LOCALS~1\Temp/ccO8aaaa.s:3      *ABS*:0000003f __SREG__
C:\DOCUME~1\tos\LOCALS~1\Temp/ccO8aaaa.s:4      *ABS*:0000003e __SP_H__
C:\DOCUME~1\tos\LOCALS~1\Temp/ccO8aaaa.s:5      *ABS*:0000003d __SP_L__
C:\DOCUME~1\tos\LOCALS~1\Temp/ccO8aaaa.s:6      *ABS*:00000000 __tmp_reg__
C:\DOCUME~1\tos\LOCALS~1\Temp/ccO8aaaa.s:7      *ABS*:00000001 __zero_reg__
C:\DOCUME~1\tos\LOCALS~1\Temp/ccO8aaaa.s:91     .bss:00000000 g_tx_ptr
C:\DOCUME~1\tos\LOCALS~1\Temp/ccO8aaaa.s:97     .bss:00000001 g_rx_ptr
C:\DOCUME~1\tos\LOCALS~1\Temp/ccO8aaaa.s:103    .text:00000000 uart_init
C:\DOCUME~1\tos\LOCALS~1\Temp/ccO8aaaa.s:139    .text:00000018 uart_put_RX
                            *COM*:000000fa g_rx_buff
C:\DOCUME~1\tos\LOCALS~1\Temp/ccO8aaaa.s:190    .text:00000048 uart_get_RX
C:\DOCUME~1\tos\LOCALS~1\Temp/ccO8aaaa.s:258    .text:0000007e uart_put_TX
                            *COM*:000000fa g_tx_buff
C:\DOCUME~1\tos\LOCALS~1\Temp/ccO8aaaa.s:309    .text:000000ae uart_get_TX
C:\DOCUME~1\tos\LOCALS~1\Temp/ccO8aaaa.s:376    .text:000000e4 uart_getc
C:\DOCUME~1\tos\LOCALS~1\Temp/ccO8aaaa.s:397    .text:000000ec uart_putc
C:\DOCUME~1\tos\LOCALS~1\Temp/ccO8aaaa.s:422    .text:000000f8 uart_puts
C:\DOCUME~1\tos\LOCALS~1\Temp/ccO8aaaa.s:461    .text:0000011e debug_value
C:\DOCUME~1\tos\LOCALS~1\Temp/ccO8aaaa.s:512    .text:0000015c debug_lvalue
C:\DOCUME~1\tos\LOCALS~1\Temp/ccO8aaaa.s:578    .text:000001b2 Letext

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
itoa
ltoa
