#include "LPC213x.h"
#include <stdio.h>
#include "type.h"
#include "RfidReader.h"
#include "settime.h"
#include "keypad.h"
#include "serial.h"
#include "spi.h"
#include "mmc.h"



// ============ Integrate System =========== //
#define COMPARE 0
#define CHANGEPASS 1
#define SETTIME 2
#define SAVE 3
#define DELETE 4
#define ADDPASSWORD 5
#define DELETEPASSWORD 6
#define CONFIG 10

#define MAX_PASSWORD_USER 5
#define MAX_PASSWORD 9
#define MAX_RFID_CARD 50
#define MAX_NUMBER_USER 50

#define MAX_BLOCK_NUM 512

long timestate = 0;
int state;
int lMemTem;
int lMemRFID;
int lPasswordUser;

typedef struct RFIDStorage
{
	int datarfid;
	int hour;
	int minute;
	int sec;
}RFIDStorage;

RFIDStorage memoryTem[MAX_RFID_CARD], memoryRFID[MAX_RFID_CARD];


//word from keypad
char tempkey[MAX_PASSWORD];

// password
char password[MAX_PASSWORD] = "111";
char passwordUser[MAX_NUMBER_USER][MAX_PASSWORD_USER];

//check message of mmc
char ckmsg[] = "E-block Check";

//function
//extern void init_serial0 (void); 							
//extern int putchar (int ch);  									
//extern int getchar (void);  								

int receive_keypad(int);
int check_password();
void change_password();

void cleardata(){
    int i;
    for(i = 0;i < MAX_PASSWORD;i++)
	{
		 tempkey[i] = '\0';
	}

}

int receive_keypad(int mode)
{
	char key = '$';
	int i = 0;
	long sec_starts;
	sec_starts = (sec()+30)%60;
	
	if(mode == 1)
	{
		cleardata();
		do
		{
			key = keypad();
		 	if(key != '$')
			{
				
				if(key == '*')
				{
			  		tempkey[i] = '\0';
					key = '*';
					printf("\n");
				}
				else if(key == '#')
				{
					if(i > 0)
					{
			 			i--;
						printf("\b \b");
					}
				}
				else if(i == MAX_PASSWORD-1)
				{

				}
				else
				{
					printf("%c",key);
					tempkey[i] = key;
					i++;
				}
			}
			if((sec()- sec_starts) == 0)
			{
				cleardata();
				return 0;
			}
		}while(key != '*');
	}
	else if(mode == 2)
	{
		i = 1;
		do
		{
		 	key = keypad();
	 		if((key != '$')||(i == (MAX_PASSWORD_USER-1)))
			{
				if(i == (MAX_PASSWORD_USER-1))
				{
				  	tempkey[i] = '\0';
					printf("\n");
				}
				else if(key == '#')
				{
					if(i > 0)
					{
			 			i--;
						printf("\b \b");
					}
				}
				else if(key != '*')
				{
					printf("%c",key);
					tempkey[i] = key;
					i++;
				}
			}		
			if((sec()- sec_starts) == 0)
			{
				cleardata();
				return 0;
			}
		}while(i != (MAX_PASSWORD_USER-1));
	}
 	else if(mode == 3)
	{
		cleardata();
		do
		{
		 	key = keypad();
	 		if(key != '$')
			{
			
				if((key == '*')&&(i == MAX_PASSWORD_USER-1))
				{
			  		tempkey[i] = '\0';
					key = '*';
					printf("\n");
				}
				else if(key == '#')
				{
					if(i > 0)
					{
			 			i--;
						printf("\b \b");
					}
				}
				else if(i == MAX_PASSWORD_USER-1)
				{

				}
				else if(key != '*')
				{
					printf("%c",key);
					tempkey[i] = key;
					i++;
				}
			}		
			if((sec()- sec_starts) == 0)
			{
				cleardata();
				return 0;
			}
		}while((key != '*')||(i != (MAX_PASSWORD_USER-1)));
	}

	return 1;
}


int check_password(int sel)
{
	int i,j,wrong_pass = 0;
	if(sel == 1)
	{
	    for(i = 0;i< 50;i++)
		{
			wrong_pass = 1;	
		   for(j = 0;j < MAX_PASSWORD_USER;j++)
		   {
			    if(tempkey[j] != passwordUser[i][j])
			    {
		 		   wrong_pass = 0;
				}
			    if((tempkey[j] == '\0') && (passwordUser[i][j] == '\0'))
			    {
					if(j == 0)
						wrong_pass = 0;
			        j = MAX_PASSWORD_USER;
				}
		   }
		   if(wrong_pass)
		   		return 1;
		}
		return 0;
	}
	else
	{
 		for(i = 0;i < MAX_PASSWORD;i++)
		{
			if(tempkey[i] != password[i])	
		 		return 0;
			if((tempkey[i] == '\0') && (password[i] == '\0'))
			    i = MAX_PASSWORD;
		}

		return 1;
	}
}

void change_password()
{
	int i;
 	for(i = 0;i < MAX_PASSWORD;i++)
	{
		 password[i] = tempkey[i];
	}
}

void setStateCompare(void){
	printf("\n*****************\n");
	printf("* State Compare *\n");
	printf("*****************\n");
    state = COMPARE;
}

void setStateConfig(void){
	printf("\n****************\n");
	printf("* State Config *\n");
	printf("****************\n");
	printf("[1] Change password\n");
	printf("[2] Set time\n");
	printf("[3] Save RFID card\n");
	printf("[4] Delete RFID card\n");
	printf("[5] Add password User\n");
	printf("[6] Delete password User\n");
	printf("[7] Show Save RFID card time\n");
	printf("[8] Show Stamp time\n");
	printf("[9] Show time\n");
	printf("[0] Exit\n");
	printf("Select Menu :");
    state = CONFIG; 
}

void setStateChangepass(void){
	printf("*************************\n");
	printf("* State Change Password *\n");
	printf("*************************\n");
	printf("Enter New Password :");
    state = CHANGEPASS;
}

void setStateSettime(void){
	printf("******************\n");
	printf("* State Set Time *\n");
	printf("******************\n");
	printf("Enter time (hhmm) :");
    state = SETTIME;
}

void setStateSave(void){
	printf("**************\n");
	printf("* State Save *\n");
	printf("**************\n");
	printf("Please Stamp Card in 1 minute\n");
    state = SAVE; 
}

void setStateDelete(void){
	printf("****************\n");
	printf("* State Delete *\n");
	printf("****************\n");
	printf("Please Stamp Card in 1 minute\n");
    state = DELETE; 
}

void setStateAddPassword(void){
	printf("**********************\n");
	printf("* State Add Password *\n");
	printf("**********************\n");
	printf("Enter Password User :");
    state = ADDPASSWORD; 
}

void setStateDeletePassword(void){
	printf("**********************\n");
	printf("* State Add Password *\n");
	printf("**********************\n");
	printf("Enter Password User :");
    state = DELETEPASSWORD; 
}

int checkDataSystem(int rfid){
	 int i;

	 for(i=0;i<50;i++){
	     if( memoryRFID[i].datarfid == rfid){
		     return 1;
		 }
	 }
	 return 0;
	
}

void inputMemTem(int datarfid){
     
      memoryTem[lMemTem].datarfid = datarfid;
	  memoryTem[lMemTem].hour = hour();
	  memoryTem[lMemTem].minute = minute();
	  memoryTem[lMemTem].sec = sec();
	  lMemTem++;
	  if( lMemTem == 50){
		  lMemTem = 0;
	  }
}

void inputMemRFID(int inrfid){
      int i;
      if( lMemRFID == 50){
		  return ;
	  }
	  for(i=0;i<50;i++){
	     if( memoryRFID[i].datarfid == inrfid){
		     return ;
		 }
	  }
      memoryRFID[lMemRFID].datarfid = inrfid;
	  memoryRFID[lMemRFID].hour = hour();
	  memoryRFID[lMemRFID].minute = minute();
	  memoryRFID[lMemRFID].sec = sec();
	  lMemRFID++;
}

void deleteMemRFID(int inrfid){
	 int i;
	 for(i=0;i<50;i++){
	     if( memoryRFID[i].datarfid == inrfid)
		 {
			 memoryRFID[i] = memoryRFID[--lMemRFID];
			 memoryRFID[lMemRFID].datarfid = 0;
		 }
	 }
}

void addPasswordUser()
{
	int i;
  if(lPasswordUser == 50){
	 return;
  }

  else if(check_password(1) == 1){
      return;
  }
  else{
 	for(i = 0;i < MAX_PASSWORD_USER;i++)
	{
		passwordUser[lPasswordUser][i] = tempkey[i];
	}
	lPasswordUser++; 
  }
}

void deletePasswordUser()
{
	int i,j,check_correct = 0;
  	if(check_password(1) == 1)
  	{
 		for(i = 0;i < MAX_NUMBER_USER;i++)
		{
			check_correct = 1;
			for(j = 0;j < MAX_PASSWORD_USER;j++)
			{
				if(tempkey[j] != passwordUser[i][j])
					check_correct = 0;
			}
			if(check_correct == 1)
			{
				lPasswordUser--;
				for(j = 0;j < MAX_PASSWORD_USER;j++)
				{
			 		passwordUser[i][j] = passwordUser[lPasswordUser][j];
				}
				passwordUser[lPasswordUser][0] = '\0';
			}
		}
	}
  	else
  	{
   		printf("No This Password User");
  	}
}

void delay(int count){
    while(count < 0){
	    count-- ;
	}
}
							 
void opendoor(){
    int secold;
    //IODIR0 |= (1<<10);
	//IOSET0 = (1<<10);
	secold = (sec()+5)%60;
	while(sec()<=secold);
	//IOCLR0 = (1<<10);
}

int loaddata()
{
	int i = 0,j = 0;
	char temp1[MMC_DATA_SIZE];
	int temp2[MMC_DATA_SIZE/4];

	//load block 0
	mmc_read_block_char(0,temp1);
	for(i = 0;i < sizeof(ckmsg);i++)
	{
	 	if(temp1[i] != ckmsg[i])
			return 0;
	}
	for(j = 0;j < MAX_PASSWORD;j++)
	{
	 	password[j] = temp1[i];
		i++; 
	}
	
	//load block 1-50
	for(i = 0;i < MAX_NUMBER_USER;i++)
	{
		mmc_read_block_char(1+i,temp1);
		if(temp1[0] != '\0')
		{
	 		for(j = 0;j < MAX_PASSWORD_USER;j++)
			{
			 	passwordUser[i][j] = temp1[j];
			}
		}
	}

	//load block 51-100
	for(i = 0;i < MAX_RFID_CARD;i++)
		{
			mmc_read_block_int(51+i,temp2);
			if(temp2[0] != 0)
			{
				memoryRFID[i].datarfid = temp2[0];
				memoryRFID[i].hour = temp2[1];
				memoryRFID[i].minute = temp2[2];
				memoryRFID[i].sec = temp2[3];
			}

		}

	//load block 101-150
	
	return 1;
}


int savedata(int number)
{
	/*
	   Number 0 is block 0 for check and password
	   Number 1 is block 1 to 50 for password user
	   Number 2 is block 51 to 100 for RFID Card data
	   Number 3 is block 101 to 150 fot RFID stamp time
	 */
 	int i = 0,j = 0;
	char temp1[MMC_DATA_SIZE];
	int temp2[MMC_DATA_SIZE/4];
	
	if(number == 0)
	{
		for(i = 0;i < sizeof(ckmsg);i++)
		{
		 	temp1[i] = ckmsg[i];
		}
		for(j = 0;j < MAX_PASSWORD;j++)
		{
	 		temp1[i] = password[j];
			i++; 
		}
		if(mmc_write_block_char(0,temp1) != 0)
		{
		 	return 0;
		}
		return 1;	
	}
	else if(number == 1)
	{
	  	for(i = 0;i < MAX_NUMBER_USER;i++)
		{
			if(passwordUser[i][0] != '\0')
			{
			 	for(j = 0;j < MAX_PASSWORD_USER;j++)
				{
				 	temp1[j] = passwordUser[i][j];
				}
				if(mmc_write_block_char(1+i,temp1) != 0)
				{
			 		return 0;
				}
			}
		}
		return 1;
	}
	else if(number == 2)
	{
		for(i = 0;i < MAX_RFID_CARD;i++)
		{
			if(memoryRFID[i].datarfid != 0)
			{
				temp2[0] = memoryRFID[i].datarfid;
				temp2[1] = memoryRFID[i].hour;
				temp2[2] = memoryRFID[i].minute;
				temp2[3] = memoryRFID[i].sec;
			}
			if(mmc_write_block_int(51+i,temp2) != 0)
			{
				return 0;
			}
		}
	  	return 1;
	}
	else if(number == 3)
	{
		for(i = 0;i < MAX_RFID_CARD;i++)
		{
			if(memoryTem[i].datarfid != 0)
			{
				temp2[0] = memoryTem[i].datarfid;
				temp2[1] = memoryTem[i].hour;
				temp2[2] = memoryTem[i].minute;
				temp2[3] = memoryTem[i].sec;
			}
			if(mmc_write_block_int(101+i,temp2) != 0)
			{
				return 0;
			}
		}
	  	return 1;
	}
}

void initSystem(void){
     lMemRFID = 0;
     lMemTem = 0;
	 lPasswordUser = 0;
	 sethour(0);
	 setminute(0);
	 setsec(0);
     setStateCompare();

	 if(loaddata() == 0)
	 {
		 printf("Load fail\n");
		 if (savedata(0) == 0)
		 {
		  	printf("Save faill\n");
		 }
		 else
		 {
		  	printf("Save complete");
		 }
	 }
	 else
	 {
	  	printf("Load complete");
	 }
}

void main(void){
    
	char ch;
	int value;
	int j;

	init_serial0();
	init_keypad();
    
	initTime();
    init_RFID();
	SPI_Init(); /* initialize SPI1*/
	if( mmc_init() != 0 )
		printf("\nMMC init fail");

	initSystem();
	
	printf("\n%d:%d:%d\n",hour(),minute(),sec());

	while(1){
	   value = readRFID();
	   ch = keypad();
	   if(value != 0)
	   {
	      if(state == COMPARE){
			  if(checkDataSystem(value) == 1){
			     inputMemTem(value);
				 printf("Door Open\n");
				 opendoor();
				 printf("Door Close\n"); 
			  }
		  }
	      else if(state == SAVE){
				 inputMemRFID(value);
				 printf("ID card = %d\n",value);
				 printf("Save RFID card OK!\n");
				 setStateConfig();

		  }
		  else if( state == DELETE){
				 deleteMemRFID(value);
				 printf("Delete RFID card OK!\n");
				 setStateConfig();
		  }
		  
	   }
	   else if((ch != '$')&&(ch != '*')&&(state == COMPARE))
	   {
	   		cleardata();
		 	tempkey[0] = ch;
			printf("%c",ch);
			receive_keypad(2);
			if(check_password(1) == 1)
		    {
				printf("Door Open\n");
				opendoor();
				printf("Door Close\n"); 
		    }
		    else
 		    {
				printf("\nWrong Password User\n");
 		    }
	   }
	   else{
	        if (state == CHANGEPASS){
				receive_keypad(1);
				change_password();
				savedata(0);
				setStateConfig();

			}
			else if(state == SETTIME){
			     int minutenew = 0,hournew = 0;
				 receive_keypad(1);

	             if((tempkey[0] != '\0') && (tempkey[1] != '\0') && (tempkey[2] != '\0') && (tempkey[3] != '\0')){
		            minutenew = ((((tempkey[2]-48)*10)+(tempkey[3]-48))%60);
		            hournew = (((tempkey[0]-48)*10)+(tempkey[1]-48))%24;
				 }

				 setminute(minutenew);
				 sethour(hournew);
				 setsec(0);

				 printf("\n%d:%d:%d\n",hour(),minute(),sec());
				 setStateConfig();

            }
			else if(state == ADDPASSWORD){
				 receive_keypad(3);
				 addPasswordUser();
				 printf("Save Password User OK!\n");
				 setStateConfig();
            }
			else if(state == DELETEPASSWORD){
				 receive_keypad(3);
				 deletePasswordUser();
				 printf("Delete Password User OK!\n");
				 setStateConfig();
            }

			else if((ch == '*' && state != SAVE && state !=DELETE)||(state == CONFIG))
			{
					if(state == CONFIG)
					{
						cleardata();
					 	for(j = 0;j < MAX_PASSWORD-1;j++)
							tempkey[j] = password[j];
					}
					else
					{
						printf("Enter Password :");
			       		receive_keypad(1);
					}
				   	if(check_password(2) == 1)
					{
						if(state != CONFIG)
						{
				   			setStateConfig();
						}
				       
					   if(receive_keypad(1) == 0)
					   {
							setStateCompare();	
					   }
					   if(tempkey[0] == '1' && tempkey[1] =='\0')
					   {
							 setStateChangepass();
					   }

					   else if(tempkey[0] == '2' && tempkey[1] =='\0')
					   {
							 setStateSettime();
					   }

					   else if(tempkey[0] == '3' && tempkey[1] =='\0')
					   {
							 setStateSave();
							 timestate = (sec()+59)%60;
					   }

					   else if(tempkey[0] == '4' && tempkey[1] =='\0')
					   {
							 setStateDelete();
							 timestate = (sec()+59)%60;
					   }
					   else if(tempkey[0] == '5' && tempkey[1] =='\0')
					   {
	                         setStateAddPassword();							 
					   }
					   else if(tempkey[0] == '6' && tempkey[1] =='\0')
					   {
							 setStateDeletePassword();
					   }
					   else if(tempkey[0] == '7' && tempkey[1] =='\0')
					   {
					   		 for(j = 0;j < MAX_RFID_CARD;j++)
							 {
							 	if(memoryRFID[j].datarfid != 0)
							 		printf("%d save at %d:%d:%d\n",memoryRFID[j].datarfid,memoryRFID[j].hour,memoryRFID[j].minute,memoryRFID[j].sec);
							 }
							 setStateConfig();
					   }
					   else if(tempkey[0] == '8' && tempkey[1] =='\0')
					   {
					   		 for(j = 0;j < MAX_RFID_CARD;j++)
							 {
							 	if(memoryTem[j].datarfid != 0)
							 		printf("%d stamp at %d:%d:%d\n",memoryTem[j].datarfid,memoryTem[j].hour,memoryTem[j].minute,memoryTem[j].sec);
							 }
							 setStateConfig();
					   }
					   else if(tempkey[0] == '9' && tempkey[1] =='\0')
					   {
							 printf("\n%d:%d:%d\n",hour(),minute(),sec());
							 setStateConfig();
					   }
					   else if(tempkey[0] == '1' && tempkey[1] == '0' && tempkey[2] == '\0')
					   {
							for(j = 0;j < MAX_NUMBER_USER;j++)
							{
								if(passwordUser[j][0] != '\0')
									printf("%s\n",passwordUser[j]);
							}
							setStateConfig();
					   }
					   else if(tempkey[0] == '1' && tempkey[1] == '1' && tempkey[2] == '\0')
					   {
							for(j = 0;j < MAX_RFID_CARD;j++)
							{
								if(memoryRFID[j].datarfid != 0)
									printf("%s\n",memoryRFID[j].datarfid);
							}
							setStateConfig();
					   }
					   else if(tempkey[0] == '0' && tempkey[1] =='\0')
					   {
					   		 setStateCompare();
					   }
					   else if(tempkey[0] == '\0')
					   {

					   }
					   else{
						  setStateConfig();
					   }
				   	}
				   	else
				   	{
						printf("Wrong Password\n");
				  	}
			}
			else if(state == SAVE || state == DELETE){
			      if(sec()- timestate == 0){
					  setStateCompare();
				  }
			}
			
	   }


	}
}