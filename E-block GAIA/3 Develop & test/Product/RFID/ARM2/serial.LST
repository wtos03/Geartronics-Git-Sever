ARM COMPILER V2.32a,  serial                                                               18/05/08  02:36:15  PAGE 1   


ARM COMPILER V2.32a, COMPILATION OF MODULE serial
OBJECT MODULE PLACED IN serial.OBJ
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe serial.c THUMB TABS(4) 

stmt  level    source

    1          /****************************************************/
    2          /* Examples Program For "CP-JR ARM7 LPC2138" Board  */
    3          /* Target MCU  : Philips ARM7-LPC2138               */
    4          /*             : X-TAL : 19.6608 MHz                */
    5          /*             : Run Speed 58.9824 MHz (With PLL)   */
    6          /*             : PLL Setup = M(3),P(2)              */
    7          /*             : VPB Clock = CPU Clock = 58.9824MHz */
    8          /* Keil Editor : uVision3 V3.03a                    */
    9          /* Compiler    : Keil CARM V2.50a                   */
   10          /* Create By   : Eakachai Makarn (WWW.ETT.CO.TH)    */
   11          /* Last Update : 17/May/2006                        */
   12          /* Function    : Example Use UART0                  */
   13          /****************************************************/
   14          // Print Message to UART0 (9600,N,8,1)
   15          
   16          #include "LPC213x.H"                                        // LPC2138 MPU Register
   17          #include <stdio.h>                                          // For Used Function printf 
   18          #include "serial.h"
   19          
   20          
   21          /******************************/
   22          /* Initial UART0 = 9600,N,8,1 */
   23          /* VPB(pclk) = 58.9824 MHz/2  */
   24          /******************************/
   25          void init_serial0 (void)  
   26          {
   27   1        PINSEL0 &= 0xFFFFFFF0;                                    // Reset P0.0,P0.1 Pin Config
   28   1        PINSEL0 |= 0x00000001;                                    // Select P0.0 = TxD(UART0)
   29   1        PINSEL0 |= 0x00000004;                                    // Select P0.1 = RxD(UART0)
   30   1      
   31   1        U0LCR &= 0xFC;                                            // Reset Word Select(1:0)
   32   1        U0LCR |= 0x03;                                            // Data Bit = 8 Bit
   33   1        U0LCR &= 0xFB;                                            // Stop Bit = 1 Bit
   34   1        U0LCR &= 0xF7;                                            // Parity = Disable
   35   1        U0LCR &= 0xBF;                                            // Disable Break Control
   36   1        U0LCR |= 0x80;                                            // Enable Programming of Divisor Latches
   37   1      
   38   1        // U0DLM:U0DLL = 29.4912MHz / [16 x Baud]
   39   1        //             = 29.4912MHz / [16 x 9600]
   40   1        //             = 192 = 0x00C0
   41   1        U0DLM = 0x00;                                             // Program Divisor Latch(192) for 9600 Baud
   42   1        U0DLL = 0xC0;
   43   1      
   44   1        U0LCR &= 0x7F;                                            // Disable Programming of Divisor Latches
   45   1      
   46   1        U0FCR |= 0x01;                                            // FIF0 Enable
   47   1        U0FCR |= 0x02;                                            // RX FIFO Reset
   48   1        U0FCR |= 0x04;                                            // TX FIFO Reset
   49   1        U0FCR &= 0x3F;                      
   50   1      }
   51          
   52          /****************************/
   53          /* Write Character To UART0 */
   54          /****************************/
   55          int putchar (int ch)  
   56          {                  
   57   1        if (ch == '\n')  
   58   1        {
   59   2          while (!(U0LSR & 0x20));                                // Wait TXD Buffer Empty
ARM COMPILER V2.32a,  serial                                                               18/05/08  02:36:15  PAGE 2   

   60   2          U0THR = 0x0D;                                           // Write CR
   61   2        }
   62   1        while (!(U0LSR & 0x20));                                  // Wait TXD Buffer Empty
   63   1        return (U0THR = ch);                                      // Write Character
   64   1      }
   65          
   66          /*****************************/
   67          /* Read Character From UART0 */
   68          /*****************************/
   69          int getchar (void)  
   70          {                    
   71   1        while (!(U0LSR & 0x01));                                  // Wait RXD Receive Data Ready
   72   1        return (U0RBR);                                           // Get Receice Data & Return
   73   1      }
   74          
ARM COMPILER V2.32a,  serial                                                               18/05/08  02:36:15  PAGE 3   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** PUBLICS:
 PUBLIC         getchar?T
 PUBLIC         putchar?T
 PUBLIC         init_serial0?T



*** CODE SEGMENT '?PR?init_serial0?T?serial':
   27:   PINSEL0 &= 0xFFFFFFF0;                                    // Reset P0.0,P0.1 Pin Config
 00000000  220F      MOV         R2,#0xF
 00000002  4800      LDR         R0,=0xE002C000
 00000004  6801      LDR         R1,[R0,#0x0]
 00000006  4391      BIC         R1,R2
 00000008  6001      STR         R1,[R0,#0x0]
   28:   PINSEL0 |= 0x00000001;                                    // Select P0.0 = TxD(UART0)
 0000000A  2201      MOV         R2,#0x1
 0000000C  4800      LDR         R0,=0xE002C000
 0000000E  6801      LDR         R1,[R0,#0x0]
 00000010  4311      ORR         R1,R2
 00000012  6001      STR         R1,[R0,#0x0]
   29:   PINSEL0 |= 0x00000004;                                    // Select P0.1 = RxD(UART0)
 00000014  2204      MOV         R2,#0x4
 00000016  4800      LDR         R0,=0xE002C000
 00000018  6801      LDR         R1,[R0,#0x0]
 0000001A  4311      ORR         R1,R2
 0000001C  6001      STR         R1,[R0,#0x0]
   31:   U0LCR &= 0xFC;                                            // Reset Word Select(1:0)
 0000001E  22FC      MOV         R2,#0xFC
 00000020  4800      LDR         R0,=0xE000C00C
 00000022  7801      LDRB        R1,[R0,#0x0]
 00000024  4011      AND         R1,R2
 00000026  7001      STRB        R1,[R0,#0x0]
   32:   U0LCR |= 0x03;                                            // Data Bit = 8 Bit
 00000028  2203      MOV         R2,#0x3
 0000002A  4800      LDR         R0,=0xE000C00C
 0000002C  7801      LDRB        R1,[R0,#0x0]
 0000002E  4311      ORR         R1,R2
 00000030  7001      STRB        R1,[R0,#0x0]
   33:   U0LCR &= 0xFB;                                            // Stop Bit = 1 Bit
 00000032  22FB      MOV         R2,#0xFB
 00000034  4800      LDR         R0,=0xE000C00C
 00000036  7801      LDRB        R1,[R0,#0x0]
 00000038  4011      AND         R1,R2
 0000003A  7001      STRB        R1,[R0,#0x0]
   34:   U0LCR &= 0xF7;                                            // Parity = Disable
 0000003C  22F7      MOV         R2,#0xF7
 0000003E  4800      LDR         R0,=0xE000C00C
 00000040  7801      LDRB        R1,[R0,#0x0]
 00000042  4011      AND         R1,R2
 00000044  7001      STRB        R1,[R0,#0x0]
   35:   U0LCR &= 0xBF;                                            // Disable Break Control
 00000046  22BF      MOV         R2,#0xBF
 00000048  4800      LDR         R0,=0xE000C00C
 0000004A  7801      LDRB        R1,[R0,#0x0]
 0000004C  4011      AND         R1,R2
 0000004E  7001      STRB        R1,[R0,#0x0]
   36:   U0LCR |= 0x80;                                            // Enable Programming of Divisor Latches
 00000050  2280      MOV         R2,#0x80
 00000052  4800      LDR         R0,=0xE000C00C
 00000054  7801      LDRB        R1,[R0,#0x0]
 00000056  4311      ORR         R1,R2
 00000058  7001      STRB        R1,[R0,#0x0]
   41:   U0DLM = 0x00;                                             // Program Divisor Latch(192) for 9600 Baud
 0000005A  2100      MOV         R1,#0x0
 0000005C  4800      LDR         R0,=0xE000C004
ARM COMPILER V2.32a,  serial                                                               18/05/08  02:36:15  PAGE 4   

 0000005E  7001      STRB        R1,[R0,#0x0]
   42:   U0DLL = 0xC0;
 00000060  21C0      MOV         R1,#0xC0
 00000062  4800      LDR         R0,=0xE000C000
 00000064  7001      STRB        R1,[R0,#0x0]
   44:   U0LCR &= 0x7F;                                            // Disable Programming of Divisor Latches
 00000066  227F      MOV         R2,#0x7F
 00000068  4800      LDR         R0,=0xE000C00C
 0000006A  7801      LDRB        R1,[R0,#0x0]
 0000006C  4011      AND         R1,R2
 0000006E  7001      STRB        R1,[R0,#0x0]
   46:   U0FCR |= 0x01;                                            // FIF0 Enable
 00000070  2201      MOV         R2,#0x1
 00000072  4800      LDR         R0,=0xE000C008
 00000074  7801      LDRB        R1,[R0,#0x0]
 00000076  4311      ORR         R1,R2
 00000078  7001      STRB        R1,[R0,#0x0]
   47:   U0FCR |= 0x02;                                            // RX FIFO Reset
 0000007A  2202      MOV         R2,#0x2
 0000007C  4800      LDR         R0,=0xE000C008
 0000007E  7801      LDRB        R1,[R0,#0x0]
 00000080  4311      ORR         R1,R2
 00000082  7001      STRB        R1,[R0,#0x0]
   48:   U0FCR |= 0x04;                                            // TX FIFO Reset
 00000084  2204      MOV         R2,#0x4
 00000086  4800      LDR         R0,=0xE000C008
 00000088  7801      LDRB        R1,[R0,#0x0]
 0000008A  4311      ORR         R1,R2
 0000008C  7001      STRB        R1,[R0,#0x0]
   49:   U0FCR &= 0x3F;                      
 0000008E  223F      MOV         R2,#0x3F
 00000090  4800      LDR         R0,=0xE000C008
 00000092  7801      LDRB        R1,[R0,#0x0]
 00000094  4011      AND         R1,R2
 00000096  7001      STRB        R1,[R0,#0x0]
   50: }
 00000098  4770      BX          R14
 0000009A          ENDP ; 'init_serial0?T'


*** CODE SEGMENT '?PR?putchar?T?serial':
   55: int putchar (int ch)  
 00000000  1C01      MOV         R1,R0 ; ch
 00000002  ---- Variable 'ch' assigned to Register 'R1' ----
   57:   if (ch == '\n')  
 00000002  1C08      MOV         R0,R1 ; ch
 00000004  280A      CMP         R0,#0xA ; ch
 00000006  D107      BNE         L_9  ; T=0x00000018
   59:     while (!(U0LSR & 0x20));                                // Wait TXD Buffer Empty
 00000008          L_2:
 00000008  4800      LDR         R0,=0xE000C014
 0000000A  7800      LDRB        R0,[R0,#0x0]
 0000000C  2220      MOV         R2,#0x20
 0000000E  4210      TST         R0,R2
 00000010  D0FA      BEQ         L_2  ; T=0x00000008
   60:     U0THR = 0x0D;                                           // Write CR
 00000012  220D      MOV         R2,#0xD
 00000014  4800      LDR         R0,=0xE000C000
 00000016  7002      STRB        R2,[R0,#0x0]
   62:   while (!(U0LSR & 0x20));                                  // Wait TXD Buffer Empty
 00000018          L_9:
 00000018          L_6:
 00000018  4800      LDR         R0,=0xE000C014
 0000001A  7800      LDRB        R0,[R0,#0x0]
 0000001C  2220      MOV         R2,#0x20
 0000001E  4210      TST         R0,R2
 00000020  D0FA      BEQ         L_6  ; T=0x00000018
   63:   return (U0THR = ch);                                      // Write Character
ARM COMPILER V2.32a,  serial                                                               18/05/08  02:36:15  PAGE 5   

 00000022  1C08      MOV         R0,R1 ; ch
 00000024  4800      LDR         R1,=0xE000C000
 00000026  7008      STRB        R0,[R1,#0x0]
 00000028  0600      LSL         R0,R0,#0x18
 0000002A  0E00      LSR         R0,R0,#0x18
   64: }
 0000002C  4770      BX          R14
 0000002E          ENDP ; 'putchar?T'


*** CODE SEGMENT '?PR?getchar?T?serial':
   71:   while (!(U0LSR & 0x01));                                  // Wait RXD Receive Data Ready
 00000000          L_11:
 00000000  4800      LDR         R0,=0xE000C014
 00000002  7800      LDRB        R0,[R0,#0x0]
 00000004  2101      MOV         R1,#0x1
 00000006  4208      TST         R0,R1
 00000008  D0FA      BEQ         L_11  ; T=0x00000000
   72:   return (U0RBR);                                           // Get Receice Data & Return
 0000000A  4800      LDR         R0,=0xE000C000
 0000000C  7800      LDRB        R0,[R0,#0x0]
   73: }
 0000000E  4770      BX          R14
 00000010          ENDP ; 'getchar?T'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =    ------
  const size           =    ------
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
