
boot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005a0  00007000  00007000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  000075a0  00000634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000086  008000a6  008000a6  0000067a  2**0
                  ALLOC
  3 .noinit       00000000  0080012c  0080012c  0000067a  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  0000067a  2**0
                  CONTENTS
  5 .stab         00000c6c  00000000  00000000  0000067c  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      000009dc  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00007000 <__vectors>:
    7000:	0c 94 2a 38 	jmp	0x7054
    7004:	0c 94 45 38 	jmp	0x708a
    7008:	0c 94 45 38 	jmp	0x708a
    700c:	0c 94 45 38 	jmp	0x708a
    7010:	0c 94 45 38 	jmp	0x708a
    7014:	0c 94 45 38 	jmp	0x708a
    7018:	0c 94 45 38 	jmp	0x708a
    701c:	0c 94 45 38 	jmp	0x708a
    7020:	0c 94 45 38 	jmp	0x708a
    7024:	0c 94 45 38 	jmp	0x708a
    7028:	0c 94 45 38 	jmp	0x708a
    702c:	0c 94 45 38 	jmp	0x708a
    7030:	0c 94 45 38 	jmp	0x708a
    7034:	0c 94 45 38 	jmp	0x708a
    7038:	0c 94 45 38 	jmp	0x708a
    703c:	0c 94 45 38 	jmp	0x708a
    7040:	0c 94 45 38 	jmp	0x708a
    7044:	0c 94 45 38 	jmp	0x708a
    7048:	0c 94 45 38 	jmp	0x708a
    704c:	0c 94 45 38 	jmp	0x708a
    7050:	0c 94 45 38 	jmp	0x708a

00007054 <__ctors_end>:
    7054:	11 24       	eor	r1, r1
    7056:	1f be       	out	0x3f, r1	; 63
    7058:	cf e5       	ldi	r28, 0x5F	; 95
    705a:	d8 e0       	ldi	r29, 0x08	; 8
    705c:	de bf       	out	0x3e, r29	; 62
    705e:	cd bf       	out	0x3d, r28	; 61

00007060 <__do_copy_data>:
    7060:	10 e0       	ldi	r17, 0x00	; 0
    7062:	a0 e6       	ldi	r26, 0x60	; 96
    7064:	b0 e0       	ldi	r27, 0x00	; 0
    7066:	e0 ea       	ldi	r30, 0xA0	; 160
    7068:	f5 e7       	ldi	r31, 0x75	; 117
    706a:	02 c0       	rjmp	.+4      	; 0x7070

0000706c <.do_copy_data_loop>:
    706c:	05 90       	lpm	r0, Z+
    706e:	0d 92       	st	X+, r0

00007070 <.do_copy_data_start>:
    7070:	a6 3a       	cpi	r26, 0xA6	; 166
    7072:	b1 07       	cpc	r27, r17
    7074:	d9 f7       	brne	.-10     	; 0x706c

00007076 <__do_clear_bss>:
    7076:	11 e0       	ldi	r17, 0x01	; 1
    7078:	a6 ea       	ldi	r26, 0xA6	; 166
    707a:	b0 e0       	ldi	r27, 0x00	; 0
    707c:	01 c0       	rjmp	.+2      	; 0x7080

0000707e <.do_clear_bss_loop>:
    707e:	1d 92       	st	X+, r1

00007080 <.do_clear_bss_start>:
    7080:	ac 32       	cpi	r26, 0x2C	; 44
    7082:	b1 07       	cpc	r27, r17
    7084:	e1 f7       	brne	.-8      	; 0x707e
    7086:	0c 94 13 39 	jmp	0x7226

0000708a <__bad_interrupt>:
    708a:	0c 94 00 38 	jmp	0x7000

0000708e <ascii_to_bin>:
/*--- unsigned char ascii_to_bin( char data ) --------------------------------*/
/* This fuction returns the binary value of the received ascii (HEX) character */
unsigned char ascii_to_bin( char data )
{
    if( data < 'A' )
    708e:	81 34       	cpi	r24, 0x41	; 65
    7090:	18 f4       	brcc	.+6      	; 0x7098
    {
	return( data - '0' );
    7092:	80 53       	subi	r24, 0x30	; 48
    7094:	99 27       	eor	r25, r25
    7096:	08 95       	ret
    }
    else
    {
	return( data - 55 );
    7098:	87 53       	subi	r24, 0x37	; 55
    709a:	99 27       	eor	r25, r25
    }
}
    709c:	08 95       	ret
    709e:	08 95       	ret

000070a0 <ihex_load>:
    70a0:	af 92       	push	r10
    70a2:	bf 92       	push	r11
    70a4:	cf 92       	push	r12
    70a6:	df 92       	push	r13
    70a8:	ef 92       	push	r14
    70aa:	ff 92       	push	r15
    70ac:	0f 93       	push	r16
    70ae:	1f 93       	push	r17
    70b0:	cf 93       	push	r28
    70b2:	cc 24       	eor	r12, r12
    70b4:	dd 24       	eor	r13, r13
    70b6:	76 01       	movw	r14, r12
    70b8:	bb 24       	eor	r11, r11
    70ba:	0e 94 d9 39 	call	0x73b2
    70be:	8a 33       	cpi	r24, 0x3A	; 58
    70c0:	19 f0       	breq	.+6      	; 0x70c8
    70c2:	81 e0       	ldi	r24, 0x01	; 1
    70c4:	90 e0       	ldi	r25, 0x00	; 0
    70c6:	a5 c0       	rjmp	.+330    	; 0x7212
    70c8:	0e 94 d9 39 	call	0x73b2
    70cc:	0e 94 47 38 	call	0x708e
    70d0:	c8 2f       	mov	r28, r24
    70d2:	c2 95       	swap	r28
    70d4:	c0 7f       	andi	r28, 0xF0	; 240
    70d6:	0e 94 d9 39 	call	0x73b2
    70da:	0e 94 47 38 	call	0x708e
    70de:	c8 2b       	or	r28, r24
    70e0:	0e 94 d9 39 	call	0x73b2
    70e4:	0e 94 47 38 	call	0x708e
    70e8:	08 2f       	mov	r16, r24
    70ea:	02 95       	swap	r16
    70ec:	00 7f       	andi	r16, 0xF0	; 240
    70ee:	0e 94 d9 39 	call	0x73b2
    70f2:	0e 94 47 38 	call	0x708e
    70f6:	08 2b       	or	r16, r24
    70f8:	0e 94 d9 39 	call	0x73b2
    70fc:	0e 94 47 38 	call	0x708e
    7100:	18 2f       	mov	r17, r24
    7102:	12 95       	swap	r17
    7104:	10 7f       	andi	r17, 0xF0	; 240
    7106:	0e 94 d9 39 	call	0x73b2
    710a:	0e 94 47 38 	call	0x708e
    710e:	18 2b       	or	r17, r24
    7110:	0e 94 d9 39 	call	0x73b2
    7114:	0e 94 47 38 	call	0x708e
    7118:	a8 2e       	mov	r10, r24
    711a:	aa 0c       	add	r10, r10
    711c:	aa 0c       	add	r10, r10
    711e:	aa 0c       	add	r10, r10
    7120:	aa 0c       	add	r10, r10
    7122:	0e 94 d9 39 	call	0x73b2
    7126:	0e 94 47 38 	call	0x708e
    712a:	a8 2a       	or	r10, r24
    712c:	0c 0f       	add	r16, r28
    712e:	01 0f       	add	r16, r17
    7130:	0a 0d       	add	r16, r10
    7132:	cc 23       	and	r28, r28
    7134:	a9 f0       	breq	.+42     	; 0x7160
    7136:	0e 94 d9 39 	call	0x73b2
    713a:	0e 94 47 38 	call	0x708e
    713e:	18 2f       	mov	r17, r24
    7140:	12 95       	swap	r17
    7142:	10 7f       	andi	r17, 0xF0	; 240
    7144:	0e 94 d9 39 	call	0x73b2
    7148:	0e 94 47 38 	call	0x708e
    714c:	18 2b       	or	r17, r24
    714e:	eb 2d       	mov	r30, r11
    7150:	ff 27       	eor	r31, r31
    7152:	e8 55       	subi	r30, 0x58	; 88
    7154:	ff 4f       	sbci	r31, 0xFF	; 255
    7156:	10 83       	st	Z, r17
    7158:	b3 94       	inc	r11
    715a:	01 0f       	add	r16, r17
    715c:	c1 50       	subi	r28, 0x01	; 1
    715e:	e9 cf       	rjmp	.-46     	; 0x7132
    7160:	0e 94 d9 39 	call	0x73b2
    7164:	0e 94 47 38 	call	0x708e
    7168:	18 2f       	mov	r17, r24
    716a:	12 95       	swap	r17
    716c:	10 7f       	andi	r17, 0xF0	; 240
    716e:	0e 94 d9 39 	call	0x73b2
    7172:	0e 94 47 38 	call	0x708e
    7176:	18 2b       	or	r17, r24
    7178:	0e 94 d9 39 	call	0x73b2
    717c:	01 0f       	add	r16, r17
    717e:	19 f0       	breq	.+6      	; 0x7186
    7180:	82 e0       	ldi	r24, 0x02	; 2
    7182:	90 e0       	ldi	r25, 0x00	; 0
    7184:	46 c0       	rjmp	.+140    	; 0x7212
    7186:	aa 20       	and	r10, r10
    7188:	59 f0       	breq	.+22     	; 0x71a0
    718a:	b7 fc       	sbrc	r11, 7
    718c:	09 c0       	rjmp	.+18     	; 0x71a0
    718e:	8f ef       	ldi	r24, 0xFF	; 255
    7190:	eb 2d       	mov	r30, r11
    7192:	ff 27       	eor	r31, r31
    7194:	e8 55       	subi	r30, 0x58	; 88
    7196:	ff 4f       	sbci	r31, 0xFF	; 255
    7198:	80 83       	st	Z, r24
    719a:	b3 94       	inc	r11
    719c:	b7 fe       	sbrs	r11, 7
    719e:	f8 cf       	rjmp	.-16     	; 0x7190
    71a0:	b7 fe       	sbrs	r11, 7
    71a2:	32 c0       	rjmp	.+100    	; 0x7208
    71a4:	c0 e0       	ldi	r28, 0x00	; 0
    71a6:	bc 2e       	mov	r11, r28
    71a8:	41 e0       	ldi	r20, 0x01	; 1
    71aa:	ec 2f       	mov	r30, r28
    71ac:	ff 27       	eor	r31, r31
    71ae:	e8 55       	subi	r30, 0x58	; 88
    71b0:	ff 4f       	sbci	r31, 0xFF	; 255
    71b2:	80 81       	ld	r24, Z
    71b4:	99 27       	eor	r25, r25
    71b6:	21 81       	ldd	r18, Z+1	; 0x01
    71b8:	33 27       	eor	r19, r19
    71ba:	32 2f       	mov	r19, r18
    71bc:	22 27       	eor	r18, r18
    71be:	82 2b       	or	r24, r18
    71c0:	93 2b       	or	r25, r19
    71c2:	0c 01       	movw	r0, r24
    71c4:	f6 01       	movw	r30, r12
    71c6:	40 93 57 00 	sts	0x0057, r20
    71ca:	e8 95       	spm
    71cc:	11 24       	eor	r1, r1
    71ce:	82 e0       	ldi	r24, 0x02	; 2
    71d0:	90 e0       	ldi	r25, 0x00	; 0
    71d2:	a0 e0       	ldi	r26, 0x00	; 0
    71d4:	b0 e0       	ldi	r27, 0x00	; 0
    71d6:	c8 0e       	add	r12, r24
    71d8:	d9 1e       	adc	r13, r25
    71da:	ea 1e       	adc	r14, r26
    71dc:	fb 1e       	adc	r15, r27
    71de:	ce 5f       	subi	r28, 0xFE	; 254
    71e0:	c7 ff       	sbrs	r28, 7
    71e2:	e3 cf       	rjmp	.-58     	; 0x71aa
    71e4:	25 e0       	ldi	r18, 0x05	; 5
    71e6:	c6 01       	movw	r24, r12
    71e8:	80 58       	subi	r24, 0x80	; 128
    71ea:	90 40       	sbci	r25, 0x00	; 0
    71ec:	fc 01       	movw	r30, r24
    71ee:	20 93 57 00 	sts	0x0057, r18
    71f2:	e8 95       	spm
    71f4:	07 b6       	in	r0, 0x37	; 55
    71f6:	00 fc       	sbrc	r0, 0
    71f8:	fd cf       	rjmp	.-6      	; 0x71f4
    71fa:	81 e1       	ldi	r24, 0x11	; 17
    71fc:	80 93 57 00 	sts	0x0057, r24
    7200:	e8 95       	spm
    7202:	8a e2       	ldi	r24, 0x2A	; 42
    7204:	0e 94 d5 39 	call	0x73aa
    7208:	aa 20       	and	r10, r10
    720a:	09 f4       	brne	.+2      	; 0x720e
    720c:	56 cf       	rjmp	.-340    	; 0x70ba
    720e:	80 e0       	ldi	r24, 0x00	; 0
    7210:	90 e0       	ldi	r25, 0x00	; 0
    7212:	cf 91       	pop	r28
    7214:	1f 91       	pop	r17
    7216:	0f 91       	pop	r16
    7218:	ff 90       	pop	r15
    721a:	ef 90       	pop	r14
    721c:	df 90       	pop	r13
    721e:	cf 90       	pop	r12
    7220:	bf 90       	pop	r11
    7222:	af 90       	pop	r10
    7224:	08 95       	ret

00007226 <main>:
    7226:	cf e5       	ldi	r28, 0x5F	; 95
    7228:	d8 e0       	ldi	r29, 0x08	; 8
    722a:	de bf       	out	0x3e, r29	; 62
    722c:	cd bf       	out	0x3d, r28	; 61
    722e:	c1 e0       	ldi	r28, 0x01	; 1
    7230:	d0 e0       	ldi	r29, 0x00	; 0
    7232:	11 e0       	ldi	r17, 0x01	; 1
    7234:	f8 94       	cli
    7236:	81 e0       	ldi	r24, 0x01	; 1
    7238:	8b bf       	out	0x3b, r24	; 59
    723a:	8b b7       	in	r24, 0x3b	; 59
    723c:	82 60       	ori	r24, 0x02	; 2
    723e:	8b bf       	out	0x3b, r24	; 59
    7240:	80 ea       	ldi	r24, 0xA0	; 160
    7242:	91 e0       	ldi	r25, 0x01	; 1
    7244:	0e 94 cb 39 	call	0x7396
    7248:	e0 e0       	ldi	r30, 0x00	; 0
    724a:	f0 e0       	ldi	r31, 0x00	; 0
    724c:	84 91       	lpm	r24, Z
    724e:	8f 3f       	cpi	r24, 0xFF	; 255
    7250:	09 f0       	breq	.+2      	; 0x7254
    7252:	10 e0       	ldi	r17, 0x00	; 0
    7254:	5f 9b       	sbis	0x0b, 7	; 11
    7256:	12 c0       	rjmp	.+36     	; 0x727c
    7258:	8c b1       	in	r24, 0x0c	; 12
    725a:	89 36       	cpi	r24, 0x69	; 105
    725c:	79 f4       	brne	.+30     	; 0x727c
    725e:	11 e0       	ldi	r17, 0x01	; 1
    7260:	80 e6       	ldi	r24, 0x60	; 96
    7262:	90 e0       	ldi	r25, 0x00	; 0
    7264:	0e 94 de 39 	call	0x73bc
    7268:	80 e3       	ldi	r24, 0x30	; 48
    726a:	0e 94 d5 39 	call	0x73aa
    726e:	81 e3       	ldi	r24, 0x31	; 49
    7270:	0e 94 d5 39 	call	0x73aa
    7274:	88 e6       	ldi	r24, 0x68	; 104
    7276:	90 e0       	ldi	r25, 0x00	; 0
    7278:	0e 94 de 39 	call	0x73bc
    727c:	21 96       	adiw	r28, 0x01	; 1
    727e:	c1 30       	cpi	r28, 0x01	; 1
    7280:	d1 05       	cpc	r29, r1
    7282:	41 f7       	brne	.-48     	; 0x7254
    7284:	11 23       	and	r17, r17
    7286:	09 f4       	brne	.+2      	; 0x728a
    7288:	6f c0       	rjmp	.+222    	; 0x7368
    728a:	0e 94 c2 39 	call	0x7384
    728e:	88 23       	and	r24, r24
    7290:	c9 f3       	breq	.-14     	; 0x7284
    7292:	0e 94 d9 39 	call	0x73b2
    7296:	99 27       	eor	r25, r25
    7298:	85 37       	cpi	r24, 0x75	; 117
    729a:	91 05       	cpc	r25, r1
    729c:	29 f0       	breq	.+10     	; 0x72a8
    729e:	88 37       	cpi	r24, 0x78	; 120
    72a0:	91 05       	cpc	r25, r1
    72a2:	09 f4       	brne	.+2      	; 0x72a6
    72a4:	51 c0       	rjmp	.+162    	; 0x7348
    72a6:	5b c0       	rjmp	.+182    	; 0x735e
    72a8:	10 92 28 01 	sts	0x0128, r1
    72ac:	10 92 29 01 	sts	0x0129, r1
    72b0:	10 92 2a 01 	sts	0x012A, r1
    72b4:	10 92 2b 01 	sts	0x012B, r1
    72b8:	23 e0       	ldi	r18, 0x03	; 3
    72ba:	80 91 28 01 	lds	r24, 0x0128
    72be:	90 91 29 01 	lds	r25, 0x0129
    72c2:	fc 01       	movw	r30, r24
    72c4:	20 93 57 00 	sts	0x0057, r18
    72c8:	e8 95       	spm
    72ca:	07 b6       	in	r0, 0x37	; 55
    72cc:	00 fc       	sbrc	r0, 0
    72ce:	fd cf       	rjmp	.-6      	; 0x72ca
    72d0:	80 91 28 01 	lds	r24, 0x0128
    72d4:	90 91 29 01 	lds	r25, 0x0129
    72d8:	a0 91 2a 01 	lds	r26, 0x012A
    72dc:	b0 91 2b 01 	lds	r27, 0x012B
    72e0:	80 58       	subi	r24, 0x80	; 128
    72e2:	9f 4f       	sbci	r25, 0xFF	; 255
    72e4:	af 4f       	sbci	r26, 0xFF	; 255
    72e6:	bf 4f       	sbci	r27, 0xFF	; 255
    72e8:	80 93 28 01 	sts	0x0128, r24
    72ec:	90 93 29 01 	sts	0x0129, r25
    72f0:	a0 93 2a 01 	sts	0x012A, r26
    72f4:	b0 93 2b 01 	sts	0x012B, r27
    72f8:	80 50       	subi	r24, 0x00	; 0
    72fa:	90 47       	sbci	r25, 0x70	; 112
    72fc:	a0 40       	sbci	r26, 0x00	; 0
    72fe:	b0 40       	sbci	r27, 0x00	; 0
    7300:	e0 f2       	brcs	.-72     	; 0x72ba
    7302:	10 92 28 01 	sts	0x0128, r1
    7306:	10 92 29 01 	sts	0x0129, r1
    730a:	10 92 2a 01 	sts	0x012A, r1
    730e:	10 92 2b 01 	sts	0x012B, r1
    7312:	8b e6       	ldi	r24, 0x6B	; 107
    7314:	90 e0       	ldi	r25, 0x00	; 0
    7316:	0e 94 de 39 	call	0x73bc
    731a:	0e 94 50 38 	call	0x70a0
    731e:	c8 2f       	mov	r28, r24
    7320:	88 23       	and	r24, r24
    7322:	69 f0       	breq	.+26     	; 0x733e
    7324:	81 e7       	ldi	r24, 0x71	; 113
    7326:	90 e0       	ldi	r25, 0x00	; 0
    7328:	0e 94 de 39 	call	0x73bc
    732c:	8c 2f       	mov	r24, r28
    732e:	99 27       	eor	r25, r25
    7330:	aa 27       	eor	r26, r26
    7332:	bb 27       	eor	r27, r27
    7334:	bc 01       	movw	r22, r24
    7336:	cd 01       	movw	r24, r26
    7338:	0e 94 f7 39 	call	0x73ee
    733c:	a3 cf       	rjmp	.-186    	; 0x7284
    733e:	86 e7       	ldi	r24, 0x76	; 118
    7340:	90 e0       	ldi	r25, 0x00	; 0
    7342:	0e 94 de 39 	call	0x73bc
    7346:	10 c0       	rjmp	.+32     	; 0x7368
    7348:	81 e0       	ldi	r24, 0x01	; 1
    734a:	8b bf       	out	0x3b, r24	; 59
    734c:	8b b7       	in	r24, 0x3b	; 59
    734e:	8d 7f       	andi	r24, 0xFD	; 253
    7350:	8b bf       	out	0x3b, r24	; 59
    7352:	e0 91 a6 00 	lds	r30, 0x00A6
    7356:	f0 91 a7 00 	lds	r31, 0x00A7
    735a:	09 95       	icall
    735c:	93 cf       	rjmp	.-218    	; 0x7284
    735e:	89 e7       	ldi	r24, 0x79	; 121
    7360:	90 e0       	ldi	r25, 0x00	; 0
    7362:	0e 94 de 39 	call	0x73bc
    7366:	8e cf       	rjmp	.-228    	; 0x7284
    7368:	81 e0       	ldi	r24, 0x01	; 1
    736a:	8b bf       	out	0x3b, r24	; 59
    736c:	8b b7       	in	r24, 0x3b	; 59
    736e:	8d 7f       	andi	r24, 0xFD	; 253
    7370:	8b bf       	out	0x3b, r24	; 59
    7372:	e0 91 a6 00 	lds	r30, 0x00A6
    7376:	f0 91 a7 00 	lds	r31, 0x00A7
    737a:	09 95       	icall
    737c:	80 e0       	ldi	r24, 0x00	; 0
    737e:	90 e0       	ldi	r25, 0x00	; 0
    7380:	0c 94 cf 3a 	jmp	0x759e

00007384 <Hit0>:

/*--- unsigned char Hit0( void ) ---------------------------------------------*/
unsigned char Hit0( void )
{
	if( UCSRA & (1<<RXC) )
    7384:	8b b1       	in	r24, 0x0b	; 11
		return(1);
    7386:	99 27       	eor	r25, r25
    7388:	87 fd       	sbrc	r24, 7
    738a:	90 95       	com	r25
		
	else
		return(0);
}
    738c:	88 27       	eor	r24, r24
    738e:	99 0f       	add	r25, r25
    7390:	88 1f       	adc	r24, r24
    7392:	99 27       	eor	r25, r25
    7394:	08 95       	ret

00007396 <SerCom0Init>:

/*--- void SerComInit( unsigned int baud ) -----------------------------------*/
void SerCom0Init( unsigned int baud ) 
{
    7396:	9c 01       	movw	r18, r24
	// set baud rate
	UBRRH = (unsigned char)(baud>>8);
    7398:	89 2f       	mov	r24, r25
    739a:	99 27       	eor	r25, r25
    739c:	80 bd       	out	0x20, r24	; 32
	UBRRL = (unsigned char)(baud);
    739e:	29 b9       	out	0x09, r18	; 9
	// enable receiver and transmitter
	UCSRB = (1<<RXEN) | (1<<TXEN);
    73a0:	88 e1       	ldi	r24, 0x18	; 24
    73a2:	8a b9       	out	0x0a, r24	; 10
	// set frame format 8 data bits, 1 stop bit
     UCSRC  = 0x86;    // 8 bit non parity  1 stop bit
    73a4:	86 e8       	ldi	r24, 0x86	; 134
    73a6:	80 bd       	out	0x20, r24	; 32
    73a8:	08 95       	ret

000073aa <PutChar0>:

//	UCSRC = (1<<URSEL) | (3<<UCSZ);		 		


} 

/*--- void PutChar0( unsigned char byte ) ------------------------------------*/
void PutChar0( unsigned char byte ) 
{

	// wait for empty transmit buffer
	while ( !( UCSRA & (1<<UDRE) ) );
    73aa:	5d 9b       	sbis	0x0b, 5	; 11
    73ac:	fe cf       	rjmp	.-4      	; 0x73aa
	
	// send data
	UDR = byte;
    73ae:	8c b9       	out	0x0c, r24	; 12
    73b0:	08 95       	ret

000073b2 <GetChar0>:

}

/*--- unsigned char GetChar0( void ) -----------------------------------------*/
unsigned char GetChar0( void ) 
{

	// wait for data ...
	while ( !( UCSRA & (1<<RXC) ) );
    73b2:	5f 9b       	sbis	0x0b, 7	; 11
    73b4:	fe cf       	rjmp	.-4      	; 0x73b2
	
	// return data
	return( UDR );
    73b6:	8c b1       	in	r24, 0x0c	; 12

}
    73b8:	99 27       	eor	r25, r25
    73ba:	08 95       	ret

000073bc <PutString0>:

/*--- void PutString0( unsigned char *str )-----------------------------------*/
void PutString0( unsigned char *str )
{
    73bc:	1f 93       	push	r17
    73be:	cf 93       	push	r28
    73c0:	df 93       	push	r29
    73c2:	ec 01       	movw	r28, r24

	unsigned char i = 0;
    73c4:	10 e0       	ldi	r17, 0x00	; 0

	while ( str[i] ) {
		PutChar0( str[i] );
		i++;
    73c6:	88 81       	ld	r24, Y
    73c8:	88 23       	and	r24, r24
    73ca:	69 f0       	breq	.+26     	; 0x73e6
    73cc:	fe 01       	movw	r30, r28
    73ce:	e1 0f       	add	r30, r17
    73d0:	f1 1d       	adc	r31, r1
    73d2:	80 81       	ld	r24, Z
    73d4:	0e 94 d5 39 	call	0x73aa
    73d8:	1f 5f       	subi	r17, 0xFF	; 255
    73da:	fe 01       	movw	r30, r28
    73dc:	e1 0f       	add	r30, r17
    73de:	f1 1d       	adc	r31, r1
    73e0:	80 81       	ld	r24, Z
    73e2:	88 23       	and	r24, r24
    73e4:	99 f7       	brne	.-26     	; 0x73cc
    73e6:	df 91       	pop	r29
    73e8:	cf 91       	pop	r28
    73ea:	1f 91       	pop	r17
    73ec:	08 95       	ret

000073ee <PutInt0>:
	}

}

/*--- void PutInt0( long numi ) ----------------------------------------------*/
void PutInt0( long numi ) 
{
    73ee:	8f 92       	push	r8
    73f0:	9f 92       	push	r9
    73f2:	bf 92       	push	r11
    73f4:	cf 92       	push	r12
    73f6:	df 92       	push	r13
    73f8:	ef 92       	push	r14
    73fa:	ff 92       	push	r15
    73fc:	0f 93       	push	r16
    73fe:	1f 93       	push	r17
    7400:	cf 93       	push	r28
    7402:	df 93       	push	r29
    7404:	cd b7       	in	r28, 0x3d	; 61
    7406:	de b7       	in	r29, 0x3e	; 62
    7408:	2a 97       	sbiw	r28, 0x0a	; 10
    740a:	0f b6       	in	r0, 0x3f	; 63
    740c:	f8 94       	cli
    740e:	de bf       	out	0x3e, r29	; 62
    7410:	0f be       	out	0x3f, r0	; 63
    7412:	cd bf       	out	0x3d, r28	; 61
    7414:	6b 01       	movw	r12, r22
    7416:	7c 01       	movw	r14, r24
	unsigned char i;
	unsigned char nums[10];
	
	if ( numi < 0 ) {
    7418:	97 ff       	sbrs	r25, 7
    741a:	0b c0       	rjmp	.+22     	; 0x7432
		PutChar0( '-' );
    741c:	8d e2       	ldi	r24, 0x2D	; 45
    741e:	0e 94 d5 39 	call	0x73aa
		numi = -numi;
    7422:	f0 94       	com	r15
    7424:	e0 94       	com	r14
    7426:	d0 94       	com	r13
    7428:	c0 94       	com	r12
    742a:	c1 1c       	adc	r12, r1
    742c:	d1 1c       	adc	r13, r1
    742e:	e1 1c       	adc	r14, r1
    7430:	f1 1c       	adc	r15, r1
	}
	
	i = 0;
    7432:	bb 24       	eor	r11, r11
    7434:	4e 01       	movw	r8, r28
    7436:	08 94       	sec
    7438:	81 1c       	adc	r8, r1
    743a:	91 1c       	adc	r9, r1
	do {	
		nums[i] = numi%10;
    743c:	84 01       	movw	r16, r8
    743e:	0b 0d       	add	r16, r11
    7440:	11 1d       	adc	r17, r1
    7442:	c7 01       	movw	r24, r14
    7444:	b6 01       	movw	r22, r12
    7446:	2a e0       	ldi	r18, 0x0A	; 10
    7448:	30 e0       	ldi	r19, 0x00	; 0
    744a:	40 e0       	ldi	r20, 0x00	; 0
    744c:	50 e0       	ldi	r21, 0x00	; 0
    744e:	0e 94 92 3a 	call	0x7524
    7452:	dc 01       	movw	r26, r24
    7454:	cb 01       	movw	r24, r22
    7456:	f8 01       	movw	r30, r16
    7458:	80 83       	st	Z, r24
		numi = numi/10;
    745a:	c7 01       	movw	r24, r14
    745c:	b6 01       	movw	r22, r12
    745e:	2a e0       	ldi	r18, 0x0A	; 10
    7460:	30 e0       	ldi	r19, 0x00	; 0
    7462:	40 e0       	ldi	r20, 0x00	; 0
    7464:	50 e0       	ldi	r21, 0x00	; 0
    7466:	0e 94 92 3a 	call	0x7524
    746a:	69 01       	movw	r12, r18
    746c:	7a 01       	movw	r14, r20
		i++;
    746e:	b3 94       	inc	r11
	} while ( numi );
    7470:	21 15       	cp	r18, r1
    7472:	31 05       	cpc	r19, r1
    7474:	41 05       	cpc	r20, r1
    7476:	51 05       	cpc	r21, r1
    7478:	09 f7       	brne	.-62     	; 0x743c
	
	while ( i ) {
		i--;
		PutChar0( nums[i] + '0' );
    747a:	bb 20       	and	r11, r11
    747c:	51 f0       	breq	.+20     	; 0x7492
    747e:	ba 94       	dec	r11
    7480:	f4 01       	movw	r30, r8
    7482:	eb 0d       	add	r30, r11
    7484:	f1 1d       	adc	r31, r1
    7486:	80 81       	ld	r24, Z
    7488:	80 5d       	subi	r24, 0xD0	; 208
    748a:	0e 94 d5 39 	call	0x73aa
    748e:	bb 20       	and	r11, r11
    7490:	b1 f7       	brne	.-20     	; 0x747e
    7492:	2a 96       	adiw	r28, 0x0a	; 10
    7494:	0f b6       	in	r0, 0x3f	; 63
    7496:	f8 94       	cli
    7498:	de bf       	out	0x3e, r29	; 62
    749a:	0f be       	out	0x3f, r0	; 63
    749c:	cd bf       	out	0x3d, r28	; 61
    749e:	df 91       	pop	r29
    74a0:	cf 91       	pop	r28
    74a2:	1f 91       	pop	r17
    74a4:	0f 91       	pop	r16
    74a6:	ff 90       	pop	r15
    74a8:	ef 90       	pop	r14
    74aa:	df 90       	pop	r13
    74ac:	cf 90       	pop	r12
    74ae:	bf 90       	pop	r11
    74b0:	9f 90       	pop	r9
    74b2:	8f 90       	pop	r8
    74b4:	08 95       	ret

000074b6 <PutHex0>:
	}

}

void PutHex0( unsigned char data )
{
    74b6:	ff 92       	push	r15
    74b8:	0f 93       	push	r16
    74ba:	1f 93       	push	r17
    74bc:	cf 93       	push	r28
    74be:	df 93       	push	r29
    74c0:	cd b7       	in	r28, 0x3d	; 61
    74c2:	de b7       	in	r29, 0x3e	; 62
    74c4:	60 97       	sbiw	r28, 0x10	; 16
    74c6:	0f b6       	in	r0, 0x3f	; 63
    74c8:	f8 94       	cli
    74ca:	de bf       	out	0x3e, r29	; 62
    74cc:	0f be       	out	0x3f, r0	; 63
    74ce:	cd bf       	out	0x3d, r28	; 61
    74d0:	f8 2e       	mov	r15, r24
    unsigned char ascii[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
    74d2:	8e 01       	movw	r16, r28
    74d4:	0f 5f       	subi	r16, 0xFF	; 255
    74d6:	1f 4f       	sbci	r17, 0xFF	; 255
    74d8:	80 e1       	ldi	r24, 0x10	; 16
    74da:	e5 e9       	ldi	r30, 0x95	; 149
    74dc:	f0 e0       	ldi	r31, 0x00	; 0
    74de:	d8 01       	movw	r26, r16
    74e0:	01 90       	ld	r0, Z+
    74e2:	0d 92       	st	X+, r0
    74e4:	8a 95       	dec	r24
    74e6:	e1 f7       	brne	.-8      	; 0x74e0
    PutChar0( ascii[(data >> 4) & 0x0F] );
    74e8:	8f 2d       	mov	r24, r15
    74ea:	82 95       	swap	r24
    74ec:	8f 70       	andi	r24, 0x0F	; 15
    74ee:	f8 01       	movw	r30, r16
    74f0:	e8 0f       	add	r30, r24
    74f2:	f1 1d       	adc	r31, r1
    74f4:	80 81       	ld	r24, Z
    74f6:	0e 94 d5 39 	call	0x73aa
    PutChar0( ascii[data & 0x0F]);
    74fa:	ef 2d       	mov	r30, r15
    74fc:	ff 27       	eor	r31, r31
    74fe:	ef 70       	andi	r30, 0x0F	; 15
    7500:	f0 70       	andi	r31, 0x00	; 0
    7502:	e0 0f       	add	r30, r16
    7504:	f1 1f       	adc	r31, r17
    7506:	80 81       	ld	r24, Z
    7508:	0e 94 d5 39 	call	0x73aa
    750c:	60 96       	adiw	r28, 0x10	; 16
    750e:	0f b6       	in	r0, 0x3f	; 63
    7510:	f8 94       	cli
    7512:	de bf       	out	0x3e, r29	; 62
    7514:	0f be       	out	0x3f, r0	; 63
    7516:	cd bf       	out	0x3d, r28	; 61
    7518:	df 91       	pop	r29
    751a:	cf 91       	pop	r28
    751c:	1f 91       	pop	r17
    751e:	0f 91       	pop	r16
    7520:	ff 90       	pop	r15
    7522:	08 95       	ret

00007524 <__divmodsi4>:
    7524:	97 fb       	bst	r25, 7
    7526:	09 2e       	mov	r0, r25
    7528:	05 26       	eor	r0, r21
    752a:	0e d0       	rcall	.+28     	; 0x7548
    752c:	57 fd       	sbrc	r21, 7
    752e:	04 d0       	rcall	.+8      	; 0x7538
    7530:	14 d0       	rcall	.+40     	; 0x755a
    7532:	0a d0       	rcall	.+20     	; 0x7548
    7534:	00 1c       	adc	r0, r0
    7536:	38 f4       	brcc	.+14     	; 0x7546

00007538 <__divmodsi4_neg2>:
    7538:	50 95       	com	r21
    753a:	40 95       	com	r20
    753c:	30 95       	com	r19
    753e:	21 95       	neg	r18
    7540:	3f 4f       	sbci	r19, 0xFF	; 255
    7542:	4f 4f       	sbci	r20, 0xFF	; 255
    7544:	5f 4f       	sbci	r21, 0xFF	; 255

00007546 <__divmodsi4_exit>:
    7546:	08 95       	ret

00007548 <__divmodsi4_neg1>:
    7548:	f6 f7       	brtc	.-4      	; 0x7546
    754a:	90 95       	com	r25
    754c:	80 95       	com	r24
    754e:	70 95       	com	r23
    7550:	61 95       	neg	r22
    7552:	7f 4f       	sbci	r23, 0xFF	; 255
    7554:	8f 4f       	sbci	r24, 0xFF	; 255
    7556:	9f 4f       	sbci	r25, 0xFF	; 255
    7558:	08 95       	ret

0000755a <__udivmodsi4>:
    755a:	a1 e2       	ldi	r26, 0x21	; 33
    755c:	1a 2e       	mov	r1, r26
    755e:	aa 1b       	sub	r26, r26
    7560:	bb 1b       	sub	r27, r27
    7562:	fd 01       	movw	r30, r26
    7564:	0d c0       	rjmp	.+26     	; 0x7580

00007566 <__udivmodsi4_loop>:
    7566:	aa 1f       	adc	r26, r26
    7568:	bb 1f       	adc	r27, r27
    756a:	ee 1f       	adc	r30, r30
    756c:	ff 1f       	adc	r31, r31
    756e:	a2 17       	cp	r26, r18
    7570:	b3 07       	cpc	r27, r19
    7572:	e4 07       	cpc	r30, r20
    7574:	f5 07       	cpc	r31, r21
    7576:	20 f0       	brcs	.+8      	; 0x7580
    7578:	a2 1b       	sub	r26, r18
    757a:	b3 0b       	sbc	r27, r19
    757c:	e4 0b       	sbc	r30, r20
    757e:	f5 0b       	sbc	r31, r21

00007580 <__udivmodsi4_ep>:
    7580:	66 1f       	adc	r22, r22
    7582:	77 1f       	adc	r23, r23
    7584:	88 1f       	adc	r24, r24
    7586:	99 1f       	adc	r25, r25
    7588:	1a 94       	dec	r1
    758a:	69 f7       	brne	.-38     	; 0x7566
    758c:	60 95       	com	r22
    758e:	70 95       	com	r23
    7590:	80 95       	com	r24
    7592:	90 95       	com	r25
    7594:	9b 01       	movw	r18, r22
    7596:	ac 01       	movw	r20, r24
    7598:	bd 01       	movw	r22, r26
    759a:	cf 01       	movw	r24, r30
    759c:	08 95       	ret

0000759e <_exit>:
    759e:	ff cf       	rjmp	.-2      	; 0x759e
