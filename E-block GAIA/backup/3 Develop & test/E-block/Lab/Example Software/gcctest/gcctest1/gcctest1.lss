
gcctest1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000088  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000088  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00800060  00000088  0000011c  2**0
                  ALLOC
  3 .noinit       00000000  00800060  00800060  0000011c  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  0000011c  2**0
                  CONTENTS
  5 .stab         000002dc  00000000  00000000  0000011c  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      0000052c  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26
   2:	2b c0       	rjmp	.+86     	; 0x5a
   4:	2a c0       	rjmp	.+84     	; 0x5a
   6:	29 c0       	rjmp	.+82     	; 0x5a
   8:	28 c0       	rjmp	.+80     	; 0x5a
   a:	27 c0       	rjmp	.+78     	; 0x5a
   c:	26 c0       	rjmp	.+76     	; 0x5a
   e:	25 c0       	rjmp	.+74     	; 0x5a
  10:	24 c0       	rjmp	.+72     	; 0x5a
  12:	23 c0       	rjmp	.+70     	; 0x5a
  14:	22 c0       	rjmp	.+68     	; 0x5a
  16:	21 c0       	rjmp	.+66     	; 0x5a
  18:	20 c0       	rjmp	.+64     	; 0x5a
  1a:	1f c0       	rjmp	.+62     	; 0x5a
  1c:	1e c0       	rjmp	.+60     	; 0x5a
  1e:	1d c0       	rjmp	.+58     	; 0x5a
  20:	1c c0       	rjmp	.+56     	; 0x5a
  22:	1b c0       	rjmp	.+54     	; 0x5a
  24:	1a c0       	rjmp	.+52     	; 0x5a

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e8       	ldi	r30, 0x88	; 136
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50
  58:	01 c0       	rjmp	.+2      	; 0x5c

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0

0000005c <main>:

typedef unsigned char  u08;

int main( void )
{
  5c:	cf e5       	ldi	r28, 0x5F	; 95
  5e:	d4 e0       	ldi	r29, 0x04	; 4
  60:	de bf       	out	0x3e, r29	; 62
  62:	cd bf       	out	0x3d, r28	; 61
   u08 led, i, j, k;
   DDRC	= 0x0E;
  64:	8e e0       	ldi	r24, 0x0E	; 14
  66:	84 bb       	out	0x14, r24	; 20

//   outp(0xff,DDRC);            /* use all pins on PortB for output */

   led = 1;                    /* init variable representing the LED state */
  68:	21 e0       	ldi	r18, 0x01	; 1

   for (;;) 
   {

		PORTD = ~led;
  6a:	82 2f       	mov	r24, r18
  6c:	80 95       	com	r24
  6e:	82 bb       	out	0x12, r24	; 18
//       outp(~led, PORTC);      /* invert the output since a zero means: LED on */
       led <<= 1;              /* move to next LED */
  70:	22 0f       	add	r18, r18
       if (!led)               /* overflow: start with Port B0 again */
  72:	09 f4       	brne	.+2      	; 0x76
           led = 1;
  74:	21 e0       	ldi	r18, 0x01	; 1
       for (i=0; i<255; i++)   /* outer delay loop */
  76:	90 e0       	ldi	r25, 0x00	; 0
           for(j=0; j<255;j++) /* inner delay loop */
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	8f 5f       	subi	r24, 0xFF	; 255
  7c:	8f 3f       	cpi	r24, 0xFF	; 255
  7e:	e9 f7       	brne	.-6      	; 0x7a
  80:	9f 5f       	subi	r25, 0xFF	; 255
  82:	9f 3f       	cpi	r25, 0xFF	; 255
  84:	c9 f7       	brne	.-14     	; 0x78
  86:	f1 cf       	rjmp	.-30     	; 0x6a
