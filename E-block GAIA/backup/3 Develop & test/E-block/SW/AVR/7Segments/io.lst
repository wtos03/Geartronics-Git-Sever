   1               		.file	"io.c"
   2               		.arch atmega32
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  75               	.global	g_mode2
  76               	.global	g_mode2
  77               		.section .bss
  80               	g_mode2:
  81 0000 00        		.skip 1,0
  82               	.global	g_mode1
  83               	.global	g_mode1
  86               	g_mode1:
  87 0001 00        		.skip 1,0
  88               		.text
  91               	.global	delay
  93               	delay:
   1:io.c          **** /*
   2:io.c          **** 
   3:io.c          ****  Module 				:   IO Test Module
   4:io.c          ****  Description 			:   IO  Test module for CHapter xxx
   5:io.c          ****  Original written for 	:   ATMEGA32
   6:io.c          ****  CPU port/tested		:   ATMEGA32
   7:io.c          ****  Hardware use			:   Dual 7 Segments common cathode module
   8:io.c          ****  Port use				:   E_PORTA (0-7), E_PORTB (0-1)
   9:io.c          ****  Memory	FLASH			:   XXX
  10:io.c          **** 		RAM				:   XXX
  11:io.c          **** 		EEPROM			:   XXX
  12:io.c          ****  Document				:   Document describe algorithm
  13:io.c          ****  Written by 			:   Wichai  wichai@geartronics.net
  14:io.c          ****  Date					:  	23/04/2006
  15:io.c          ****   
  16:io.c          ****  Update History
  17:io.c          ****  
  18:io.c          ****  Date			By 					Comments
  19:io.c          ****  ----			--					---------
  20:io.c          ****  
  21:io.c          ****  
  22:io.c          ****   */
  23:io.c          **** 
  24:io.c          **** #include <avr/interrupt.h>
  25:io.c          **** #include <avr/io.h>
  26:io.c          **** #include <avr/interrupt.h>
  27:io.c          **** #include "Dual_7Segment.h"
  28:io.c          **** #include "DC_motor.h"
  29:io.c          **** #include "ir_tv.h"
  30:io.c          **** 
  31:io.c          **** // Global variable
  32:io.c          **** 
  33:io.c          **** uint8_t  g_mode1  = MOTOR_STOP;
  34:io.c          **** uint8_t  g_mode2  = MOTOR_STOP;
  35:io.c          **** 
  36:io.c          **** void main(void);
  37:io.c          **** 
  38:io.c          **** void delay ( uint16_t  time)
  39:io.c          **** {
  95               	.LM1:
  96               	/* prologue: frame size=0 */
  97               	/* prologue end (size=0) */
  40:io.c          ****    uint16_t i;
  41:io.c          ****    for (i = 0 ; i < time; i++);
  99               	.LM2:
 100 0000 20E0      		ldi r18,lo8(0)
 101 0002 30E0      		ldi r19,hi8(0)
 102               	.L8:
 104               	.LM3:
 105 0004 2817      		cp r18,r24
 106 0006 3907      		cpc r19,r25
 107 0008 18F4      		brsh .L7
 108 000a 2F5F      		subi r18,lo8(-(1))
 109 000c 3F4F      		sbci r19,hi8(-(1))
 110 000e FACF      		rjmp .L8
 111               	.L7:
 112 0010 0895      		ret
 113               	/* epilogue: frame size=0 */
 114               	/* epilogue: noreturn */
 115               	/* epilogue end (size=0) */
 116               	/* function delay size 9 (9) */
 121               	.Lscope0:
 124               	.global	remote_decode
 126               	remote_decode:
  42:io.c          **** 
  43:io.c          **** }
  44:io.c          **** 
  45:io.c          **** 
  46:io.c          **** /* This subroutine will handle IR remote decode by getting remote code from Interrupt handle for in
  47:io.c          **** and will response  to each remote key. For other applications user can modified here for different 
  48:io.c          **** However this routine support Sony remote control only
  49:io.c          ****    global effect   g_irint;
  50:io.c          **** */
  51:io.c          **** 
  52:io.c          **** uint8_t remote_decode ( uint16_t ircode)
  53:io.c          **** { 
 128               	.LM4:
 129               	/* prologue: frame size=0 */
 130               	/* prologue end (size=0) */
  54:io.c          ****   uint16_t pwm;
  55:io.c          ****   uint8_t speed, found = 1;
 132               	.LM5:
 133 0012 31E0      		ldi r19,lo8(1)
  56:io.c          ****   speed = 10;
 135               	.LM6:
 136 0014 2AE0      		ldi r18,lo8(10)
  57:io.c          ****   switch ( ircode)
 138               	.LM7:
 139 0016 48E0      		ldi r20,hi8(2064)
 140 0018 8031      		cpi r24,lo8(2064)
 141 001a 9407      		cpc r25,r20
 142 001c 09F4      		brne .+2
 143 001e 63C0      		rjmp .L12
 145               	.LM8:
 146 0020 48E0      		ldi r20,hi8(2065)
 147 0022 8131      		cpi r24,lo8(2065)
 148 0024 9407      		cpc r25,r20
 149 0026 80F5      		brsh .L29
 150 0028 42E0      		ldi r20,hi8(528)
 151 002a 8031      		cpi r24,lo8(528)
 152 002c 9407      		cpc r25,r20
 153 002e 09F4      		brne .+2
 154 0030 60C0      		rjmp .L15
 155 0032 42E0      		ldi r20,hi8(529)
 156 0034 8131      		cpi r24,lo8(529)
 157 0036 9407      		cpc r25,r20
 158 0038 80F4      		brsh .L30
 159 003a 8039      		cpi r24,144
 160 003c 9105      		cpc r25,__zero_reg__
 161 003e 09F4      		brne .+2
 162 0040 65C0      		rjmp .L21
 163 0042 8139      		cpi r24,145
 164 0044 9105      		cpc r25,__zero_reg__
 165 0046 20F4      		brsh .L31
 166 0048 4097      		sbiw r24,16
 167 004a 09F4      		brne .+2
 168 004c 4AC0      		rjmp .L11
 169 004e 71C0      		rjmp .L28
 170               	.L31:
 171 0050 8051      		subi r24,lo8(272)
 172 0052 9140      		sbci r25,hi8(272)
 173 0054 09F4      		brne .+2
 174 0056 73C0      		rjmp .L37
 175 0058 6CC0      		rjmp .L28
 176               	.L30:
 177 005a 44E0      		ldi r20,hi8(1040)
 178 005c 8031      		cpi r24,lo8(1040)
 179 005e 9407      		cpc r25,r20
 180 0060 09F4      		brne .+2
 181 0062 43C0      		rjmp .L13
 182 0064 44E0      		ldi r20,hi8(1041)
 183 0066 8131      		cpi r24,lo8(1041)
 184 0068 9407      		cpc r25,r20
 185 006a 28F4      		brsh .L32
 186 006c 8059      		subi r24,lo8(656)
 187 006e 9240      		sbci r25,hi8(656)
 188 0070 09F4      		brne .+2
 189 0072 65C0      		rjmp .L37
 190 0074 5EC0      		rjmp .L28
 191               	.L32:
 192 0076 44E0      		ldi r20,hi8(1168)
 193 0078 8039      		cpi r24,lo8(1168)
 194 007a 9407      		cpc r25,r20
 195 007c 09F4      		brne .+2
 196 007e 4DC0      		rjmp .L26
 197 0080 8051      		subi r24,lo8(1552)
 198 0082 9640      		sbci r25,hi8(1552)
 199 0084 D1F1      		breq .L17
 200 0086 55C0      		rjmp .L28
 201               	.L29:
 202 0088 4AE0      		ldi r20,hi8(2640)
 203 008a 8035      		cpi r24,lo8(2640)
 204 008c 9407      		cpc r25,r20
 205 008e 09F4      		brne .+2
 206 0090 56C0      		rjmp .L37
 207 0092 4AE0      		ldi r20,hi8(2641)
 208 0094 8135      		cpi r24,lo8(2641)
 209 0096 9407      		cpc r25,r20
 210 0098 80F4      		brsh .L33
 211 009a 49E0      		ldi r20,hi8(2320)
 212 009c 8031      		cpi r24,lo8(2320)
 213 009e 9407      		cpc r25,r20
 214 00a0 81F1      		breq .L20
 215 00a2 49E0      		ldi r20,hi8(2321)
 216 00a4 8131      		cpi r24,lo8(2321)
 217 00a6 9407      		cpc r25,r20
 218 00a8 20F4      		brsh .L34
 219 00aa 8059      		subi r24,lo8(2192)
 220 00ac 9840      		sbci r25,hi8(2192)
 221 00ae 89F1      		breq .L22
 222 00b0 40C0      		rjmp .L28
 223               	.L34:
 224 00b2 8051      		subi r24,lo8(2576)
 225 00b4 9A40      		sbci r25,hi8(2576)
 226 00b6 F9F0      		breq .L16
 227 00b8 3CC0      		rjmp .L28
 228               	.L33:
 229 00ba 4CE0      		ldi r20,hi8(3088)
 230 00bc 8031      		cpi r24,lo8(3088)
 231 00be 9407      		cpc r25,r20
 232 00c0 B1F0      		breq .L14
 233 00c2 4CE0      		ldi r20,hi8(3089)
 234 00c4 8131      		cpi r24,lo8(3089)
 235 00c6 9407      		cpc r25,r20
 236 00c8 20F4      		brsh .L35
 237 00ca 8059      		subi r24,lo8(2704)
 238 00cc 9A40      		sbci r25,hi8(2704)
 239 00ce B9F1      		breq .L37
 240 00d0 30C0      		rjmp .L28
 241               	.L35:
 242 00d2 4CE0      		ldi r20,hi8(3216)
 243 00d4 8039      		cpi r24,lo8(3216)
 244 00d6 9407      		cpc r25,r20
 245 00d8 31F1      		breq .L27
 246 00da 8051      		subi r24,lo8(3600)
 247 00dc 9E40      		sbci r25,hi8(3600)
 248 00de 79F0      		breq .L18
 249 00e0 28C0      		rjmp .L28
 250               	.L11:
  58:io.c          **** 	   {
  59:io.c          **** 	    case IR_TV_1:	
  60:io.c          **** 			speed = 2;
 252               	.LM9:
 253 00e2 22E0      		ldi r18,lo8(2)
  61:io.c          **** 			 break;
 255               	.LM10:
 256 00e4 2CC0      		rjmp .L37
 257               	.L12:
  62:io.c          **** 		case IR_TV_2:
  63:io.c          **** 			speed = 3;
 259               	.LM11:
 260 00e6 23E0      		ldi r18,lo8(3)
  64:io.c          **** 			 break;
 262               	.LM12:
 263 00e8 2AC0      		rjmp .L37
 264               	.L13:
  65:io.c          **** 	    case IR_TV_3:
  66:io.c          **** 			speed = 4;
 266               	.LM13:
 267 00ea 24E0      		ldi r18,lo8(4)
  67:io.c          **** 			 break;
 269               	.LM14:
 270 00ec 28C0      		rjmp .L37
 271               	.L14:
  68:io.c          **** 		case IR_TV_4:
  69:io.c          **** 			speed = 5;
 273               	.LM15:
 274 00ee 25E0      		ldi r18,lo8(5)
  70:io.c          **** 			 break;
 276               	.LM16:
 277 00f0 26C0      		rjmp .L37
 278               	.L15:
  71:io.c          **** 	    case IR_TV_5:
  72:io.c          **** 			speed = 6;
 280               	.LM17:
 281 00f2 26E0      		ldi r18,lo8(6)
  73:io.c          **** 			 break;
 283               	.LM18:
 284 00f4 24C0      		rjmp .L37
 285               	.L16:
  74:io.c          **** 		case IR_TV_6:
  75:io.c          **** 			speed = 7;
 287               	.LM19:
 288 00f6 27E0      		ldi r18,lo8(7)
  76:io.c          **** 			 break;
 290               	.LM20:
 291 00f8 22C0      		rjmp .L37
 292               	.L17:
  77:io.c          **** 	    case IR_TV_7:
  78:io.c          **** 			speed = 8;
 294               	.LM21:
 295 00fa 28E0      		ldi r18,lo8(8)
  79:io.c          **** 			break;
 297               	.LM22:
 298 00fc 20C0      		rjmp .L37
 299               	.L18:
  80:io.c          **** 		case IR_TV_8:
  81:io.c          **** 			speed = 9;
 301               	.LM23:
 302 00fe 29E0      		ldi r18,lo8(9)
  82:io.c          **** 			break;
 304               	.LM24:
 305 0100 1EC0      		rjmp .L37
 306               	.L20:
  83:io.c          **** 	    case IR_TV_9:
  84:io.c          **** 			speed = 10;
  85:io.c          **** 			break;
  86:io.c          **** 		case IR_TV_0:
  87:io.c          **** 			g_mode1  = MOTOR_STOP;
 308               	.LM25:
 309 0102 1092 0000 		sts g_mode1,__zero_reg__
  88:io.c          **** 			g_mode2  = MOTOR_STOP;
 311               	.LM26:
 312 0106 1092 0000 		sts g_mode2,__zero_reg__
  89:io.c          **** 			break;
 314               	.LM27:
 315 010a 19C0      		rjmp .L37
 316               	.L21:
  90:io.c          **** 		case IR_TV_CHUP:							
  91:io.c          ****         	g_mode1 = MOTOR_FORWARD;		
 318               	.LM28:
 319 010c 3093 0000 		sts g_mode1,r19
 320 0110 0DC0      		rjmp .L38
 321               	.L22:
  92:io.c          **** 			g_mode2 = MOTOR_FORWARD;
  93:io.c          **** 			break;
  94:io.c          **** 		case IR_TV_CHDOWN:							
  95:io.c          **** 			g_mode1 = MOTOR_BACKWARD;
 323               	.LM29:
 324 0112 82E0      		ldi r24,lo8(2)
 325 0114 8093 0000 		sts g_mode1,r24
 326 0118 03C0      		rjmp .L39
 327               	.L26:
  96:io.c          **** 			g_mode2 = MOTOR_BACKWARD;
  97:io.c          **** 			break;
  98:io.c          **** 		case IR_TV_TVMUTE:
  99:io.c          **** 			break;
 100:io.c          **** 		case  IR_TV_TVPOWER:
 101:io.c          **** 		  	break;
 102:io.c          **** 		case   IR_TV_TVAV:
 103:io.c          **** 		    break;
 104:io.c          **** 		case  IR_TV_VOLUP:
 105:io.c          ****             g_mode1 = MOTOR_FORWARD;		
 329               	.LM30:
 330 011a 3093 0000 		sts g_mode1,r19
 106:io.c          **** 			g_mode2 = MOTOR_BACKWARD;
 332               	.LM31:
 333 011e 82E0      		ldi r24,lo8(2)
 334               	.L39:
 335 0120 8093 0000 		sts g_mode2,r24
 107:io.c          **** 			break;
 337               	.LM32:
 338 0124 0CC0      		rjmp .L37
 339               	.L27:
 108:io.c          **** 		case  IR_TV_VOLDOWN:                 			
 109:io.c          **** 			g_mode1 = MOTOR_BACKWARD;
 341               	.LM33:
 342 0126 82E0      		ldi r24,lo8(2)
 343 0128 8093 0000 		sts g_mode1,r24
 344               	.L38:
 110:io.c          **** 			g_mode2 = MOTOR_FORWARD;
 346               	.LM34:
 347 012c 3093 0000 		sts g_mode2,r19
 111:io.c          **** 			break;
 349               	.LM35:
 350 0130 06C0      		rjmp .L37
 351               	.L28:
 112:io.c          **** 		default:
 113:io.c          **** 			found = 0;
 353               	.LM36:
 354 0132 30E0      		ldi r19,lo8(0)
 114:io.c          **** 			g_mode1  = MOTOR_STOP;
 356               	.LM37:
 357 0134 3093 0000 		sts g_mode1,r19
 115:io.c          **** 			g_mode2  = MOTOR_STOP;
 359               	.LM38:
 360 0138 3093 0000 		sts g_mode2,r19
 361 013c 08C0      		rjmp .L36
 362               	.L37:
 116:io.c          **** 			break;
 117:io.c          ****  	   }
 118:io.c          ****        if (found)
 119:io.c          **** 	   {	pwm = (speed * 100);             // Start from +  speed*2^4
 364               	.LM39:
 365 013e 84E6      		ldi r24,lo8(100)
 366 0140 289F      		mul r18,r24
 367 0142 C001      		movw r24,r0
 368 0144 1124      		clr r1
 120:io.c          **** 			OCR1A = pwm;
 370               	.LM40:
 371 0146 9BBD      		out (74)+1-0x20,r25
 372 0148 8ABD      		out 74-0x20,r24
 121:io.c          **** 			OCR1B = pwm;
 374               	.LM41:
 375 014a 99BD      		out (72)+1-0x20,r25
 376 014c 88BD      		out 72-0x20,r24
 377               	.L36:
 122:io.c          **** 		}	
 123:io.c          **** 	   return found;
 124:io.c          **** 
 125:io.c          **** }
 379               	.LM42:
 380 014e 832F      		mov r24,r19
 381 0150 9927      		clr r25
 382               	/* epilogue: frame size=0 */
 383 0152 0895      		ret
 384               	/* epilogue end (size=1) */
 385               	/* function remote_decode size 169 (168) */
 392               	.Lscope1:
 394               	.global	__vector_6
 396               	__vector_6:
 126:io.c          **** 
 127:io.c          **** 
 128:io.c          ****  
 129:io.c          ****  
 130:io.c          **** /* Interrupt handle for Input Capture
 131:io.c          **** This routine will detect/ process the Sony IR remote command. Protocol using Sony remote control
 132:io.c          **** INPUT   :  Infrared signal from  ICP pin
 133:io.c          **** 		   Command table 
 134:io.c          **** 		  
 135:io.c          **** 
 136:io.c          **** OUTPUT 	: g_num  Number of message to display
 137:io.c          **** 		: g_control.display_mode   Display mode of message
 138:io.c          **** 		: g_start_bit
 139:io.c          **** 		
 140:io.c          **** 
 141:io.c          **** */
 142:io.c          **** SIGNAL(SIG_INPUT_CAPTURE1)
 143:io.c          **** {
 398               	.LM43:
 399               	/* prologue: frame size=0 */
 400 0154 1F92      		push __zero_reg__
 401 0156 0F92      		push __tmp_reg__
 402 0158 0FB6      		in __tmp_reg__,__SREG__
 403 015a 0F92      		push __tmp_reg__
 404 015c 1124      		clr __zero_reg__
 405 015e 2F93      		push r18
 406 0160 3F93      		push r19
 407 0162 4F93      		push r20
 408 0164 5F93      		push r21
 409 0166 6F93      		push r22
 410 0168 7F93      		push r23
 411 016a 8F93      		push r24
 412 016c 9F93      		push r25
 413 016e AF93      		push r26
 414 0170 BF93      		push r27
 415 0172 EF93      		push r30
 416 0174 FF93      		push r31
 417               	/* prologue end (size=17) */
 144:io.c          **** 	uint16_t  ir_code;
 145:io.c          ****     ir_code = ICR1;
 419               	.LM44:
 420 0176 26B5      		in r18,70-0x20
 421 0178 37B5      		in r19,(70)+1-0x20
 146:io.c          **** 	cli(); 
 423               	.LM45:
 424               	/* #APP */
 425 017a F894      		cli
 147:io.c          **** 
 148:io.c          ****     TCCR1B  |= _BV(ICES1);	     // Rising edge
 427               	.LM46:
 428               	/* #NOAPP */
 429 017c 8EB5      		in r24,78-0x20
 430 017e 8064      		ori r24,lo8(64)
 431 0180 8EBD      		out 78-0x20,r24
 149:io.c          ****  	ir_code  = sony_ir_decode(ir_code);  
 433               	.LM47:
 434 0182 C901      		movw r24,r18
 435 0184 0E94 0000 		call sony_ir_decode
 150:io.c          **** 
 151:io.c          **** 	if (ir_code)
 437               	.LM48:
 438 0188 0097      		sbiw r24,0
 439 018a 29F0      		breq .L41
 152:io.c          **** 	{       //End code dispatch command    
 153:io.c          ****  
 154:io.c          **** 		remote_decode (ir_code);
 441               	.LM49:
 442 018c 0E94 0000 		call remote_decode
 155:io.c          **** // Return to falling edge for Start		
 156:io.c          **** 		TCCR1B  &= ~(_BV(ICES1));
 444               	.LM50:
 445 0190 8EB5      		in r24,78-0x20
 446 0192 8F7B      		andi r24,lo8(-65)
 447 0194 8EBD      		out 78-0x20,r24
 448               	.L41:
 157:io.c          **** 
 158:io.c          **** //Note if  SELFTEST is selected g_irint = 0;
 159:io.c          **** 	} 
 160:io.c          ****     sei();
 450               	.LM51:
 451               	/* #APP */
 452 0196 7894      		sei
 453               	/* #NOAPP */
 454               	/* epilogue: frame size=0 */
 455 0198 FF91      		pop r31
 456 019a EF91      		pop r30
 457 019c BF91      		pop r27
 458 019e AF91      		pop r26
 459 01a0 9F91      		pop r25
 460 01a2 8F91      		pop r24
 461 01a4 7F91      		pop r23
 462 01a6 6F91      		pop r22
 463 01a8 5F91      		pop r21
 464 01aa 4F91      		pop r20
 465 01ac 3F91      		pop r19
 466 01ae 2F91      		pop r18
 467 01b0 0F90      		pop __tmp_reg__
 468 01b2 0FBE      		out __SREG__,__tmp_reg__
 469 01b4 0F90      		pop __tmp_reg__
 470 01b6 1F90      		pop __zero_reg__
 471 01b8 1895      		reti
 472               	/* epilogue end (size=17) */
 473               	/* function __vector_6 size 53 (19) */
 478               	.Lscope2:
 479               		.data
 480               	.LC0:
 481 0000 00        		.byte	0
 482 0001 66        		.byte	102
 483 0002 62        		.byte	98
 484               		.text
 486               	.global	main
 488               	main:
 161:io.c          ****  
 162:io.c          **** }
 163:io.c          **** 
 164:io.c          **** 
 165:io.c          **** void main()
 166:io.c          **** {
 490               	.LM52:
 491               	/* prologue: frame size=3 */
 492 01ba C0E0      		ldi r28,lo8(__stack - 3)
 493 01bc D0E0      		ldi r29,hi8(__stack - 3)
 494 01be DEBF      		out __SP_H__,r29
 495 01c0 CDBF      		out __SP_L__,r28
 496               	/* prologue end (size=4) */
 167:io.c          ****   uint8_t sw1,sw2;
 168:io.c          ****   uint16_t k;
 169:io.c          ****   int8_t d1,d2;
 170:io.c          ****   uint8_t show[3] = {0,'f','b'};
 498               	.LM53:
 499 01c2 6E01      		movw r12,r28
 500 01c4 0894      		sec
 501 01c6 C11C      		adc r12,__zero_reg__
 502 01c8 D11C      		adc r13,__zero_reg__
 503 01ca D601      		movw r26,r12
 504 01cc E0E0      		ldi r30,lo8(.LC0)
 505 01ce F0E0      		ldi r31,hi8(.LC0)
 506 01d0 83E0      		ldi r24,lo8(3)
 507               	.L43:
 509               	.LM54:
 510 01d2 0190      		ld r0,Z+
 511 01d4 0D92      		st X+,r0
 512 01d6 8150      		subi r24,lo8(-(-1))
 513 01d8 E1F7      		brne .L43
 171:io.c          ****   
 172:io.c          ****   
 173:io.c          **** //  enum {MOTOR_STOP,MOTOR_FORWARD,MOTOR_BACKWARD,MOTOR_BRAKE};
 174:io.c          ****   d7segment_init();
 515               	.LM55:
 516 01da 0E94 0000 		call d7segment_init
 175:io.c          ****   init_ir();
 518               	.LM56:
 519 01de 0E94 0000 		call init_ir
 176:io.c          ****   init_motor();
 521               	.LM57:
 522 01e2 0E94 0000 		call init_motor
 177:io.c          ****   sei();
 524               	.LM58:
 525               	/* #APP */
 526 01e6 7894      		sei
 178:io.c          ****   d1 = 0;
 528               	.LM59:
 529               	/* #NOAPP */
 530 01e8 FF24      		clr r15
 179:io.c          ****   d2 = 0;
 532               	.LM60:
 533 01ea EF2C      		mov r14,r15
 534               	.L44:
 180:io.c          ****   
 181:io.c          ****   while (1)
 182:io.c          ****   {
 183:io.c          ****    sw1 = _7SEGMENT_SW1_IN_PORT & _7SEGMENT_SW1; 
 536               	.LM61:
 537 01ec 80B3      		in r24,48-0x20
 184:io.c          ****    
 185:io.c          ****    if (!sw1) // SW1  Press
 539               	.LM62:
 540 01ee 982F      		mov r25,r24
 541 01f0 9870      		andi r25,lo8(8)
 542 01f2 83FD      		sbrc r24,3
 543 01f4 11C0      		rjmp .L46
 186:io.c          ****     {   	
 187:io.c          **** 		d1++;
 545               	.LM63:
 546 01f6 E394      		inc r14
 188:io.c          **** 	     if (d1 > MOTOR_BACKWARD)
 548               	.LM64:
 549 01f8 82E0      		ldi r24,lo8(2)
 550 01fa 8E15      		cp r24,r14
 551 01fc 0CF4      		brge .L47
 189:io.c          **** 			d1 = MOTOR_STOP;
 553               	.LM65:
 554 01fe E92E      		mov r14,r25
 555               	.L47:
 556 0200 03EF      		ldi r16,lo8(499)
 557 0202 11E0      		ldi r17,hi8(499)
 558               	.L51:
 190:io.c          **** 		for (k = 0; k < 500 ;k++)                         // Delay for key bounce
 191:io.c          **** 				delay(6000);						
 560               	.LM66:
 561 0204 80E7      		ldi r24,lo8(6000)
 562 0206 97E1      		ldi r25,hi8(6000)
 563 0208 0E94 0000 		call delay
 565               	.LM67:
 566 020c 0150      		subi r16,lo8(-(-1))
 567 020e 1040      		sbci r17,hi8(-(-1))
 568 0210 17FF      		sbrs r17,7
 569 0212 F8CF      		rjmp .L51
 192:io.c          **** 		g_mode1 = d1;
 571               	.LM68:
 572 0214 E092 0000 		sts g_mode1,r14
 573               	.L46:
 193:io.c          **** 
 194:io.c          **** 	}
 195:io.c          ****    
 196:io.c          ****    sw2 = _7SEGMENT_SW2_IN_PORT & _7SEGMENT_SW2; 
 575               	.LM69:
 576 0218 83B3      		in r24,51-0x20
 197:io.c          ****    if (!sw2) // SW2 Press
 578               	.LM70:
 579 021a 982F      		mov r25,r24
 580 021c 9470      		andi r25,lo8(4)
 581 021e 82FD      		sbrc r24,2
 582 0220 11C0      		rjmp .L52
 198:io.c          ****    {
 199:io.c          ****         d2++;
 584               	.LM71:
 585 0222 F394      		inc r15
 200:io.c          **** 		if (d2 > MOTOR_BACKWARD)
 587               	.LM72:
 588 0224 82E0      		ldi r24,lo8(2)
 589 0226 8F15      		cp r24,r15
 590 0228 0CF4      		brge .L53
 201:io.c          **** 			d2 = MOTOR_STOP;
 592               	.LM73:
 593 022a F92E      		mov r15,r25
 594               	.L53:
 595 022c 03EF      		ldi r16,lo8(499)
 596 022e 11E0      		ldi r17,hi8(499)
 597               	.L57:
 202:io.c          ****  		for (k = 0; k < 500 ;k++)                         // Delay for key bounce		
 203:io.c          ****  				delay(6000);
 599               	.LM74:
 600 0230 80E7      		ldi r24,lo8(6000)
 601 0232 97E1      		ldi r25,hi8(6000)
 602 0234 0E94 0000 		call delay
 604               	.LM75:
 605 0238 0150      		subi r16,lo8(-(-1))
 606 023a 1040      		sbci r17,hi8(-(-1))
 607 023c 17FF      		sbrs r17,7
 608 023e F8CF      		rjmp .L57
 204:io.c          **** 		g_mode2 = d2;
 610               	.LM76:
 611 0240 F092 0000 		sts g_mode2,r15
 612               	.L52:
 205:io.c          **** 	
 206:io.c          ****    }
 207:io.c          **** 
 208:io.c          ****   	motor_control(1, g_mode1);
 614               	.LM77:
 615 0244 6091 0000 		lds r22,g_mode1
 616 0248 81E0      		ldi r24,lo8(1)
 617 024a 0E94 0000 		call motor_control
 209:io.c          **** 	motor_control(2, g_mode2);
 619               	.LM78:
 620 024e 6091 0000 		lds r22,g_mode2
 621 0252 82E0      		ldi r24,lo8(2)
 622 0254 0E94 0000 		call motor_control
 210:io.c          **** 	
 211:io.c          **** //  		for (k = 0; k < 10 ;k++)                         // Delay for key bounce
 212:io.c          **** //			delay (30000);
 213:io.c          **** //		motor_control (1, MOTOR_STOP);
 214:io.c          **** 
 215:io.c          ****    	d7segment_display(show[g_mode1],1);
 624               	.LM79:
 625 0258 8091 0000 		lds r24,g_mode1
 626 025c F601      		movw r30,r12
 627 025e E80F      		add r30,r24
 628 0260 F11D      		adc r31,__zero_reg__
 629 0262 61E0      		ldi r22,lo8(1)
 630 0264 8081      		ld r24,Z
 631 0266 0E94 0000 		call d7segment_display
 216:io.c          ****  			delay(12000);
 633               	.LM80:
 634 026a 80EE      		ldi r24,lo8(12000)
 635 026c 9EE2      		ldi r25,hi8(12000)
 636 026e 0E94 0000 		call delay
 217:io.c          **** 	d7segment_display(show[g_mode2],2);
 638               	.LM81:
 639 0272 8091 0000 		lds r24,g_mode2
 640 0276 F601      		movw r30,r12
 641 0278 E80F      		add r30,r24
 642 027a F11D      		adc r31,__zero_reg__
 643 027c 62E0      		ldi r22,lo8(2)
 644 027e 8081      		ld r24,Z
 645 0280 0E94 0000 		call d7segment_display
 218:io.c          ****  			delay(12000);
 647               	.LM82:
 648 0284 80EE      		ldi r24,lo8(12000)
 649 0286 9EE2      		ldi r25,hi8(12000)
 650 0288 0E94 0000 		call delay
 651 028c AFCF      		rjmp .L44
 652               	/* epilogue: frame size=3 */
 653               	/* epilogue: noreturn */
 654               	/* epilogue end (size=0) */
 655               	/* function main size 108 (104) */
 665               	.Lscope3:
 668               		.text
 670               	Letext:
 671               	/* File "io.c": code  339 = 0x0153 ( 300), prologues  21, epilogues  18 */
DEFINED SYMBOLS
                            *ABS*:00000000 io.c
C:\DOCUME~1\tos\LOCALS~1\Temp/ccyIaaaa.s:3      *ABS*:0000003f __SREG__
C:\DOCUME~1\tos\LOCALS~1\Temp/ccyIaaaa.s:4      *ABS*:0000003e __SP_H__
C:\DOCUME~1\tos\LOCALS~1\Temp/ccyIaaaa.s:5      *ABS*:0000003d __SP_L__
C:\DOCUME~1\tos\LOCALS~1\Temp/ccyIaaaa.s:6      *ABS*:00000000 __tmp_reg__
C:\DOCUME~1\tos\LOCALS~1\Temp/ccyIaaaa.s:7      *ABS*:00000001 __zero_reg__
C:\DOCUME~1\tos\LOCALS~1\Temp/ccyIaaaa.s:80     .bss:00000000 g_mode2
C:\DOCUME~1\tos\LOCALS~1\Temp/ccyIaaaa.s:86     .bss:00000001 g_mode1
C:\DOCUME~1\tos\LOCALS~1\Temp/ccyIaaaa.s:93     .text:00000000 delay
C:\DOCUME~1\tos\LOCALS~1\Temp/ccyIaaaa.s:126    .text:00000012 remote_decode
C:\DOCUME~1\tos\LOCALS~1\Temp/ccyIaaaa.s:396    .text:00000154 __vector_6
C:\DOCUME~1\tos\LOCALS~1\Temp/ccyIaaaa.s:488    .text:000001ba main
C:\DOCUME~1\tos\LOCALS~1\Temp/ccyIaaaa.s:670    .text:0000028e Letext

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
sony_ir_decode
__stack
d7segment_init
init_ir
init_motor
motor_control
d7segment_display
