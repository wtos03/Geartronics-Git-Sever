   1               		.file	"eeprom_prog.c"
   2               		.arch atmega32
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  60               	.global	__vector_13
  62               	__vector_13:
   1:eeprom_prog.c **** /*
   2:eeprom_prog.c **** 
   3:eeprom_prog.c ****  Module 				:   Eeprom  programmer module
   4:eeprom_prog.c ****  Description 			:   eeprom read/write/copy  using i2c interface 
   5:eeprom_prog.c ****  Original written for 	:   ATMEGA32
   6:eeprom_prog.c ****  CPU port/tested		:   ATMEGA32
   7:eeprom_prog.c ****  Hardware use			:   Dual 7 Segments common cathode module
   8:eeprom_prog.c **** 						:   Socket programmer for 24LC32
   9:eeprom_prog.c ****  Port use				:   E_PORTA (0-7), E_PORTB (0-1), SCL, SDA
  10:eeprom_prog.c ****  Memory	FLASH			:   XXX
  11:eeprom_prog.c **** 		RAM				:   XXX
  12:eeprom_prog.c **** 		EEPROM			:   XXX
  13:eeprom_prog.c ****  Document				:   Document describe algorithm
  14:eeprom_prog.c ****  Written by 			:   Wichai  wichai@geartronics.net
  15:eeprom_prog.c ****  Date					:  	24/6/2008
  16:eeprom_prog.c ****   
  17:eeprom_prog.c ****  Update History
  18:eeprom_prog.c ****  
  19:eeprom_prog.c ****  Date			By 					Comments
  20:eeprom_prog.c ****  ----			--					---------
  21:eeprom_prog.c ****  
  22:eeprom_prog.c ****  
  23:eeprom_prog.c ****   */
  24:eeprom_prog.c ****  
  25:eeprom_prog.c **** #include <avr/interrupt.h>
  26:eeprom_prog.c **** #include <avr/io.h>
  27:eeprom_prog.c **** #include <avr/signal.h>
  28:eeprom_prog.c **** #include <avr/delay.h>
  29:eeprom_prog.c **** #include "cpu.h"
  30:eeprom_prog.c **** #include "Dual_7Segment.h"
  31:eeprom_prog.c **** #include "E_i2ceeprom.h"
  32:eeprom_prog.c **** #include "E_i2c.h"
  33:eeprom_prog.c **** #include "E_uart.h"
  34:eeprom_prog.c ****  
  35:eeprom_prog.c ****   
  36:eeprom_prog.c **** 
  37:eeprom_prog.c **** #define READ 1
  38:eeprom_prog.c **** #define WRITE 2
  39:eeprom_prog.c **** #define STOP 0 
  40:eeprom_prog.c **** #define NULL 0
  41:eeprom_prog.c **** #define I2C_EEPROM_MASTER_ADDR  0xA2        // Address eeprom 1010 	- 0010
  42:eeprom_prog.c **** 							                //  EEprom   - A2,A1,A0 - R/W
  43:eeprom_prog.c **** 
  44:eeprom_prog.c **** 
  45:eeprom_prog.c **** #define I2C_EEPROM_SLAVE_ADDR  0xA0        	// Address eeprom 1010 	- 0000
  46:eeprom_prog.c **** 											// EEprom  - A2,A1,A0 - R/W
  47:eeprom_prog.c **** #define  E_24LC32_MEM_ADDR   0x0800			// 0x1000 For 24LC32  32 kbits
  48:eeprom_prog.c **** #define  EEPROM_DELAY	   5				  
  49:eeprom_prog.c ****  
  50:eeprom_prog.c **** void main(void);
  51:eeprom_prog.c **** 
  52:eeprom_prog.c **** 
  53:eeprom_prog.c **** 
  54:eeprom_prog.c **** SIGNAL(SIG_UART_RECV)
  55:eeprom_prog.c **** {  
  64               	.LM1:
  65               	/* prologue: frame size=0 */
  66 0000 1F92      		push __zero_reg__
  67 0002 0F92      		push __tmp_reg__
  68 0004 0FB6      		in __tmp_reg__,__SREG__
  69 0006 0F92      		push __tmp_reg__
  70 0008 1124      		clr __zero_reg__
  71 000a 2F93      		push r18
  72 000c 3F93      		push r19
  73 000e 4F93      		push r20
  74 0010 5F93      		push r21
  75 0012 6F93      		push r22
  76 0014 7F93      		push r23
  77 0016 8F93      		push r24
  78 0018 9F93      		push r25
  79 001a AF93      		push r26
  80 001c BF93      		push r27
  81 001e EF93      		push r30
  82 0020 FF93      		push r31
  83               	/* prologue end (size=17) */
  56:eeprom_prog.c ****    uint8_t ch;
  57:eeprom_prog.c ****    ch =  UDR;
  85               	.LM2:
  86 0022 8CB1      		in r24,44-0x20
  58:eeprom_prog.c ****    uart_put_RX (ch);    // Should not use UDR here to avoid characters missing
  88               	.LM3:
  89 0024 0E94 0000 		call uart_put_RX
  90               	/* epilogue: frame size=0 */
  91 0028 FF91      		pop r31
  92 002a EF91      		pop r30
  93 002c BF91      		pop r27
  94 002e AF91      		pop r26
  95 0030 9F91      		pop r25
  96 0032 8F91      		pop r24
  97 0034 7F91      		pop r23
  98 0036 6F91      		pop r22
  99 0038 5F91      		pop r21
 100 003a 4F91      		pop r20
 101 003c 3F91      		pop r19
 102 003e 2F91      		pop r18
 103 0040 0F90      		pop __tmp_reg__
 104 0042 0FBE      		out __SREG__,__tmp_reg__
 105 0044 0F90      		pop __tmp_reg__
 106 0046 1F90      		pop __zero_reg__
 107 0048 1895      		reti
 108               	/* epilogue end (size=17) */
 109               	/* function __vector_13 size 37 (3) */
 114               	.Lscope0:
 116               	.global	__vector_14
 118               	__vector_14:
  59:eeprom_prog.c **** }
  60:eeprom_prog.c ****  
  61:eeprom_prog.c ****  
  62:eeprom_prog.c **** 
  63:eeprom_prog.c **** /*************************************************************************
  64:eeprom_prog.c **** Function: UART Data Register Empty interrupt
  65:eeprom_prog.c **** Purpose:  called when the UART is ready to transmit the next byte
  66:eeprom_prog.c **** **************************************************************************/
  67:eeprom_prog.c **** 
  68:eeprom_prog.c **** SIGNAL(SIG_UART_DATA)
  69:eeprom_prog.c **** { 
 120               	.LM4:
 121               	/* prologue: frame size=0 */
 122 004a 1F92      		push __zero_reg__
 123 004c 0F92      		push __tmp_reg__
 124 004e 0FB6      		in __tmp_reg__,__SREG__
 125 0050 0F92      		push __tmp_reg__
 126 0052 1124      		clr __zero_reg__
 127 0054 2F93      		push r18
 128 0056 3F93      		push r19
 129 0058 4F93      		push r20
 130 005a 5F93      		push r21
 131 005c 6F93      		push r22
 132 005e 7F93      		push r23
 133 0060 8F93      		push r24
 134 0062 9F93      		push r25
 135 0064 AF93      		push r26
 136 0066 BF93      		push r27
 137 0068 EF93      		push r30
 138 006a FF93      		push r31
 139               	/* prologue end (size=17) */
  70:eeprom_prog.c ****     uint8_t  ch;
  71:eeprom_prog.c **** 	if ((ch = uart_get_TX()))
 141               	.LM5:
 142 006c 0E94 0000 		call uart_get_TX
 143 0070 8823      		tst r24
 144 0072 11F0      		breq .L3
  72:eeprom_prog.c **** 	{
  73:eeprom_prog.c ****  		UDR = ch;
 146               	.LM6:
 147 0074 8CB9      		out 44-0x20,r24
 148 0076 01C0      		rjmp .L2
 149               	.L3:
  74:eeprom_prog.c **** 	}	
  75:eeprom_prog.c **** 	else 
  76:eeprom_prog.c **** // No character disable  interrupt to avoid repetable call Enable again when
  77:eeprom_prog.c **** //	send character in putc procedure
  78:eeprom_prog.c **** 	{
  79:eeprom_prog.c **** 	    UCSRB &=  ~(1<<UDRIE);
 151               	.LM7:
 152 0078 5598      		cbi 42-0x20,5
 153               	.L2:
 154               	/* epilogue: frame size=0 */
 155 007a FF91      		pop r31
 156 007c EF91      		pop r30
 157 007e BF91      		pop r27
 158 0080 AF91      		pop r26
 159 0082 9F91      		pop r25
 160 0084 8F91      		pop r24
 161 0086 7F91      		pop r23
 162 0088 6F91      		pop r22
 163 008a 5F91      		pop r21
 164 008c 4F91      		pop r20
 165 008e 3F91      		pop r19
 166 0090 2F91      		pop r18
 167 0092 0F90      		pop __tmp_reg__
 168 0094 0FBE      		out __SREG__,__tmp_reg__
 169 0096 0F90      		pop __tmp_reg__
 170 0098 1F90      		pop __zero_reg__
 171 009a 1895      		reti
 172               	/* epilogue end (size=17) */
 173               	/* function __vector_14 size 41 (7) */
 178               	.Lscope1:
 180               	.global	main
 182               	main:
  80:eeprom_prog.c **** 	}
  81:eeprom_prog.c **** 	
  82:eeprom_prog.c **** }
  83:eeprom_prog.c ****  
  84:eeprom_prog.c ****  
  85:eeprom_prog.c **** /*
  86:eeprom_prog.c **** This program read the data from master eeprom and copy to slave eeprom by copy from master eeprom i
  87:eeprom_prog.c **** and copy from buffer to slave eeprom 
  88:eeprom_prog.c **** 
  89:eeprom_prog.c **** */
  90:eeprom_prog.c **** 
  91:eeprom_prog.c **** void main()
  92:eeprom_prog.c **** {
 184               	.LM8:
 185               	/* prologue: frame size=0 */
 186 009c C0E0      		ldi r28,lo8(__stack - 0)
 187 009e D0E0      		ldi r29,hi8(__stack - 0)
 188 00a0 DEBF      		out __SP_H__,r29
 189 00a2 CDBF      		out __SP_L__,r28
 190               	/* prologue end (size=4) */
  93:eeprom_prog.c ****   uint8_t sw1,sw2;
  94:eeprom_prog.c ****   uint16_t  memaddr = 0;   // Start memory Address
  95:eeprom_prog.c ****   uint8_t  dat,c,i;
  96:eeprom_prog.c ****   
  97:eeprom_prog.c ****  /*
  98:eeprom_prog.c ****  *  Initialize UART library, pass baudrate and AVR cpu clock
  99:eeprom_prog.c ****  *  with the macro 
 100:eeprom_prog.c ****  *  UART_BAUD_SELECT() (normal speed mode )
 101:eeprom_prog.c ****  *  or 
 102:eeprom_prog.c ****  *  UART_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
 103:eeprom_prog.c **** */
 104:eeprom_prog.c ****   DDRC = 0xFC;
 192               	.LM9:
 193 00a4 8CEF      		ldi r24,lo8(-4)
 194 00a6 84BB      		out 52-0x20,r24
 105:eeprom_prog.c ****   uart_init(); 
 196               	.LM10:
 197 00a8 0E94 0000 		call uart_init
 106:eeprom_prog.c ****  
 107:eeprom_prog.c ****   
 108:eeprom_prog.c ****   d7segment_init();
 199               	.LM11:
 200 00ac 0E94 0000 		call d7segment_init
 109:eeprom_prog.c ****   i2ceeprom_init();
 202               	.LM12:
 203 00b0 0E94 0000 		call i2ceeprom_init
 110:eeprom_prog.c ****   i2c_set_localdeviceaddr(I2C_EEPROM_MASTER_ADDR,FALSE);
 205               	.LM13:
 206 00b4 60E0      		ldi r22,lo8(0)
 207 00b6 82EA      		ldi r24,lo8(-94)
 208 00b8 0E94 0000 		call i2c_set_localdeviceaddr
 111:eeprom_prog.c ****   i2c_set_localdeviceaddr(I2C_EEPROM_SLAVE_ADDR,FALSE);
 210               	.LM14:
 211 00bc 60E0      		ldi r22,lo8(0)
 212 00be 80EA      		ldi r24,lo8(-96)
 213 00c0 0E94 0000 		call i2c_set_localdeviceaddr
 112:eeprom_prog.c **** 
 113:eeprom_prog.c ****   sei();
 215               	.LM15:
 216               	/* #APP */
 217 00c4 7894      		sei
 218               	/* #NOAPP */
 219               	.L6:
 114:eeprom_prog.c ****  
 115:eeprom_prog.c **** 
 116:eeprom_prog.c **** 
 117:eeprom_prog.c **** //	i2ceeprom_write_byte(I2C_EEPROM_ADDR,0,1);
 118:eeprom_prog.c **** //	i = i2ceeprom_read_byte(I2C_EEPROM_ADDR,0);
 119:eeprom_prog.c **** 		
 120:eeprom_prog.c ****  
 121:eeprom_prog.c ****   while (1)
 122:eeprom_prog.c ****   {
 123:eeprom_prog.c ****  		
 124:eeprom_prog.c **** 		
 125:eeprom_prog.c ****    sw1 = _7SEGMENT_SW1_IN_PORT & _7SEGMENT_SW1; 
 221               	.LM16:
 222 00c6 83B3      		in r24,51-0x20
 126:eeprom_prog.c ****    sw2 = _7SEGMENT_SW2_IN_PORT & _7SEGMENT_SW2; 
 224               	.LM17:
 225 00c8 93B3      		in r25,51-0x20
 127:eeprom_prog.c ****      
 128:eeprom_prog.c ****   
 129:eeprom_prog.c ****  // Delay
 130:eeprom_prog.c ****    
 131:eeprom_prog.c ****    if (!sw1) // Start copy eeprom 
 227               	.LM18:
 228 00ca 982F      		mov r25,r24
 229 00cc 9072      		andi r25,lo8(32)
 230 00ce 85FD      		sbrc r24,5
 231 00d0 3CC0      		rjmp .L8
 132:eeprom_prog.c ****     {   	
 133:eeprom_prog.c ****         i = 0;
 233               	.LM19:
 234 00d2 B92E      		mov r11,r25
 235 00d4 CC24      		clr r12
 236 00d6 DD24      		clr r13
 237 00d8 7601      		movw r14,r12
 238 00da CFEF      		ldi r28,lo8(2047)
 239 00dc D7E0      		ldi r29,hi8(2047)
 240               	.L31:
 134:eeprom_prog.c **** 		for (memaddr = 0  ; memaddr < E_24LC32_MEM_ADDR ;memaddr++)
 135:eeprom_prog.c **** 		{
 136:eeprom_prog.c ****    
 137:eeprom_prog.c **** 			dat = i2ceeprom_read_byte(I2C_EEPROM_MASTER_ADDR,memaddr);
 242               	.LM20:
 243 00de B701      		movw r22,r14
 244 00e0 A601      		movw r20,r12
 245 00e2 82EA      		ldi r24,lo8(-94)
 246 00e4 0E94 0000 		call i2ceeprom_read_byte
 247 00e8 182F      		mov r17,r24
 138:eeprom_prog.c **** 
 139:eeprom_prog.c **** 			debug_value (dat,16); 
 249               	.LM21:
 250 00ea 60E1      		ldi r22,lo8(16)
 251 00ec 9927      		clr r25
 252 00ee 0E94 0000 		call debug_value
 140:eeprom_prog.c ****  			i2ceeprom_write_byte(I2C_EEPROM_SLAVE_ADDR, memaddr,dat);
 254               	.LM22:
 255 00f2 212F      		mov r18,r17
 256 00f4 B701      		movw r22,r14
 257 00f6 A601      		movw r20,r12
 258 00f8 80EA      		ldi r24,lo8(-96)
 259 00fa 0E94 0000 		call i2ceeprom_write_byte
 141:eeprom_prog.c **** //			_delay_ms( EEPROM_DELAY);
 142:eeprom_prog.c **** 	          
 143:eeprom_prog.c **** 			if (i < 100)
 261               	.LM23:
 262 00fe 83E6      		ldi r24,lo8(99)
 263 0100 8B15      		cp r24,r11
 264 0102 08F0      		brlo .L12
 144:eeprom_prog.c **** 			{
 145:eeprom_prog.c **** 				c =0;
 266               	.LM24:
 267 0104 AA24      		clr r10
 268               	.L12:
 146:eeprom_prog.c **** 			}
 147:eeprom_prog.c **** 			if (i > 100) 
 270               	.LM25:
 271 0106 84E6      		ldi r24,lo8(100)
 272 0108 8B15      		cp r24,r11
 273 010a 10F4      		brsh .L13
 148:eeprom_prog.c **** 			{
 149:eeprom_prog.c **** 				c ='-';			
 275               	.LM26:
 276 010c 8DE2      		ldi r24,lo8(45)
 277 010e A82E      		mov r10,r24
 278               	.L13:
 150:eeprom_prog.c ****             }			
 151:eeprom_prog.c **** 			if (i > 200)
 280               	.LM27:
 281 0110 88EC      		ldi r24,lo8(-56)
 282 0112 8B15      		cp r24,r11
 283 0114 08F4      		brsh .L14
 152:eeprom_prog.c **** 				i = 0;
 285               	.LM28:
 286 0116 BB24      		clr r11
 287               	.L14:
 153:eeprom_prog.c **** 			
 154:eeprom_prog.c **** 			d7segment_display(c,1);
 289               	.LM29:
 290 0118 61E0      		ldi r22,lo8(1)
 291 011a 8A2D      		mov r24,r10
 292 011c 0E94 0000 		call d7segment_display
 293               	.LBB2:
 294               	.LBB3:
 296               	.Ltext1:
   1:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****    Copyright (c) 2004, Joerg Wunsch
   3:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****    All rights reserved.
   4:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 
   5:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****    Redistribution and use in source and binary forms, with or without
   6:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****    modification, are permitted provided that the following conditions are met:
   7:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 
   8:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****    * Redistributions of source code must retain the above copyright
   9:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****      notice, this list of conditions and the following disclaimer.
  10:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 
  11:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  12:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****      notice, this list of conditions and the following disclaimer in
  13:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****      the documentation and/or other materials provided with the
  14:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****      distribution.
  15:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 
  16:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****    * Neither the name of the copyright holders nor the names of
  17:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****      contributors may be used to endorse or promote products derived
  18:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****      from this software without specific prior written permission.
  19:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 
  20:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 
  32:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** /* $Id: delay.h,v 1.9 2004/12/22 10:16:54 joerg_wunsch Exp $ */
  33:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 
  34:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** /*
  35:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****    avr/delay.h - loops for small accurate delays
  36:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****  */
  37:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 
  38:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** #ifndef _AVR_DELAY_H_
  39:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** #define _AVR_DELAY_H_ 1
  40:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 
  41:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** #include <inttypes.h>
  42:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 
  43:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** /** \defgroup avr_delay Busy-wait delay loops
  44:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     \code
  45:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  46:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     //#define F_CPU 14.7456E6
  47:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     #include <avr/delay.h>
  48:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     \endcode
  49:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 
  50:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     The functions in this header file implement simple delay loops
  51:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     that perform a busy-waiting.  They are typically used to
  52:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     facilitate short delays in the program execution.  They are
  53:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     implemented as count-down loops with a well-known CPU cycle
  54:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     count per loop iteration.  As such, no other processing can
  55:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     occur simultaneously.  It should be kept in mind that the
  56:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     functions described here do not disable interrupts.
  57:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 
  58:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     In general, for long delays, the use of hardware timers is
  59:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     much preferrable, as they free the CPU, and allow for
  60:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     concurrent processing of other events while the timer is
  61:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     running.  However, in particular for very short delays, the
  62:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     overhead of setting up a hardware timer is too much compared
  63:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     to the overall delay time.
  64:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 
  65:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     Two inline functions are provided for the actual delay algorithms.
  66:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 
  67:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     Two wrapper functions allow the specification of microsecond, and
  68:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     millisecond delays directly, using the application-supplied macro
  69:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).  These functions
  70:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     operate on double typed arguments, however when optimization is
  71:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     turned on, the entire floating-point calculation will be done at
  72:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     compile-time.
  73:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** */
  74:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 
  75:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** /** \ingroup avr_delay
  76:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 
  77:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  78:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     iterations are possible.  (The value 256 would have to be passed
  79:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  80:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     including the overhead the compiler needs to setup the counter
  81:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     register.
  82:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 
  83:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  84:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     can be achieved.
  85:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** */
  86:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** static __inline__ void
  87:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** _delay_loop_1(uint8_t __count)
  88:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** {
  89:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 	__asm__ volatile (
  90:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 		"1: dec %0" "\n\t"
  91:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 		"brne 1b"
  92:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 		: "=r" (__count)
  93:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 		: "0" (__count)
  94:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 	);
  95:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** }
  96:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 
  97:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** /** \ingroup avr_delay
  98:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 
  99:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
 100:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     iterations are possible.  (The value 65536 would have to be
 101:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
 102:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     not including the overhead the compiler requires to setup the
 103:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     counter register pair.
 104:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 
 105:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 106:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****     milliseconds can be achieved.
 107:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****  */
 108:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** static __inline__ void
 109:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** _delay_loop_2(uint16_t __count)
 110:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** {
 111:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 	__asm__ volatile (
 112:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 		"1: sbiw %0,1" "\n\t"
 113:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 		"brne 1b"
 114:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 		: "=w" (__count)
 115:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 		: "0" (__count)
 116:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 	);
 117:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** }
 118:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 
 119:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** #ifndef F_CPU
 120:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** /* prevent compiler error by supplying a default */
 121:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** # warning "F_CPU not defined for <avr/delay.h>"
 122:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** # define F_CPU 1000000UL
 123:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** #endif
 124:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 
 125:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** /**
 126:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****    \ingroup avr_delay
 127:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 
 128:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 129:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 
 130:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****    The macro F_CPU is supposed to be defined to a
 131:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 132:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 
 133:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 134:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****  */
 135:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** static __inline__ void
 136:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** _delay_us(double __us)
 137:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** {
 138:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 	uint8_t __ticks;
 139:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 	double __tmp = ((F_CPU) / 3e6) * __us;
 140:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 	if (__tmp < 1.0)
 141:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 		__ticks = 1;
 142:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 	else if (__tmp > 255)
 143:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 		__ticks = 0;	/* i.e. 256 */
 144:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 	else
 145:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 		__ticks = (uint8_t)__tmp;
 146:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 	_delay_loop_1(__ticks);
 147:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** }
 148:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 
 149:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 
 150:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** /**
 151:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****    \ingroup avr_delay
 152:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 
 153:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 154:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 
 155:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****    The macro F_CPU is supposed to be defined to a
 156:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 157:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 
 158:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 159:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h ****  */
 160:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** static __inline__ void
 161:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** _delay_ms(double __ms)
 162:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** {
 163:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 	uint16_t __ticks;
 164:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 	double __tmp = ((F_CPU) / 4e3) * __ms;
 165:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 	if (__tmp < 1.0)
 166:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 		__ticks = 1;
 167:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 	else if (__tmp > 65535)
 168:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 		__ticks = 0;	/* i.e. 65536 */
 169:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 	else
 170:C:/WINAVR/BIN/../lib/gcc/avr/3.4.3/../../../../avr/include/avr/delay.h **** 		__ticks = (uint16_t)__tmp;
 298               	.LM30:
 299 0120 00E4      		ldi r16,lo8(8000)
 300 0122 1FE1      		ldi r17,hi8(8000)
 301               	.LBB4:
 302               	.LBB5:
 304               	.LM31:
 305 0124 C801      		movw r24,r16
 306               	/* #APP */
 307 0126 0197      		1: sbiw r24,1
 308 0128 F1F7      		brne 1b
 309               	/* #NOAPP */
 310               	.LBE5:
 311               	.LBE4:
 312               	.LBE3:
 313               	.LBE2:
 315               	.Ltext2:
 155:eeprom_prog.c **** 			_delay_ms(2);
 156:eeprom_prog.c **** 			d7segment_display(c,2);
 317               	.LM32:
 318 012a 62E0      		ldi r22,lo8(2)
 319 012c 8A2D      		mov r24,r10
 320 012e 0E94 0000 		call d7segment_display
 321               	.LBB6:
 322               	.LBB7:
 323               	.LBB8:
 324               	.LBB9:
 326               	.Ltext3:
 328               	.LM33:
 329 0132 C801      		movw r24,r16
 330               	/* #APP */
 331 0134 0197      		1: sbiw r24,1
 332 0136 F1F7      		brne 1b
 333               	/* #NOAPP */
 334               	.LBE9:
 335               	.LBE8:
 336               	.LBE7:
 337               	.LBE6:
 339               	.Ltext4:
 157:eeprom_prog.c **** 			_delay_ms(2);
 158:eeprom_prog.c **** 			
 159:eeprom_prog.c **** 		    i++;
 341               	.LM34:
 342 0138 B394      		inc r11
 344               	.LM35:
 345 013a 2197      		sbiw r28,1
 346 013c 0894      		sec
 347 013e C11C      		adc r12,__zero_reg__
 348 0140 D11C      		adc r13,__zero_reg__
 349 0142 E11C      		adc r14,__zero_reg__
 350 0144 F11C      		adc r15,__zero_reg__
 351 0146 D7FF      		sbrs r29,7
 352 0148 CACF      		rjmp .L31
 353               	.L8:
 160:eeprom_prog.c ****    
 161:eeprom_prog.c **** 		}  
 162:eeprom_prog.c **** 
 163:eeprom_prog.c **** //	
 164:eeprom_prog.c **** 
 165:eeprom_prog.c **** 	}
 166:eeprom_prog.c **** // Finish copy   	
 167:eeprom_prog.c ****    	d7segment_display(0,2);
 355               	.LM36:
 356 014a 62E0      		ldi r22,lo8(2)
 357 014c 80E0      		ldi r24,lo8(0)
 358 014e 0E94 0000 		call d7segment_display
 359               	.LBB10:
 360               	.LBB11:
 362               	.Ltext5:
 364               	.LM37:
 365 0152 00E4      		ldi r16,lo8(-25536)
 366 0154 1CE9      		ldi r17,hi8(-25536)
 367               	.LBB12:
 368               	.LBB13:
 370               	.LM38:
 371 0156 C801      		movw r24,r16
 372               	/* #APP */
 373 0158 0197      		1: sbiw r24,1
 374 015a F1F7      		brne 1b
 375               	/* #NOAPP */
 376               	.LBE13:
 377               	.LBE12:
 378               	.LBE11:
 379               	.LBE10:
 381               	.Ltext6:
 168:eeprom_prog.c **** 	_delay_ms( 10);
 169:eeprom_prog.c **** 	d7segment_display(0,1);
 383               	.LM39:
 384 015c 61E0      		ldi r22,lo8(1)
 385 015e 80E0      		ldi r24,lo8(0)
 386 0160 0E94 0000 		call d7segment_display
 387               	.LBB14:
 388               	.LBB15:
 389               	.LBB16:
 390               	.LBB17:
 392               	.Ltext7:
 394               	.LM40:
 395 0164 C801      		movw r24,r16
 396               	/* #APP */
 397 0166 0197      		1: sbiw r24,1
 398 0168 F1F7      		brne 1b
 399               	/* #NOAPP */
 400               	.LBE17:
 401               	.LBE16:
 402               	.LBE15:
 403               	.LBE14:
 404 016a ADCF      		rjmp .L6
 405               	/* epilogue: frame size=0 */
 406               	/* epilogue: noreturn */
 407               	/* epilogue end (size=0) */
 408               	/* function main size 113 (109) */
 435               	.Lscope2:
 436               		.text
 438               	Letext:
 439               	/* File "eeprom_prog.c": code  191 = 0x00bf ( 119), prologues  38, epilogues  34 */
DEFINED SYMBOLS
                            *ABS*:00000000 eeprom_prog.c
                            *ABS*:0000003f __SREG__
                            *ABS*:0000003e __SP_H__
                            *ABS*:0000003d __SP_L__
                            *ABS*:00000000 __tmp_reg__
                            *ABS*:00000001 __zero_reg__
C:\DOCUME~1\tos\LOCALS~1\Temp/cckTaaaa.s:62     .text:00000000 __vector_13
C:\DOCUME~1\tos\LOCALS~1\Temp/cckTaaaa.s:118    .text:0000004a __vector_14
C:\DOCUME~1\tos\LOCALS~1\Temp/cckTaaaa.s:182    .text:0000009c main
C:\DOCUME~1\tos\LOCALS~1\Temp/cckTaaaa.s:438    .text:0000016c Letext

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
uart_put_RX
uart_get_TX
__stack
uart_init
d7segment_init
i2ceeprom_init
i2c_set_localdeviceaddr
i2ceeprom_read_byte
debug_value
i2ceeprom_write_byte
d7segment_display
